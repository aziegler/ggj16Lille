/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * melonJS is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license.php
 */
/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * The built in Function Object
 * @external Function
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function|Function}
 */
if(function(){
// Handle when the DOM is ready
function a(){
// Make sure that the DOM is not already loaded
if(!d){
// be sure document.body is there
if(!document.body)return setTimeout(a,13);
// clean up loading event
document.removeEventListener?document.removeEventListener("DOMContentLoaded",a,!1):window.removeEventListener("load",a,!1),
// Remember that the DOM is ready
d=!0;
// execute the defined callback
for(var b=0;b<e.length;b++)e[b].call(window,[]);e.length=0,/*
             * Add support for AMD (Asynchronous Module Definition) libraries
             * such as require.js.
             */
"function"==typeof define&&define.amd&&define("me",[],function(){return me})}}
// bind ready
function b(){
// directly call domReady if document is already "ready"
// Use the handy event callback
// A fallback to window.onload, that will always work
return c?void 0:(c=!0,"complete"===document.readyState?a():(document.addEventListener&&document.addEventListener("DOMContentLoaded",a,!1),void window.addEventListener("load",a,!1)))}/**
     * The built in window Object
     * @external window
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window.window|window}
     */
/**
     * (<b>m</b>)elonJS (<b>e</b>)ngine : All melonJS functions are defined inside
     * of this namespace.
     * <p>You generally should not add new properties to this namespace as it may be
     * overwritten in future versions.</p>
     * @name me
     * @namespace
     * @license {@link http://www.opensource.org/licenses/mit-license.php|MIT}
     * @copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
     */
window.me=window.me||{};/*
     * DOM loading stuff
     */
var c=!1,d=!1,e=[];/**
     * Specify a function to execute when the DOM is fully loaded
     * @memberOf external:window#
     * @alias onReady
     * @param {Function} handler A function to execute after the DOM is ready.
     * @example
     * // small main skeleton
     * var game = {
     *    // Initialize the game
     *    // called by the window.onReady function
     *    onload : function () {
     *       // init video
     *       if (!me.video.init('screen', 640, 480, true)) {
     *          alert("Sorry but your browser does not support html 5 canvas.");
     *          return;
     *       }
     *
     *       // initialize the "audio"
     *       me.audio.init("mp3,ogg");
     *
     *       // set callback for ressources loaded event
     *       me.loader.onload = this.loaded.bind(this);
     *
     *       // set all ressources to be loaded
     *       me.loader.preload(game.resources);
     *
     *       // load everything & display a loading screen
     *       me.state.change(me.state.LOADING);
     *    },
     *
     *    // callback when everything is loaded
     *    loaded : function () {
     *       // define stuff
     *       // ....
     *
     *       // change to the menu screen
     *       me.state.change(me.state.MENU);
     *    }
     * }; // game
     *
     * // "bootstrap"
     * window.onReady(function () {
     *    game.onload();
     * });
     */
window.onReady=function(a){
// Attach the listeners
// If the DOM is already ready
// Execute the function immediately
// Add the function to the wait list
return b(),d?a.call(window,[]):e.push(function(){return a.call(window,[])}),this},
// call the library init function when ready
// (this should not be here?)
me.skipAutoInit!==!0?window.onReady(function(){me.boot()}):me.init=function(){me.boot(),a()},window.throttle||(/**
         * a simple throttle function
         * use same fct signature as the one in prototype
         * in case it's already defined before
         * @ignore
         */
window.throttle=function(a,b,c){var d,e=window.performance.now();
// `no_trailing` defaults to false.
return"boolean"!=typeof b&&(b=!1),function(){var f=window.performance.now(),g=f-e,h=arguments;
// hold on to it
return a>g?void(b===!1&&(clearTimeout(d),d=setTimeout(function(){return e=f,c.apply(null,h)},g))):(e=f,c.apply(null,h))}}),"undefined"==typeof console&&(/**
         * Dummy console.log to avoid crash
         * in case the browser does not support it
         * @ignore
         */
console={// jshint ignore:line
log:function(){},info:function(){},error:function(){alert(Array.prototype.slice.call(arguments).join(", "))}})}(),!Function.prototype.bind){/** @ignore */
var Empty=function(){};/**
     * Binds this function to the given context by wrapping it in another function and returning the wrapper.<p>
     * Whenever the resulting "bound" function is called, it will call the original ensuring that this is set to context. <p>
     * Also optionally curries arguments for the function.
     * @memberof! external:Function#
     * @alias bind
     * @param {Object} context the object to bind to.
     * @param {} [arguments...] Optional additional arguments to curry for the function.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind|Function.bind}
     * @example
     * // Ensure that our callback is triggered with the right object context (this):
     * myObject.onComplete(this.callback.bind(this));
     */
Function.prototype.bind=function(a){
// ECMAScript 5 compliant implementation
// http://es5.github.com/#x15.3.4.5
// from https://github.com/kriskowal/es5-shim
var b=this;if("function"!=typeof b)throw new TypeError("Function.prototype.bind called on incompatible "+b);var c=Array.prototype.slice.call(arguments,1),d=function(){if(this instanceof d){var e=b.apply(this,c.concat(Array.prototype.slice.call(arguments)));return Object(e)===e?e:this}return b.apply(a,c.concat(Array.prototype.slice.call(arguments)))};return b.prototype&&(Empty.prototype=b.prototype,d.prototype=new Empty,Empty.prototype=null),d}}if(/**
 * Executes a function as soon as the interpreter is idle (stack empty).
 * @memberof! external:Function#
 * @alias defer
 * @param {Object} context The execution context of the deferred function.
 * @param {} [arguments...] Optional additional arguments to carry for the
 * function.
 * @return {Number} id that can be used to clear the deferred function using
 * clearTimeout
 * @example
 * // execute myFunc() when the stack is empty,
 * // with the current context and 'myArgument' as parameter
 * myFunc.defer(this, 'myArgument');
 */
Function.prototype.defer=function(){return setTimeout(this.bind.apply(this,arguments),.01)},/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * The built in Object object.
 * @external Object
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object|Object}
 */
Object.defineProperty||(/**
     * simple defineProperty function definition (if not supported by the browser)<br>
     * if defineProperty is redefined, internally use __defineGetter__/__defineSetter__ as fallback
     * @param {Object} obj The object on which to define the property.
     * @param {string} prop The name of the property to be defined or modified.
     * @param {Object} desc The descriptor for the property being defined or modified.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty|Object.defineProperty}
     */
Object.defineProperty=function(a,b,c){
// check if Object support __defineGetter function
if(!a.__defineGetter__)
// we should never reach this point....
throw new TypeError("Object.defineProperty not supported");c.get&&a.__defineGetter__(b,c.get),c.set&&a.__defineSetter__(b,c.set)}),Object.create||(/**
     * Prototypal Inheritance Create Helper
     * @name create
     * @memberOf external:Object#
     * @function
     * @param {Object} Object
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create|Object.create}
     * @example
     * // declare oldObject
     * oldObject = new Object();
     * // make some crazy stuff with oldObject (adding functions, etc...)
     * // ...
     *
     * // make newObject inherits from oldObject
     * newObject = Object.create(oldObject);
     */
Object.create=function(a){var b=function(){};return b.prototype=a,new b}),Object.is||(/**
     * The Object.is() method determines whether two values are the same value.
     * @name is
     * @memberOf external:Object#
     * @function
     * @param {Object} a The first value to compare
     * @param {Object} b The second value to compare
     * @return {Boolean}
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is|Object.is}
     * @example
     * // Strings are equal
     * var s = "foo";
     * Object.is(s, "foo"); //> true
     *
     * // 0 and -0 are not equal
     * Object.is(0, -0); //>false
     *
     * // NaN and NaN are equal
     * Object.is(NaN, NaN); //> true
     *
     * // Two object references are not equal
     * Object.is({}, {}); //> false
     *
     * // Two vars referencing one object are equal
     * var a = {}, b = a;
     * Object.is(a, b); //> true
     */
Object.is=function(a,b){return 0===a&&0===b?1/a===1/b:a!==a?b!==b:a===b}),Object.assign||/**
     * The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.
     * The Object.assign method only copies enumerable and own properties from a source object to a target object.
     * It uses [[Get]] on the source and [[Put]] on the target, so it will invoke getters and setters.
     * Therefore it assigns properties versus just copying or defining new properties.
     * This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters.
     * For copying propertiy definitions, including their enumerability, into prototypes Object.getOwnPropertyDescriptor and Object.defineProperty should be used instead.
     * @name assign
     * @memberOf external:Object#
     * @function
     * @param {Object} target The target object.
     * @param {Object[]} sources The source object(s).
     * @return {Object} The target object gets returned.
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign|Object.assign}
     * @example
     * // Merging objects
     * var o1 = { a: 1 };
     * var o2 = { b: 2 };
     * var o3 = { c: 3 };
     *
     * var obj = Object.assign(o1, o2, o3);
     * console.log(obj);
     * // { a: 1, b: 2, c: 3 }
     */
Object.defineProperty(Object,"assign",{enumerable:!1,configurable:!0,writable:!0,value:function(a){"use strict";if(void 0===a||null===a)throw new TypeError("Cannot convert first argument to object");for(var b=Object(a),c=1;c<arguments.length;c++){var d=arguments[c];if(void 0!==d&&null!==d)for(var e=Object.keys(Object(d)),f=0,g=e.length;g>f;f++){var h=e[f],i=Object.getOwnPropertyDescriptor(d,h);void 0!==i&&i.enumerable&&(b[h]=d[h])}}return b}}),/**
 * Sourced from: https://gist.github.com/parasyte/9712366
 * Extend a class prototype with the provided mixin descriptors.
 * Designed as a faster replacement for John Resig's Simple Inheritance.
 * @name extend
 * @memberOf external:Object#
 * @function
 * @param {Object[]} mixins... Each mixin is a dictionary of functions, or a
 * previously extended class whose methods will be applied to the target class
 * prototype.
 * @return {Object}
 * @example
 * var Person = Object.extend({
 *     "init" : function (isDancing) {
 *         this.dancing = isDancing;
 *     },
 *     "dance" : function () {
 *         return this.dancing;
 *     }
 * });
 *
 * var Ninja = Person.extend({
 *     "init" : function () {
 *         // Call the super constructor, passing a single argument
 *         Person.prototype.init.apply(this, [false]);
 *     },
 *     "dance" : function () {
 *         // Call the overridden dance() method
 *         return Person.prototype.dance.apply(this);
 *     },
 *     "swingSword" : function () {
 *         return true;
 *     }
 * });
 *
 * var Pirate = Person.extend(Ninja, {
 *     "init" : function () {
 *         // Call the super constructor, passing a single argument
 *         Person.prototype.init.apply(this, [true]);
 *     }
 * });
 *
 * var p = new Person(true);
 * console.log(p.dance()); // => true
 *
 * var n = new Ninja();
 * console.log(n.dance()); // => false
 * console.log(n.swingSword()); // => true
 *
 * var r = new Pirate();
 * console.log(r.dance()); // => true
 * console.log(r.swingSword()); // => true
 *
 * console.log(
 *     p instanceof Person &&
 *     n instanceof Ninja &&
 *     n instanceof Person &&
 *     r instanceof Pirate &&
 *     r instanceof Person
 * ); // => true
 *
 * console.log(r instanceof Ninja); // => false
 */
function(){/**
     * Apply methods to the class prototype.
     * @ignore
     */
function a(a,b,c){Object.keys(c).forEach(function(d){if(b[d]=c[d],"function"!=typeof c[d])throw new TypeError("extend: Method `"+d+"` is not a function");Object.defineProperty(a.prototype,d,{configurable:!0,value:c[d]})})}/**
     * Special method that acts as a proxy to the super class.
     * @name _super
     * @ignore
     */
function b(a,b,c){return a.prototype[b].apply(this,c)}Object.defineProperty(Object.prototype,"extend",{value:function(){/**
             * The class constructor which calls the user `init` constructor.
             * @ignore
             */
function c(){
// Call the user constructor
return this.init.apply(this,arguments),this}for(var d={},e=new Array(arguments.length),f=0;f<arguments.length;f++)e.push(arguments[f]);
// Verify constructor exists
if(
// Apply superClass
c.prototype=Object.create(this.prototype),
// Apply all mixin methods to the class prototype
e.forEach(function(b){a(c,d,b.__methods__||b)}),!("init"in c.prototype))throw new TypeError("extend: Class is missing a constructor named `init`");
// Apply syntactic sugar for accessing methods on super classes
// Create a hidden property on the class itself
// List of methods, used for applying classes as mixins
return Object.defineProperty(c.prototype,"_super",{value:b}),Object.defineProperty(c,"__methods__",{value:d}),c}})}(),/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * The built in Error object.
 * @external Error
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error|Error}
 */
/**
 * melonJS base class for exception handling.
 * @name Error
 * @memberOf me
 * @constructor
 * @param {String} msg Error message.
 */
me.Error=Error.extend({init:function(a){this.name="me.Error",this.message=a}}),/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * The built in Number Object
 * @external Number
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number|Number}
 */
/**
 * add a clamp fn to the Number object
 * @memberof! external:Number#
 * @alias clamp
 * @param {number} low lower limit
 * @param {number} high higher limit
 * @return {number} clamped value
 */
Number.prototype.clamp=function(a,b){return a>this?a:this>b?b:+this},/**
 * return a random integer between min, max (exclusive)
 * @memberof! external:Number#
 * @alias random
 * @param {number} [min=this] minimum value.
 * @param {number} max maximum value.
 * @return {number} random value
 * @example
 * // Print a random number; one of 5, 6, 7, 8, 9
 * console.log( (5).random(10) );
 * // Select a random array element
 * var ar = [ "foo", "bar", "baz" ];
 * console.log(ar[ (0).random(ar.length) ]);
 */
Number.prototype.random=function(a,b){return b||(b=a,a=this),~~(Math.random()*(b-a))+a},/**
 * return a random float between min, max (exclusive)
 * @memberof! external:Number#
 * @alias randomFloat
 * @param {number} [min=this] minimum value.
 * @param {number} max maximum value.
 * @return {number} random value
 * @example
 * // Print a random number; one of 5, 6, 7, 8, 9
 * console.log( (5).random(10) );
 * // Select a random array element
 * var ar = [ "foo", "bar", "baz" ];
 * console.log(ar[ (0).random(ar.length) ]);
 */
Number.prototype.randomFloat=function(a,b){return b||(b=a,a=this),Math.random()*(b-a)+a},/**
 * return a weighted random between min, max (exclusive)
 * favoring the lower numbers
 * @memberof! external:Number#
 * @alias weightedRandom
 * @param {number} [min=this] minimum value.
 * @param {number} max maximum value.
 * @return {number} random value
 * @example
 * // Print a random number; one of 5, 6, 7, 8, 9
 * console.log( (5).random(10) );
 * // Select a random array element
 * var ar = [ "foo", "bar", "baz" ];
 * console.log(ar[ (0).random(ar.length) ]);
 */
Number.prototype.weightedRandom=function(a,b){return b||(b=a,a=this),~~(Math.pow(Math.random(),2)*(b-a))+a},/**
 * round a value to the specified number of digit
 * @memberof! external:Number#
 * @alias round
 * @param {number} [num=this] value to be rounded.
 * @param {number} dec number of decimal digit to be rounded to.
 * @return {number} rounded value
 * @example
 * // round a specific value to 2 digits
 * Number.prototype.round (10.33333, 2); // return 10.33
 * // round a float value to 4 digits
 * num = 10.3333333
 * num.round(4); // return 10.3333
 */
Number.prototype.round=function(a,b){
// if only one argument use the object value
a=arguments.length<2?this:a;var c=Math.pow(10,b||a||0);return~~(.5+a*c)/c},/**
 * a quick toHex function<br>
 * given number <b>must</b> be an int, with a value between 0 and 255
 * @memberof! external:Number#
 * @alias toHex
 * @return {string} converted hexadecimal value
 */
Number.prototype.toHex=function(){return"0123456789ABCDEF".charAt(this-this%16>>4)+"0123456789ABCDEF".charAt(this%16)},/**
 * Returns a value indicating the sign of a number<br>
 * @memberof! external:Number#
 * @alias sign
 * @return {number} sign of a the number
 */
Number.prototype.sign=function(){return 0>this?-1:this>0?1:0},/**
 * Converts an angle in degrees to an angle in radians
 * @memberof! external:Number#
 * @alias degToRad
 * @param {number} [angle="angle"] angle in degrees
 * @return {number} corresponding angle in radians
 * @example
 * // convert a specific angle
 * Number.prototype.degToRad (60); // return 1.0471...
 * // convert object value
 * var num = 60
 * num.degToRad(); // return 1.0471...
 */
Number.prototype.degToRad=function(a){return(a||this)/180*Math.PI},/**
 * Converts an angle in radians to an angle in degrees.
 * @memberof! external:Number#
 * @alias radToDeg
 * @param {number} [angle="angle"] angle in radians
 * @return {number} corresponding angle in degrees
 * @example
 * // convert a specific angle
 * Number.prototype.radToDeg (1.0471975511965976); // return 59.9999...
 * // convert object value
 * num = 1.0471975511965976
 * Math.ceil(num.radToDeg()); // return 60
 */
Number.prototype.radToDeg=function(a){return(a||this)*(180/Math.PI)},/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * The built in String Object
 * @external String
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String|String}
 */
String.prototype.trim||(/**
     * returns the string stripped of whitespace from both ends
     * @memberof! external:String#
     * @alias trim
     * @return {string} trimmed string
     */
String.prototype.trim=function(){return this.replace(/^\s+|\s+$/gm,"")}),String.prototype.trimLeft||(/**
     * returns the string stripped of whitespace from the left.
     * @memberof! external:String#
     * @alias trimLeft
     * @return {string} trimmed string
     */
String.prototype.trimLeft=function(){return this.replace(/^\s+/,"")}),String.prototype.trimRight||(/**
     * returns the string stripped of whitespace from the right.
     * @memberof! external:String#
     * @alias trimRight
     * @return {string} trimmed string
     */
String.prototype.trimRight=function(){return this.replace(/\s+$/,"")}),/**
 * add isNumeric fn to the string object
 * @memberof! external:String#
 * @alias isNumeric
 * @return {boolean} true if string contains only digits
 */
String.prototype.isNumeric=function(){return!isNaN(this)&&""!==this.trim()},/**
 * add a isBoolean fn to the string object
 * @memberof! external:String#
 * @alias isBoolean
 * @return {boolean} true if the string is either true or false
 */
String.prototype.isBoolean=function(){var a=this.trim();return"true"===a||"false"===a},String.prototype.contains||(/**
     * determines whether or not a string contains another string.
     * @memberof! external:String#
     * @alias contains
     * @param {string} str A string to be searched for within this string.
     * @param {number} [startIndex=0] The position in this string at which
     * to begin searching for given string.
     * @return {boolean} true if contains the specified string
     */
String.prototype.contains=function(a,b){return-1!==String.prototype.indexOf.call(this,a,b)}),/**
 * convert the string to hex value
 * @memberof! external:String#
 * @alias toHex
 * @return {string}
 */
String.prototype.toHex=function(){for(var a="",b=0;b<this.length;)a+=this.charCodeAt(b++).toString(16);return a},/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * The built in Array Object
 * @external Array
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array|Array}
 */
/**
 * Remove the specified object from the Array<br>
 * @memberof! external:Array#
 * @alias remove
 * @param {Object} object to be removed
 */
Array.prototype.remove=function(a){var b=Array.prototype.indexOf.call(this,a);return-1!==b&&Array.prototype.splice.call(this,b,1),this},Array.prototype.forEach||(/**
     * provide a replacement for browsers that don't
     * support Array.prototype.forEach (JS 1.6)
     * @ignore
     */
Array.prototype.forEach=function(a,b){for(var c=0,d=this.length;d--;c++)a.call(b||this,this[c],c,this)}),Array.isArray||(/**
     * provide a replacement for browsers that don't
     * natively support Array.isArray
     * @ignore
     */
Array.isArray=function(a){var b;return b=a instanceof Array}),/**
 * return a random array element
 * @memberof! external:Array#
 * @alias random
 * @param {array} entry array to pick a element
 * @return {any} random member of array
 */
Array.prototype.random=function(a){return a[0..random(a.length)]},/**
 * return a weighted random array element, favoring the earlier entries
 * @memberof! external:Array#
 * @alias weightedRandom
 * @param {array} entry array to pick a element
 * @return {any} random member of array
 */
Array.prototype.weightedRandom=function(a){return a[0..weightedRandom(a.length)]},/**
 * A fake TypedArray object to be used for the TypedArray polyfills
 * @ignore
 */
me.TypedArray=function(a){var b=0;if(Array.isArray(a))this.concat(a.slice());else{if(1!==arguments.length||"number"!=typeof a)throw new me.Error("TypedArray polyfill: Unsupported constructor arguments",arguments);for(b=0;a>b;b++)this.push(0)}},me.TypedArray.prototype=Array.prototype,/**
 * The set() method stores multiple values in the typed array, reading input values from a specified array.
 * @ignore
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set|TypedArray.prototype.set}
 */
me.TypedArray.prototype.set=function(a,b){if(b=b||0,a.length+b>this.length)throw new me.Error("TypedArray pollyfill: Buffer overflow in set");for(var c=0;c<a.length;c++,b++)this[b]=a[c]},/**
 * The built in Float32Array object.
 * @external Float32Array
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Float32Array|Float32Array}
 */
window.Float32Array=window.Float32Array||me.TypedArray,/**
 * The built in Uint8Array object.
 * @external Uint8Array
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Uint8Array|Uint8Array}
 */
window.Uint8Array=window.Uint8Array||me.TypedArray,/**
 * The built in Uint16Array object.
 * @external Uint16Array
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Uint16Array|Uint16Array}
 */
window.Uint16Array=window.Uint16Array||me.TypedArray,/**
 * The built in Uint32Array object.
 * @external Uint32Array
 * @see {@link https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Uint32Array|Uint32Array}
 */
window.Uint32Array=window.Uint32Array||me.TypedArray,/**
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
// define window.performance if undefined
"undefined"==typeof window.performance&&(window.performance={}),"undefined"==typeof Date.now&&(/**
     * provide a replacement for browser not
     * supporting Date.now (JS 1.5)
     * @ignore
     */
Date.now=function(){return(new Date).getTime()}),!window.performance.now){var timeOffset=Date.now();window.performance.timing&&window.performance.timing.navigationStart&&(timeOffset=window.performance.timing.navigationStart),/**
     * provide a polyfill for window.performance now
     * to provide consistent time information across browser
     * (always return the elapsed time since the browser started)
     * @ignore
     */
window.performance.now=function(){return Date.now()-timeOffset}}/*

Copyright (C) 2011 by Andrea Giammarchi, @WebReflection

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
/* jshint -W013 */
/* jshint -W015 */
/* jshint -W040 */
/* jshint -W108 */
/* jshint -W116 */
!function(a){"use strict";/**
   * ES6 collection constructor
   * @return {Function} a collection class
   */
function b(a,b){function d(a){
//parse initial iterable argument passed
return this&&this.constructor===d?(this._keys=[],this._values=[],this._hash={},this.objectOnly=b,void(a&&c.call(this,a))):new d(a)}
//define size for non object-only collections
//set prototype
return b||r(a,"size",{get:n}),a.constructor=d,d.prototype=a,d}/** parse initial iterable argument passed */
function c(a){
//init Set argument, like `[1,2,3,{}]`
this.add?a.forEach(this.add,this):a.forEach(function(a){this.set(a[0],a[1])},this)}function d(a){if(this.has(a)){if("string"==typeof a||"number"==typeof a)return this._hash[a]=void 0,!0;this._keys.splice(q,1),this._values.splice(q,1)}
// Aurora here does it while Canary doesn't
return q>-1}function e(a){return"string"==typeof a||"number"==typeof a?this._hash[a]:this.has(a)?this._values[q]:void 0}function f(a,b){if(this.objectOnly&&b!==Object(b))throw new TypeError("Invalid value used as weak collection key");if("string"==typeof b||"number"==typeof b)return this._hash.hasOwnProperty(b);
//NaN passed
if(b!=b)for(q=a.length;q--&&!s(a[q],b););else q=a.indexOf(b);return q>-1}function g(a){return f.call(this,this._values,a)}function h(a){return f.call(this,this._keys,a)}/** @chainable */
function i(a,b){return"string"==typeof a||"number"==typeof a?this._hash[a]=b:this.has(a)?this._values[q]=b:this._values[this._keys.push(a)-1]=b,this}/** @chainable */
function j(a){return this.has(a)||this._values.push(a),this}function k(){this._values.length=0,this._hash={}}/** keys, values, and iterate related methods */
function l(){var a=this;return this._values.slice().concat(Object.keys(this._hash).map(function(b){return a._hash[b]}))}function m(){return this._keys.slice().concat(Object.keys(this._hash))}function n(){return this._values.length}function o(a,b){var c=this,d=c.values();c.keys().forEach(function(e,f){a.call(b,d[f],e,c)})}function p(a,b){var c=this;c._values.slice().forEach(function(d){a.call(b,d,d,c)})}
//shared pointer
var q,r=Object.defineProperty,s=Object.is;
//Polyfill global objects
"undefined"==typeof WeakMap&&(a.WeakMap=b({
// WeakMap#delete(key:void*):boolean
"delete":d,
// WeakMap#clear():
clear:k,
// WeakMap#get(key:void*):void*
get:e,
// WeakMap#has(key:void*):boolean
has:h,
// WeakMap#set(key:void*, value:void*):void
set:i},!0)),"undefined"==typeof Map&&(a.Map=b({
// WeakMap#delete(key:void*):boolean
"delete":d,
//:was Map#get(key:void*[, d3fault:void*]):void*
// Map#has(key:void*):boolean
has:h,
// Map#get(key:void*):boolean
get:e,
// Map#set(key:void*, value:void*):void
set:i,
// Map#keys(void):Array === not in specs
keys:m,
// Map#values(void):Array === not in specs
values:l,
// Map#forEach(callback:Function, context:void*):void ==> callback.call(context, key, value, mapObject) === not in specs`
forEach:o,
// Map#clear():
clear:k})),"undefined"==typeof Set&&(a.Set=b({
// Set#has(value:void*):boolean
has:g,
// Set#add(value:void*):boolean
add:j,
// Set#delete(key:void*):boolean
"delete":d,
// Set#clear():
clear:k,
// Set#values(void):Array === not in specs
values:l,
// Set#forEach(callback:Function, context:void*):void ==> callback.call(context, value, index) === not in specs
forEach:p})),"undefined"==typeof WeakSet&&(a.WeakSet=b({
// WeakSet#delete(key:void*):boolean
"delete":d,
// WeakSet#add(value:void*):boolean
add:j,
// WeakSet#clear():
clear:k,
// WeakSet#has(value:void*):boolean
has:g},!0))}("undefined"!=typeof exports&&"undefined"!=typeof global?global:window),/**
 * MelonJS Game Engine
 * (C) 2011 - 2014 Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
function(){function a(){var a={};return document.location.hash&&document.location.hash.substr(1).split("&").filter(function(a){return""!==a}).forEach(function(b){var c=b.split("="),d=c.shift(),e=c.join("=");a[d]=e||!0}),a}/**
     * me global references
     * @ignore
     */
me.mod="melonJS",me.version="2.1.3",/**
     * global system settings and browser capabilities
     * @namespace
     */
me.sys={/*
         * Global settings
         */
/**
         * Set game FPS limiting
         * @see me.timer.tick
         * @type {Number}
         * @default 60
         * @memberOf me.sys
         */
fps:60,/**
         * Enable/disable frame interpolation
         * @see me.timer.tick
         * @type {Boolean}
         * @default false
         * @memberOf me.sys
         */
interpolation:!1,/**
         * Global scaling factor
         * @type {me.Vector2d}
         * @default <0,0>
         * @memberOf me.sys
         */
scale:null,//initialized by me.video.init
/**
         * Global gravity settings <br>
         * will override entities init value if defined<br>
         * @type {Number|undefined}
         * @default undefined
         * @memberOf me.sys
         */
gravity:void 0,/**
         * Specify either to stop on audio loading error or not<br>
         * if true, melonJS will throw an exception and stop loading<br>
         * if false, melonJS will disable sounds and output a warning message
         * in the console<br>
         * @type {Boolean}
         * @default true
         * @memberOf me.sys
         */
stopOnAudioError:!0,/**
         * Specify whether to pause the game when losing focus.<br>
         * @type {Boolean}
         * @default true
         * @memberOf me.sys
         */
pauseOnBlur:!0,/**
         * Specify whether to unpause the game when gaining focus.<br>
         * @type {Boolean}
         * @default true
         * @memberOf me.sys
         */
resumeOnFocus:!0,/**
         * Specify whether to stop the game when losing focus or not<br>
         * The engine restarts on focus if this is enabled.
         * @type {boolean}
         * @default false
         * @memberOf me.sys
         */
stopOnBlur:!1,/**
         * Specify the rendering method for layers <br>
         * if false, visible part of the layers are rendered dynamically<br>
         * if true, the entire layers are first rendered into an offscreen
         * canvas<br>
         * the "best" rendering method depends of your game<br>
         * (amount of layer, layer size, amount of tiles per layer, etc.)<br>
         * note : rendering method is also configurable per layer by adding this
         * property to your layer (in Tiled)<br>
         * @type {Boolean}
         * @default false
         * @memberOf me.sys
         */
preRender:!1,/*
         * System methods
         */
/**
         * Compare two version strings
         * @public
         * @function
         * @param {String} first First version string to compare
         * @param {String} [second="2.1.3"] Second version string to compare
         * @return {Number} comparison result <br>&lt; 0 : first &lt; second<br>
         * 0 : first == second<br>
         * &gt; 0 : first &gt; second
         * @example
         * if (me.sys.checkVersion("2.1.3") > 0) {
         *     console.error(
         *         "melonJS is too old. Expected: 2.1.3, Got: " + me.version
         *     );
         * }
         */
checkVersion:function(a,b){b=b||me.version;for(var c=a.split("."),d=b.split("."),e=Math.min(c.length,d.length),f=0,g=0;e>g&&!(f=+c[g]-+d[g]);g++);return f?f:c.length-d.length}};
// a flag to know if melonJS
// is initialized
var b=!1;Object.defineProperty(me,"initialized",{get:function(){return b}}),/*
     * initial boot function
     */
me.boot=function(){
// don't do anything if already initialized (should not happen anyway)
b||(
// check the device capabilites
me.device._check(),
// initialize me.save
me.save._init(),
// parse optional url parameters/tags
me.game.HASH=a(),
// enable/disable the cache
me.loader.setNocache(me.game.HASH.nocache||!1),
// init the FPS counter if needed
me.timer.init(),
// create a new map reader instance
me.mapReader=new me.TMXMapReader,
// init the App Manager
me.state.init(),
// init the Entity Pool
me.pool.init(),
// automatically enable keyboard events if on desktop
me.device.isMobile===!1&&me.input._enableKeyboardEvent(),
// init the level Director
me.levelDirector.reset(),b=!0)}}(),/**
 * MelonJS Game Engine
 * (C) 2011 - 2014 Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
function(){/**
     * me.game represents your current game, it contains all the objects,
     * tilemap layers, current viewport, collision map, etc...<br>
     * me.game is also responsible for updating (each frame) the object status
     * and draw them<br>
     * @namespace me.game
     * @memberOf me
     */
me.game=function(){
// hold public stuff in our singleton
var a={},b=!1,c=!0,d=0,e=1,f=null,g={pos:{x:0,y:0},moveToCenter:function(){}};
// return our object
/*
         * PUBLIC STUFF
         */
/**
         * a reference to the game viewport.
         * @public
         * @type {me.Viewport}
         * @name viewport
         * @memberOf me.game
         */
/**
         * a reference to the game current level
         * @public
         * @type {me.TMXTileMap}
         * @name currentLevel
         * @memberOf me.game
         */
/**
         * a reference to the game world <br>
         * a world is a virtual environment containing all the game objects
         * @public
         * @type {me.Container}
         * @name world
         * @memberOf me.game
         */
/**
         * when true, all objects will be added under the root world container<br>
         * when false, a `me.Container` object will be created for each
         * corresponding `TMXObjectGroup`
         * default value : true
         * @public
         * @type {boolean}
         * @name mergeGroup
         * @memberOf me.game
         */
/**
         * The property of should be used when sorting entities <br>
         * value : "x", "y", "z" (default: "z")
         * @public
         * @type {string}
         * @name sortOn
         * @memberOf me.game
         */
/**
         * default layer tmxRenderer
         * @private
         * @ignore
         * @type {me.TMXRenderer}
         * @name tmxRenderer
         * @memberOf me.game
         */
/**
         * Fired when a level is fully loaded and <br>
         * and all entities instantiated. <br>
         * Additionnaly the level id will also be passed
         * to the called function.
         * @public
         * @callback
         * @name onLevelLoaded
         * @memberOf me.game
         * @example
         * // call myFunction () everytime a level is loaded
         * me.game.onLevelLoaded = this.myFunction.bind(this);
         */
/**
         * Provide an object hash with all tag parameters specified in the url.
         * @property {Boolean} [hitbox=false] draw the hitbox in the debug panel (if enabled)
         * @property {Boolean} [velocity=false] draw the entities velocity in the debug panel (if enabled)
         * @property {Boolean} [quadtree=false] draw the quadtree in the debug panel (if enabled)
         * @property {Boolean} [webgl=false] force the renderer to WebGL
         * @public
         * @type {Object}
         * @name HASH
         * @memberOf me.game
         * @example
         * // http://www.example.com/index.html#debug&hitbox=true&mytag=value
         * console.log(me.game.HASH["mytag"]); //> "value"
         */
/**
         * Initialize the game manager
         * @name init
         * @memberOf me.game
         * @private
         * @ignore
         * @function
         * @param {Number} [width] width of the canvas
         * @param {Number} [height] width of the canvas
         * init function.
         */
/**
         * reset the game Object manager<p>
         * destroy all current objects
         * @name reset
         * @memberOf me.game
         * @public
         * @function
         */
/**
         * Returns the parent container of the specified Child in the game world
         * @name getParentContainer
         * @memberOf me.game
         * @function
         * @param {me.Renderable} child
         * @return {me.Container}
         */
/**
         * force the redraw (not update) of all objects
         * @name repaint
         * @memberOf me.game
         * @public
         * @function
         */
/**
         * update all objects of the game manager
         * @name update
         * @memberOf me.game
         * @private
         * @ignore
         * @function
         * @param {Number} time current timestamp as provided by the RAF callback
         */
/**
         * draw all existing objects
         * @name draw
         * @memberOf me.game
         * @private
         * @ignore
         * @function
         */
return a.viewport=null,a.currentLevel=null,a.world=null,a.mergeGroup=!0,a.sortOn="z",a.tmxRenderer=null,a.onLevelLoaded=null,a.HASH=null,a.init=function(d,e){b||(d=d||me.video.renderer.getWidth(),e=e||me.video.renderer.getHeight(),a.viewport=new me.Viewport(0,0,d,e),a.world=new me.Container(0,0,d,e),a.world.name="rootContainer",a.world.ancestor=a.world,me.event.subscribe(me.event.VIEWPORT_ONRESIZE,function(){var b=a.currentLevel,c=a.world.transform;b.moveToCenter(),c.identity(),c.translateV(b.pos)}),me.collision.init(),f=me.video.renderer,me.event.publish(me.event.GAME_INIT),me.input._translatePointerEvents(),c=!0,a.currentLevel=g,b=!0)},a.reset=function(){
// clear the quadtree
me.collision.quadTree.clear(),
// remove all objects
a.world.destroy(),
// reset the viewport to zero ?
a.viewport&&a.viewport.reset(),a.currentLevel=g,
// reset the renderer
f.reset(),d=0,e=~~(.5+60/me.sys.fps)},a.getParentContainer=function(a){return a.ancestor},a.repaint=function(){c=!0},a.update=function(b){
// handle frame skipping if required
++d%e===0&&(d=0,me.timer.update(b),me.collision.quadTree.clear(),me.collision.quadTree.insertContainer(a.world),c=a.world.update(me.timer.getDelta())||c,c=a.viewport.update(me.timer.getDelta())||c)},a.draw=function(){if(c){
// cache the viewport rendering position, so that other object
// can access it later (e,g. entityContainer when drawing floating objects)
var b=a.viewport.pos.x+~~a.viewport.offset.x,d=a.viewport.pos.y+~~a.viewport.offset.y;
// translate the world coordinates by default to screen coordinates
a.world.transform.translate(-b,-d),
// substract the map offset to current the current pos
a.viewport.screenX=b-a.currentLevel.pos.x,a.viewport.screenY=d-a.currentLevel.pos.y,
// prepare renderer to draw a new frame
me.video.renderer.prepareSurface(),
// update all objects,
// specifying the viewport as the rectangle area to redraw
a.world.draw(f,a.viewport),
// translate back
a.world.transform.translate(b,d),
// draw our camera/viewport
a.viewport.draw(f)}c=!1,me.video.renderer.blitSurface()},a}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org/
 *
 */
function(){/**
     * Convert first character of a string to uppercase, if it's a letter.
     * @ignore
     * @function
     * @name capitalize
     * @param  {String} str Input string.
     * @return {String} String with first letter made uppercase.
     */
var a=function(a){return a.substring(0,1).toUpperCase()+a.substring(1,a.length)};/**
     * A collection of utilities to ease porting between different user agents.
     * @namespace me.agent
     * @memberOf me
     */
me.agent=function(){var b={},c=["ms","MS","moz","webkit","o"];/**
         * Get a vendor-prefixed property
         * @public
         * @name prefixed
         * @function
         * @param {String} name Property name
         * @param {Object} [obj=window] Object or element reference to access
         * @return {Mixed} Value of property
         * @memberOf me.agent
         */
/**
         * Set a vendor-prefixed property
         * @public
         * @name setPrefixed
         * @function
         * @param {String} name Property name
         * @param {Mixed} value Property value
         * @param {Object} [obj=window] Object or element reference to access
         * @memberOf me.agent
         */
return b.prefixed=function(b,d){if(d=d||window,b in d)return d[b];var e,f=a(b);return c.some(function(a){var b=a+f;return e=b in d?d[b]:void 0}),e},b.setPrefixed=function(b,d,e){if(e=e||window,b in e)return void(e[b]=d);var f=a(b);c.some(function(a){var b=a+f;return b in e?(e[b]=d,!0):!1})},b}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * A singleton object representing the device capabilities and specific events
     * @namespace me.device
     * @memberOf me
     */
me.device=function(){/**
         * event management (Accelerometer)
         * http://www.mobilexweb.com/samples/ball.html
         * http://www.mobilexweb.com/blog/safari-ios-accelerometer-websockets-html5
         * @ignore
         */
function a(a){a.reading?(
// For Windows 8 devices
c.accelerationX=a.reading.accelerationX,c.accelerationY=a.reading.accelerationY,c.accelerationZ=a.reading.accelerationZ):(
// Accelerometer information
c.accelerationX=a.accelerationIncludingGravity.x,c.accelerationY=a.accelerationIncludingGravity.y,c.accelerationZ=a.accelerationIncludingGravity.z)}function b(a){c.gamma=a.gamma,c.beta=a.beta,c.alpha=a.alpha}
// defines object for holding public information/functionality.
var c={},d=!1,e=!1,f=null;/**
         * check the device capapbilities
         * @ignore
         */
/**
         * detect the device type
         * @ignore
         */
/*
         * PUBLIC Properties & Functions
         */
// Browser capabilities
/**
         * Browser User Agent
         * @type Boolean
         * @readonly
         * @name ua
         * @memberOf me.device
         */
/**
         * Browser Local Storage capabilities <br>
         * (this flag will be set to false if cookies are blocked)
         * @type Boolean
         * @readonly
         * @name localStorage
         * @memberOf me.device
         */
/**
         * Browser accelerometer capabilities
         * @type Boolean
         * @readonly
         * @name hasAccelerometer
         * @memberOf me.device
         */
/**
         * Browser device orientation
         * @type Boolean
         * @readonly
         * @name hasDeviceOrientation
         * @memberOf me.device
         */
/**
         * Browser full screen support
         * @type Boolean
         * @readonly
         * @name hasFullscreenSupport
         * @memberOf me.device
         */
/**
         * Browser pointerlock api support
         * @type Boolean
         * @readonly
         * @name hasPointerLockSupport
         * @memberOf me.device
         */
/**
         * Browser Base64 decoding capability
         * @type Boolean
         * @readonly
         * @name nativeBase64
         * @memberOf me.device
         */
/**
         * Return the maximum number of touch contacts of current device.
         * @type Number
         * @readonly
         * @name maxTouchPoints
         * @memberOf me.device
         */
/**
         * Touch capabilities
         * @type Boolean
         * @readonly
         * @name touch
         * @memberOf me.device
         */
/**
         * equals to true if a mobile device <br>
         * (Android | iPhone | iPad | iPod | BlackBerry | Windows Phone | Kindle)
         * @type Boolean
         * @readonly
         * @name isMobile
         * @memberOf me.device
         */
/**
         * equals to true if the device is an iOS platform <br>
         * @type Boolean
         * @readonly
         * @name iOS
         * @memberOf me.device
         */
/**
         * equals to true if the device is an Android platform <br>
         * @type Boolean
         * @readonly
         * @name android
         * @memberOf me.device
         */
/**
         * equals to true if the device is an Android 2.x platform <br>
         * @type Boolean
         * @readonly
         * @name android2
         * @memberOf me.device
         */
/**
         * equals to true if the device is a Windows Phone platform <br>
         * @type Boolean
         * @readonly
         * @name wp
         * @memberOf me.device
         */
/**
         * equals to true if the device is a BlackBerry platform <br>
         * @type Boolean
         * @readonly
         * @name BlackBerry
         * @memberOf me.device
         */
/**
         * equals to true if the device is a Kindle platform <br>
         * @type Boolean
         * @readonly
         * @name Kindle
         * @memberOf me.device
         */
/**
         * The device current orientation status. <br>
         *   0 : default orientation<br>
         *  90 : 90 degrees clockwise from default<br>
         * -90 : 90 degrees anti-clockwise from default<br>
         * 180 : 180 degrees from default
         * @type Number
         * @readonly
         * @name orientation
         * @memberOf me.device
         */
/**
         * contains the g-force acceleration along the x-axis.
         * @public
         * @type Number
         * @readonly
         * @name accelerationX
         * @memberOf me.device
         */
/**
         * contains the g-force acceleration along the y-axis.
         * @public
         * @type Number
         * @readonly
         * @name accelerationY
         * @memberOf me.device
         */
/**
         * contains the g-force acceleration along the z-axis.
         * @public
         * @type Number
         * @readonly
         * @name accelerationZ
         * @memberOf me.device
         */
/**
         * Device orientation Gamma property. Gives angle on tilting a portrait held phone left or right
         * @public
         * @type Number
         * @readonly
         * @name gamma
         * @memberOf me.device
         */
/**
         * Device orientation Beta property. Gives angle on tilting a portrait held phone forward or backward
         * @public
         * @type Number
         * @readonly
         * @name beta
         * @memberOf me.device
         */
/**
         * Device orientation Alpha property. Gives angle based on the rotation of the phone around its z axis.
         * The z-axis is perpendicular to the phone, facing out from the center of the screen.
         * @public
         * @type Number
         * @readonly
         * @name alpha
         * @memberOf me.device
         */
/**
         * a string representing the preferred language of the user, usually the language of the browser UI.
         * (will default to "en" if the information is not available)
         * @public
         * @type String
         * @readonly
         * @see http://www.w3schools.com/tags/ref_language_codes.asp
         * @name language
         * @memberOf me.device
         */
/**
         * Triggers a fullscreen request. Requires fullscreen support from the browser/device.
         * @name requestFullscreen
         * @memberOf me.device
         * @function
         * @param {Object} [element=default canvas object] the element to be set in full-screen mode.
         * @example
         * // add a keyboard shortcut to toggle Fullscreen mode on/off
         * me.input.bindKey(me.input.KEY.F, "toggleFullscreen");
         * me.event.subscribe(me.event.KEYDOWN, function (action, keyCode, edge) {
         *    // toggle fullscreen on/off
         *    if (action === "toggleFullscreen") {
         *       if (!me.device.isFullscreen) {
         *          me.device.requestFullscreen();
         *       } else {
         *          me.device.exitFullscreen();
         *       }
         *    }
         * });
         */
/**
         * Exit fullscreen mode. Requires fullscreen support from the browser/device.
         * @name exitFullscreen
         * @memberOf me.device
         * @function
         */
/**
         * return the device pixel ratio
         * @name getPixelRatio
         * @memberOf me.device
         * @function
         */
/**
         * return the device storage
         * @name getStorage
         * @memberOf me.device
         * @function
         * @param {String} [type="local"]
         * @return me.save object
         */
/**
         * Enters pointer lock, requesting it from the user first. Works on supported devices & browsers
         * Must be called in a click event or an event that requires user interaction.
         * If you need to run handle events for errors or change of the pointer lock, see below.
         * @name turnOnPointerLock
         * @memberOf me.device
         * @function
         * @example
         * document.addEventListener("pointerlockchange", pointerlockchange, false);
         * document.addEventListener("mozpointerlockchange", pointerlockchange, false);
         * document.addEventListener("webkitpointerlockchange", pointerlockchange, false);
         *
         * document.addEventListener("pointerlockerror", pointerlockerror, false);
         * document.addEventListener("mozpointerlockerror", pointerlockerror, false);
         * document.addEventListener("webkitpointerlockerror", pointerlockerror, false);
         */
/**
         * Exits pointer lock. Works on supported devices & browsers
         * @name turnOffPointerLock
         * @memberOf me.device
         * @function
         */
/**
         * watch Accelerator event
         * @name watchAccelerometer
         * @memberOf me.device
         * @public
         * @function
         * @return {Boolean} false if not supported by the device
         */
/**
         * unwatch Accelerometor event
         * @name unwatchAccelerometer
         * @memberOf me.device
         * @public
         * @function
         */
/**
         * watch the device orientation event
         * @name watchDeviceOrientation
         * @memberOf me.device
         * @public
         * @function
         * @return {Boolean} false if not supported by the device
         */
/**
         * unwatch Device orientation event
         * @name unwatchDeviceOrientation
         * @memberOf me.device
         * @public
         * @function
         */
/**
         * the vibrate method pulses the vibration hardware on the device, <br>
         * If the device doesn't support vibration, this method has no effect. <br>
         * If a vibration pattern is already in progress when this method is called,
         * the previous pattern is halted and the new one begins instead.
         * @name vibrate
         * @memberOf me.device
         * @public
         * @function
         * @param {Number|Number[]} pattern pattern of vibration and pause intervals
         * @example
         * // vibrate for 1000 ms
         * navigator.vibrate(1000);
         * // or alternatively
         * navigator.vibrate([1000]);
         * // vibrate for 50 ms, be still for 100 ms, and then vibrate for 150 ms:
         * navigator.vibrate([50, 100, 150]);
         * // cancel any existing vibrations
         * navigator.vibrate(0);
         */
return c._check=function(){
// detect device type/platform
me.device._detectDevice(),
// future proofing (MS) feature detection
me.device.pointerEnabled=me.agent.prefixed("pointerEnabled",navigator),me.device.maxTouchPoints=me.agent.prefixed("maxTouchPoints",navigator)||0,window.gesture=me.agent.prefixed("gesture"),
// detect touch capabilities
me.device.touch="createTouch"in document||"ontouchstart"in window||navigator.isCocoonJS||me.device.pointerEnabled&&me.device.maxTouchPoints>0,
// accelerometer detection
me.device.hasAccelerometer="undefined"!=typeof window.DeviceMotionEvent||"undefined"!=typeof window.Windows&&"function"==typeof Windows.Devices.Sensors.Accelerometer,
// pointerlock detection
this.hasPointerLockSupport=me.agent.prefixed("pointerLockElement",document),this.hasPointerLockSupport&&(document.exitPointerLock=me.agent.prefixed("exitPointerLock",document)),
// device motion detection
window.DeviceOrientationEvent&&(me.device.hasDeviceOrientation=!0),
// fullscreen api detection & polyfill when possible
this.hasFullscreenSupport=me.agent.prefixed("fullscreenEnabled",document)||document.mozFullScreenEnabled,document.exitFullscreen=me.agent.prefixed("cancelFullScreen",document)||me.agent.prefixed("exitFullscreen",document),
// vibration API poyfill
navigator.vibrate=me.agent.prefixed("vibrate",navigator);try{c.localStorage=!!window.localStorage}catch(a){
// the above generates an exception when cookies are blocked
c.localStorage=!1}
// set pause/stop action on losing focus
window.addEventListener("blur",function(){me.sys.stopOnBlur&&me.state.stop(!0),me.sys.pauseOnBlur&&me.state.pause(!0)},!1),
// set restart/resume action on gaining focus
window.addEventListener("focus",function(){me.sys.stopOnBlur&&me.state.restart(!0),me.sys.resumeOnFocus&&me.state.resume(!0)},!1);
// Set the name of the hidden property and the change event for visibility
var b,d;"undefined"!=typeof document.hidden?(b="hidden",d="visibilitychange"):"undefined"!=typeof document.mozHidden?(b="mozHidden",d="mozvisibilitychange"):"undefined"!=typeof document.msHidden?(b="msHidden",d="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(b="webkitHidden",d="webkitvisibilitychange"),
// register on the event if supported
"string"==typeof d&&
// add the corresponding event listener
document.addEventListener(d,function(){document[b]?(me.sys.stopOnBlur&&me.state.stop(!0),me.sys.pauseOnBlur&&me.state.pause(!0)):(me.sys.stopOnBlur&&me.state.restart(!0),me.sys.resumeOnFocus&&me.state.resume(!0))},!1)},c._detectDevice=function(){
// iOS Device ?
me.device.iOS=me.device.ua.match(/iPhone|iPad|iPod/i)||!1,
// Android Device ?
me.device.android=me.device.ua.match(/Android/i)||!1,me.device.android2=me.device.ua.match(/Android 2/i)||!1,
// Windows Device ?
me.device.wp=me.device.ua.match(/Windows Phone/i)||!1,
// Kindle device ?
me.device.BlackBerry=me.device.ua.match(/BlackBerry/i)||!1,
// Kindle device ?
me.device.Kindle=me.device.ua.match(/Kindle|Silk.*Mobile Safari/i)||!1,
// Mobile platform
me.device.isMobile=me.device.ua.match(/Mobi/i)||me.device.iOS||me.device.android||me.device.wp||me.device.BlackBerry||me.device.Kindle||me.device.iOS||!1},c.ua=navigator.userAgent,c.localStorage=!1,c.hasAccelerometer=!1,c.hasDeviceOrientation=!1,c.hasFullscreenSupport=!1,c.hasPointerLockSupport=!1,c.nativeBase64="function"==typeof window.atob,c.maxTouchPoints=0,c.touch=!1,c.isMobile=!1,c.iOS=!1,c.android=!1,c.android2=!1,c.wp=!1,c.BlackBerry=!1,c.Kindle=!1,c.orientation=0,c.accelerationX=0,c.accelerationY=0,c.accelerationZ=0,c.gamma=0,c.beta=0,c.alpha=0,c.language=navigator.language||navigator.browserLanguage||navigator.userLanguage||"en",c.requestFullscreen=function(a){this.hasFullscreenSupport&&(a=a||me.video.getWrapper(),a.requestFullscreen=me.agent.prefixed("requestFullscreen",a)||a.mozRequestFullScreen,a.requestFullscreen())},c.exitFullscreen=function(){this.hasFullscreenSupport&&document.exitFullscreen()},c.getPixelRatio=function(){if(null===f){var a;a="undefined"!=typeof me.video.renderer?me.video.renderer.getScreenContext():me.Renderer.prototype.getContext2d(document.createElement("canvas"));var b=window.devicePixelRatio||1,c=me.agent.prefixed("backingStorePixelRatio",a)||1;f=b/c}return f},c.getStorage=function(a){switch(a=a||"local"){case"local":return me.save;default:throw new me.Error("storage type "+a+" not supported")}},c.turnOnPointerLock=function(){if(this.hasPointerLockSupport){var a=me.video.getWrapper();if(me.device.ua.match(/Firefox/i)){var b=function(){(me.agent.prefixed("fullscreenElement",document)||document.mozFullScreenElement)===a&&(document.removeEventListener("fullscreenchange",b),document.removeEventListener("mozfullscreenchange",b),a.requestPointerLock=me.agent.prefixed("requestPointerLock",a),a.requestPointerLock())};document.addEventListener("fullscreenchange",b,!1),document.addEventListener("mozfullscreenchange",b,!1),me.device.requestFullscreen()}else a.requestPointerLock()}},c.turnOffPointerLock=function(){this.hasPointerLockSupport&&document.exitPointerLock()},c.watchAccelerometer=function(){if(me.device.hasAccelerometer){if(!d){if("undefined"==typeof Windows)
// add a listener for the devicemotion event
window.addEventListener("devicemotion",a,!1);else{
// On Windows 8 Device
var b=Windows.Devices.Sensors.Accelerometer.getDefault();if(b){
// Capture event at regular intervals
var c=b.minimumReportInterval,e=c>=16?c:25;b.reportInterval=e,b.addEventListener("readingchanged",a,!1)}}d=!0}return!0}return!1},c.unwatchAccelerometer=function(){if(d){if("undefined"==typeof Windows)
// add a listener for the mouse
window.removeEventListener("devicemotion",a,!1);else{
// On Windows 8 Devices
var b=Windows.Device.Sensors.Accelerometer.getDefault();b.removeEventListener("readingchanged",a,!1)}d=!1}},c.watchDeviceOrientation=function(){return me.device.hasDeviceOrientation&&!e&&(window.addEventListener("deviceorientation",b,!1),e=!0),!1},c.unwatchDeviceOrientation=function(){e&&(window.removeEventListener("deviceorientation",b,!1),e=!1)},c.vibrate=function(a){navigator.vibrate&&navigator.vibrate(a)},c}(),/**
     * Returns true if the browser/device is in full screen mode.
     * @name isFullscreen
     * @memberOf me.device
     * @public
     * @type Boolean
     * @readonly
     * @return {boolean}
     */
Object.defineProperty(me.device,"isFullscreen",{get:function(){if(me.device.hasFullscreenSupport){var a=me.agent.prefixed("fullscreenElement",document)||document.mozFullScreenElement;return a===me.video.getWrapper()}return!1}}),/**
     * Returns true if the browser/device has audio capabilities.
     * @name sound
     * @memberOf me.device
     * @public
     * @type Boolean
     * @readonly
     * @return {boolean}
     */
Object.defineProperty(me.device,"sound",{get:function(){return!Howler.noAudio}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a Timer object to manage time function (FPS, Game Tick, Time...)<p>
     * There is no constructor function for me.timer
     * @namespace me.timer
     * @memberOf me
     */
me.timer=function(){
// hold public stuff in our api
var a={},b=0,c=0,d=0,e=0,f=0,g=Math.ceil(1e3/me.sys.fps),h=1e3/me.sys.fps*1.25,i=[],j=0,k=function(a){for(var b=0,c=i.length;c>b;b++)if(i[b].timerId===a){i.splice(b,1);break}},l=function(a){for(var b=0,c=i.length;c>b;b++){var d=i[b];d.pauseable&&me.state.isPaused()||(d.elapsed+=a),d.elapsed>=d.delay&&(d.fn.apply(this),d.repeat===!0?d.elapsed-=d.delay:me.timer.clearTimeout(d.timerId))}};
// return our apiect
/*
         * PUBLIC STUFF
         */
/**
         * Last game tick value.<br/>
         * Use this value to scale velocities during frame drops due to slow
         * hardware or when setting an FPS limit. (See {@link me.sys.fps})
         * This feature is disabled by default. Enable me.sys.interpolation to
         * use it.
         * @public
         * @see me.sys.interpolation
         * @type Number
         * @name tick
         * @memberOf me.timer
         */
/**
         * Last measured fps rate.<br/>
         * This feature is disabled by default. Load and enable the DebugPanel
         * plugin to use it.
         * @public
         * @type Number
         * @name fps
         * @memberOf me.timer
         */
/**
         * init the timer
         * @ignore
         */
/**
         * reset time (e.g. usefull in case of pause)
         * @name reset
         * @memberOf me.timer
         * @ignore
         * @function
         */
/**
         * Calls a function once after a specified delay.
         * @name setTimeout
         * @memberOf me.timer
         * @param {Function} fn the function you want to execute after delay milliseconds.
         * @param {Number} delay the number of milliseconds (thousandths of a second) that the function call should be delayed by.
         * @param {Boolean} [pauseable=true] respects the pause state of the engine.
         * @return {Number} The numerical ID of the timeout, which can be used later with me.timer.clearTimeout().
         * @function
         */
/**
         * Calls a function at specified interval.
         * @name setInterval
         * @memberOf me.timer
         * @param {Function} fn the function to execute
         * @param {Number} delay the number of milliseconds (thousandths of a second) on how often to execute the function
         * @param {Boolean} [pauseable=true] respects the pause state of the engine.
         * @return {Number} The numerical ID of the timeout, which can be used later with me.timer.clearInterval().
         * @function
         */
/**
         * Clears the delay set by me.timer.setTimeout().
         * @name clearTimeout
         * @memberOf me.timer
         * @function
         * @param {Number} timeoutID ID of the timeout to be cleared
         */
/**
         * Clears the Interval set by me.timer.setInterval().
         * @name clearInterval
         * @memberOf me.timer
         * @function
         * @param {Number} intervalID ID of the interval to be cleared
         */
/**
         * Return the current timestamp in milliseconds <br>
         * since the game has started or since linux epoch (based on browser support for High Resolution Timer)
         * @name getTime
         * @memberOf me.timer
         * @return {Number}
         * @function
         */
/**
         * Return elapsed time in milliseconds since the last update<br>
         * @name getDelta
         * @memberOf me.timer
         * @return {Number}
         * @function
         */
/**
         * compute the actual frame time and fps rate
         * @name computeFPS
         * @ignore
         * @memberOf me.timer
         * @function
         */
/**
         * update game tick
         * should be called once a frame
         * @param {Number} time current timestamp as provided by the RAF callback
         * @return {Number} time elapsed since the last update
         * @ignore
         */
return a.tick=1,a.fps=0,a.init=function(){
// reset variables to initial state
a.reset(),e=d=0},a.reset=function(){d=e=window.performance.now(),f=0,c=0,b=0},a.setTimeout=function(a,b,c){return i.push({fn:a,delay:b,elapsed:0,repeat:!1,timerId:++j,pauseable:c===!0||!0}),j},a.setInterval=function(a,b,c){return i.push({fn:a,delay:b,elapsed:0,repeat:!0,timerId:++j,pauseable:c===!0||!0}),j},a.clearTimeout=function(a){k.defer(this,a)},a.clearInterval=function(a){k.defer(this,a)},a.getTime=function(){return e},a.getDelta=function(){return f},a.countFPS=function(){b++,c+=f,b%10===0&&(this.fps=(~~(1e3*b/c)).clamp(0,me.sys.fps),c=0,b=0)},a.update=function(b){
// get the game tick
// update defined timers
return d=e,e=b,f=e-d,a.tick=f>h&&me.sys.interpolation?f/g:1,l(f),f},a}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * A pool of Object entity <br>
     * This object is used for object pooling - a technique that might speed up your game
     * if used properly. <br>
     * If some of your classes will be instantiated and removed a lot at a time, it is a
     * good idea to add the class to this entity pool. A separate pool for that class
     * will be created, which will reuse objects of the class. That way they won't be instantiated
     * each time you need a new one (slowing your game), but stored into that pool and taking one
     * already instantiated when you need it.<br><br>
     * This object is also used by the engine to instantiate objects defined in the map,
     * which means, that on level loading the engine will try to instantiate every object
     * found in the map, based on the user defined name in each Object Properties<br>
     * <img src="images/object_properties.png"/><br>
     * @namespace me.pool
     * @memberOf me
     */
me.pool=function(){
// hold public stuff in our singleton
var a={},b={};
// return our object
/*
         * PUBLIC STUFF
         */
/**
         * Constructor
         * @ignore
         */
/**
         * register an object to the pool. <br>
         * Pooling must be set to true if more than one such objects will be created. <br>
         * (note) If pooling is enabled, you shouldn't instantiate objects with `new`.
         * See examples in {@link me.pool#pull}
         * @name register
         * @memberOf me.pool
         * @public
         * @function
         * @param {String} className as defined in the Name field of the Object Properties (in Tiled)
         * @param {Object} class corresponding Class to be instantiated
         * @param {Boolean} [objectPooling=false] enables object pooling for the specified class
         * - speeds up the game by reusing existing objects
         * @example
         * // add our users defined entities in the entity pool
         * me.pool.register("playerspawnpoint", PlayerEntity);
         * me.pool.register("cherryentity", CherryEntity, true);
         * me.pool.register("heartentity", HeartEntity, true);
         * me.pool.register("starentity", StarEntity, true);
         */
/**
         * Pull a new instance of the requested object (if added into the object pool)
         * @name pull
         * @memberOf me.pool
         * @public
         * @function
         * @param {String} className as used in {@link me.pool.register}
         * @param {} [arguments...] arguments to be passed when instantiating/reinitializing the object
         * @return {Object} the instance of the requested object
         * @example
         * me.pool.register("player", PlayerEntity);
         * var player = me.pool.pull("player");
         * @example
         * me.pool.register("bullet", BulletEntity, true);
         * me.pool.register("enemy", EnemyEntity, true);
         * // ...
         * // when we need to manually create a new bullet:
         * var bullet = me.pool.pull("bullet", x, y, direction);
         * // ...
         * // params aren't a fixed number
         * // when we need new enemy we can add more params, that the object construct requires:
         * var enemy = me.pool.pull("enemy", x, y, direction, speed, power, life);
         * // ...
         * // when we want to destroy existing object, the remove
         * // function will ensure the object can then be reallocated later
         * me.game.world.removeChild(enemy);
         * me.game.world.removeChild(bullet);
         */
/**
         * purge the entity pool from any inactive object <br>
         * Object pooling must be enabled for this function to work<br>
         * note: this will trigger the garbage collector
         * @name purge
         * @memberOf me.pool
         * @public
         * @function
         */
/**
         * Push back an object instance into the entity pool <br>
         * Object pooling for the object class must be enabled,
         * and object must have been instantiated using {@link me.pool#pull},
         * otherwise this function won't work
         * @name push
         * @memberOf me.pool
         * @public
         * @function
         * @param {Object} instance to be recycled
         */
/**
         * Check if an object with the provided name is registered
         * @name exists
         * @memberOf me.pool
         * @public
         * @function
         * @param {String} name of the registered object
         * @return {Boolean} true if the classname is registered
         */
return a.init=function(){
// add default entity object
a.register("me.Entity",me.Entity),a.register("me.CollectableEntity",me.CollectableEntity),a.register("me.LevelEntity",me.LevelEntity),a.register("me.Tween",me.Tween,!0),a.register("me.Color",me.Color,!0),a.register("me.Particle",me.Particle,!0),a.register("me.Sprite",me.Sprite),a.register("me.Vector2d",me.Vector2d,!0)},a.register=function(a,c,d){b[a]={"class":c,pool:d?[]:void 0}},a.pull=function(a){for(var c=new Array(arguments.length),d=0;d<arguments.length;d++)c[d]=arguments[d];var e=b[a];if(e){var f,g=e["class"],h=e.pool;
// call the object onResetEvent function if defined
return h&&(f=h.pop())?(c.shift(),"function"==typeof f.onResetEvent?f.onResetEvent.apply(f,c):f.init.apply(f,c)):(c[0]=g,f=new(g.bind.apply(g,c)),h&&(f.className=a)),f}throw new me.Error("Cannot instantiate entity of type '"+a+"'")},a.purge=function(){for(var a in b)b[a]&&(b[a].pool=[])},a.push=function(a){var c=a.className;"undefined"!=typeof c&&b[c]&&
// store back the object instance for later recycling
b[c].pool.push(a)},a.exists=function(a){return a in b},a}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a generic 2D Vector Object
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {Number} [x=0] x value of the vector
     * @param {Number} [y=0] y value of the vector
     */
me.Vector2d=Object.extend(/** @scope me.Vector2d.prototype */
{/** @ignore */
init:function(a,b){return this.set(a||0,b||0)},/** 
         * @ignore */
_set:function(a,b){return this.x=a,this.y=b,this},/**
         * set the Vector x and y properties to the given values<br>
         * @name set
         * @memberOf me.Vector2d
         * @function
         * @param {Number} x
         * @param {Number} y
         * @return {me.Vector2d} Reference to this object for method chaining
         */
set:function(a,b){if(a!==+a||b!==+b)throw new me.Vector2d.Error("invalid x,y parameters (not a number)");/**
             * x value of the vector
             * @public
             * @type Number
             * @name x
             * @memberOf me.Vector2d
             */
//this.x = x;
/**
             * y value of the vector
             * @public
             * @type Number
             * @name y
             * @memberOf me.Vector2d
             */
//this.y = y;
return this._set(a,b)},/**
         * set the Vector x and y properties to 0
         * @name setZero
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
setZero:function(){return this.set(0,0)},/**
         * set the Vector x and y properties using the passed vector
         * @name setV
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {me.Vector2d} Reference to this object for method chaining
         */
setV:function(a){return this._set(a.x,a.y)},/**
         * Add the passed vector to this vector
         * @name add
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {me.Vector2d} Reference to this object for method chaining
         */
add:function(a){return this._set(this.x+a.x,this.y+a.y)},/**
         * Substract the passed vector to this vector
         * @name sub
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {me.Vector2d} Reference to this object for method chaining
         */
sub:function(a){return this._set(this.x-a.x,this.y-a.y)},/**
         * Multiply this vector values by the given scalar
         * @name scale
         * @memberOf me.Vector2d
         * @function
         * @param {Number} x
         * @param {Number} [y=x]
         * @return {me.Vector2d} Reference to this object for method chaining
         */
scale:function(a,b){return this._set(this.x*a,this.y*("undefined"!=typeof b?b:a))},/**
         * Multiply this vector values by the passed vector
         * @name scaleV
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {me.Vector2d} Reference to this object for method chaining
         */
scaleV:function(a){return this._set(this.x*a.x,this.y*a.y)},/**
         * Divide this vector values by the passed value
         * @name div
         * @memberOf me.Vector2d
         * @function
         * @param {Number} value
         * @return {me.Vector2d} Reference to this object for method chaining
         */
div:function(a){return this._set(this.x/a,this.y/a)},/**
         * Update this vector values to absolute values
         * @name abs
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
abs:function(){return this._set(this.x<0?-this.x:this.x,this.y<0?-this.y:this.y)},/**
         * Clamp the vector value within the specified value range
         * @name clamp
         * @memberOf me.Vector2d
         * @function
         * @param {Number} low
         * @param {Number} high
         * @return {me.Vector2d} new me.Vector2d
         */
clamp:function(a,b){return new me.Vector2d(this.x.clamp(a,b),this.y.clamp(a,b))},/**
         * Clamp this vector value within the specified value range
         * @name clampSelf
         * @memberOf me.Vector2d
         * @function
         * @param {Number} low
         * @param {Number} high
         * @return {me.Vector2d} Reference to this object for method chaining
         */
clampSelf:function(a,b){return this._set(this.x.clamp(a,b),this.y.clamp(a,b))},/**
         * Update this vector with the minimum value between this and the passed vector
         * @name minV
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {me.Vector2d} Reference to this object for method chaining
         */
minV:function(a){return this._set(this.x<a.x?this.x:a.x,this.y<a.y?this.y:a.y)},/**
         * Update this vector with the maximum value between this and the passed vector
         * @name maxV
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {me.Vector2d} Reference to this object for method chaining
         */
maxV:function(a){return this._set(this.x>a.x?this.x:a.x,this.y>a.y?this.y:a.y)},/**
         * Floor the vector values
         * @name floor
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} new me.Vector2d
         */
floor:function(){return new me.Vector2d(~~this.x,~~this.y)},/**
         * Floor this vector values
         * @name floorSelf
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
floorSelf:function(){return this._set(~~this.x,~~this.y)},/**
         * Ceil the vector values
         * @name ceil
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} new me.Vector2d
         */
ceil:function(){return new me.Vector2d(Math.ceil(this.x),Math.ceil(this.y))},/**
         * Ceil this vector values
         * @name ceilSelf
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
ceilSelf:function(){return this._set(Math.ceil(this.x),Math.ceil(this.y))},/**
         * Negate the vector values
         * @name negate
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} new me.Vector2d
         */
negate:function(){return new me.Vector2d(-this.x,-this.y)},/**
         * Negate this vector values
         * @name negateSelf
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
negateSelf:function(){return this._set(-this.x,-this.y)},/**
         * Copy the x,y values of the passed vector to this one
         * @name copy
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {me.Vector2d} Reference to this object for method chaining
         */
copy:function(a){return this._set(a.x,a.y)},/**
         * return true if the two vectors are the same
         * @name equals
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {Boolean}
         */
equals:function(a){return this.x===a.x&&this.y===a.y},/**
         * normalize this vector (scale the vector so that its magnitude is 1)
         * @name normalize
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
normalize:function(){var a=this.length();return a>0?this._set(this.x/a,this.y/a):this},/**
         * change this vector to be perpendicular to what it was before.<br>
         * (Effectively rotates it 90 degrees in a clockwise direction)
         * @name perp
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
perp:function(){return this._set(this.y,-this.x)},/**
         * Rotate this vector (counter-clockwise) by the specified angle (in radians).
         * @name rotate
         * @memberOf me.Vector2d
         * @function
         * @param {number} angle The angle to rotate (in radians)
         * @return {me.Vector2d} Reference to this object for method chaining
         */
rotate:function(a){var b=this.x,c=this.y;return this._set(b*Math.cos(a)-c*Math.sin(a),b*Math.sin(a)+c*Math.cos(a))},/**
         * Reverse this vector.
         * @name reverse
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} Reference to this object for method chaining
         */
reverse:function(){return this._set(-this.x,-this.y)},/**
         * return the dot product of this vector and the passed one
         * @name dotProduct
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {Number} The dot product.
         */
dotProduct:function(a){return this.x*a.x+this.y*a.y},/**
         * return the square length of this vector
         * @name length2
         * @memberOf me.Vector2d
         * @function
         * @return {Number} The length^2 of this vector.
         */
length2:function(){return this.dotProduct(this)},/**
         * return the length (magnitude) of this vector
         * @name length
         * @memberOf me.Vector2d
         * @function
         * @return {Number} the length of this vector
         */
length:function(){return Math.sqrt(this.length2())},/**
         * return the distance between this vector and the passed one
         * @name distance
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {Number}
         */
distance:function(a){return Math.sqrt((this.x-a.x)*(this.x-a.x)+(this.y-a.y)*(this.y-a.y))},/**
         * return the angle between this vector and the passed one
         * @name angle
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v
         * @return {Number} angle in radians
         */
angle:function(a){return Math.atan2(a.y-this.y,a.x-this.x)},/**
         * project this vector on to another vector.
         * @name project
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v The vector to project onto.
         * @return {me.Vector2d} Reference to this object for method chaining
         */
project:function(a){var b=this.dotProduct(a)/a.length2();return this._set(b*a.x,b*a.y)},/**
         * Project this vector onto a vector of unit length.<br>
         * This is slightly more efficient than `project` when dealing with unit vectors.
         * @name projectN
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} v The unit vector to project onto.
         * @return {me.Vector2d} Reference to this object for method chaining
         */
projectN:function(a){var b=this.dotProduct(a);return this._set(b*a.x,b*a.y)},/**
         * Reflect this vector on an arbitrary axis.
         * @name reflect
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} axis The vector representing the axis.
         * @return {me.Vector2d} Reference to this object for method chaining.
         */
reflect:function(a){var b=this.x,c=this.y;return this.project(a).scale(2),this._set(this.x-b,this.y-c)},/**
         * Reflect this vector on an arbitrary axis (represented by a unit vector) <br>
         * This is slightly more efficient than `reflect` when dealing with unit vectors.
         * @name reflectN
         * @memberOf me.Vector2d
         * @function
         * @param {me.Vector2d} axis The vector representing the axis.
         * @return {me.Vector2d} Reference to this object for method chaining.
         */
reflectN:function(a){var b=this.x,c=this.y;return this.projectN(a).scale(2),this._set(this.x-b,this.y-c)},/**
         * return a clone copy of this vector
         * @name clone
         * @memberOf me.Vector2d
         * @function
         * @return {me.Vector2d} new me.Vector2d
         */
clone:function(){return new me.Vector2d(this.x,this.y)},/**
         * convert the object to a string representation
         * @name toString
         * @memberOf me.Vector2d
         * @function
         * @return {String}
         */
toString:function(){return"x:"+this.x+",y:"+this.y}}),/**
     * Base class for Vector2d exception handling.
     * @name Error
     * @class
     * @memberOf me.Vector2d
     * @constructor
     * @param {String} msg Error message.
     */
me.Vector2d.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.Vector2d.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * A Vector2d object that provide notification by executing the given callback when the vector is changed.
     * @class
     * @extends me.Vector2d
     * @constructor
     * @param {Number} [x=0] x value of the vector
     * @param {Number} [y=0] y value of the vector
     * @param {Object} settings additional required parameters
     * @param {Function} settings.onUpdate the callback to be executed when the vector is changed
     */
me.ObservableVector2d=me.Vector2d.extend({/** @scope me.ObservableVector2d.prototype */
/** @ignore */
init:function(a,b,c){if(/**
             * x value of the vector
             * @public
             * @type Number
             * @name x
             * @memberOf me.ObservableVector2d
             */
Object.defineProperty(this,"x",{get:function(){return this._x},set:function(a){this.onUpdate(a,this._y,this._x,this._y),this._x=a}}),/**
             * y value of the vector
             * @public
             * @type Number
             * @name y
             * @memberOf me.ObservableVector2d
             */
Object.defineProperty(this,"y",{get:function(){return this._y},set:function(a){this.onUpdate(this._x,a,this._x,this._y),this._y=a}}),"undefined"==typeof c||"function"!=typeof c.onUpdate)throw new me.ObservableVector2d.Error("undefined `onUpdate` callback");this.onUpdate=c.onUpdate,this._x=a||0,this._y=b||0},/**
         * @ignore */
_set:function(a,b){return this.onUpdate(a,b,this._x,this._y),this._x=a,this._y=b,this},/**
         * Add the passed vector to this vector
         * @name add
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
add:function(a){return this._set(this._x+a.x,this._y+a.y)},/**
         * Substract the passed vector to this vector
         * @name sub
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
sub:function(a){return this._set(this._x-a.x,this._y-a.y)},/**
         * Multiply this vector values by the given scalar
         * @name scale
         * @memberOf me.ObservableVector2d
         * @function
         * @param {Number} x
         * @param {Number} [y=x]
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
scale:function(a,b){return this._set(this._x*a,this._y*("undefined"!=typeof b?b:a))},/**
         * Multiply this vector values by the passed vector
         * @name scaleV
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
scaleV:function(a){return this._set(this._x*a.x,this._y*a.y)},/**
         * Divide this vector values by the passed value
         * @name div
         * @memberOf me.ObservableVector2d
         * @function
         * @param {Number} value
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
div:function(a){return this._set(this._x/a,this._y/a)},/**
         * Update this vector values to absolute values
         * @name abs
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
abs:function(){return this._set(this._x<0?-this._x:this._x,this._y<0?-this._y:this._y)},/**
         * Clamp the vector value within the specified value range
         * @name clamp
         * @memberOf me.ObservableVector2d
         * @function
         * @param {Number} low
         * @param {Number} high
         * @return {me.ObservableVector2d} new me.ObservableVector2d
         */
clamp:function(a,b){return new me.ObservableVector2d(this.x.clamp(a,b),this.y.clamp(a,b),{onUpdate:this.onUpdate})},/**
         * Clamp this vector value within the specified value range
         * @name clampSelf
         * @memberOf me.ObservableVector2d
         * @function
         * @param {Number} low
         * @param {Number} high
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
clampSelf:function(a,b){return this._set(this._x.clamp(a,b),this._y.clamp(a,b))},/**
         * Update this vector with the minimum value between this and the passed vector
         * @name minV
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
minV:function(a){return this._set(this._x<a.x?this._x:a.x,this._y<a.y?this._y:a.y)},/**
         * Update this vector with the maximum value between this and the passed vector
         * @name maxV
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
maxV:function(a){return this._set(this._x>a.x?this._x:a.x,this._y>a.y?this._y:a.y)},/**
         * Floor the vector values
         * @name floor
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} new me.ObservableVector2d
         */
floor:function(){return new me.ObservableVector2d(~~this._x,~~this._y,{onUpdate:this.onUpdate})},/**
         * Floor this vector values
         * @name floorSelf
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
floorSelf:function(){return this._set(~~this._x,~~this._y)},/**
         * Ceil the vector values
         * @name ceil
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} new me.ObservableVector2d
         */
ceil:function(){return new me.ObservableVector2d(Math.ceil(this._x),Math.ceil(this._y),{onUpdate:this.onUpdate})},/**
         * Ceil this vector values
         * @name ceilSelf
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
ceilSelf:function(){return this._set(Math.ceil(this._x),Math.ceil(this._y))},/**
         * Negate the vector values
         * @name negate
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} new me.ObservableVector2d
         */
negate:function(){return new me.ObservableVector2d(-this._x,-this._y,{onUpdate:this.onUpdate})},/**
         * Negate this vector values
         * @name negateSelf
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
negateSelf:function(){return this._set(-this._x,-this._y)},/**
         * Copy the x,y values of the passed vector to this one
         * @name copy
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
copy:function(a){return this._set(a.x,a.y)},/**
         * return true if the two vectors are the same
         * @name equals
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {Boolean}
         */
equals:function(a){return this._x===a.x&&this._y===a.y},/**
         * normalize this vector (scale the vector so that its magnitude is 1)
         * @name normalize
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
normalize:function(){var a=this.length();return a>0?this._set(this._x/a,this._y/a):this},/**
         * change this vector to be perpendicular to what it was before.<br>
         * (Effectively rotates it 90 degrees in a clockwise direction)
         * @name perp
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
perp:function(){return this._set(this._y,-this._x)},/**
         * Rotate this vector (counter-clockwise) by the specified angle (in radians).
         * @name rotate
         * @memberOf me.ObservableVector2d
         * @function
         * @param {number} angle The angle to rotate (in radians)
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
rotate:function(a){var b=this._x,c=this._y;return this._set(b*Math.cos(a)-c*Math.sin(a),b*Math.sin(a)+c*Math.cos(a))},/**
         * Reverse this vector.
         * @name reverse
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} Reference to this object for method chaining
         */
reverse:function(){return this._set(-this._x,-this._y)},/**
         * return the dot product of this vector and the passed one
         * @name dotProduct
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {Number} The dot product.
         */
dotProduct:function(a){return this._x*a.x+this._y*a.y},/**
         * return the distance between this vector and the passed one
         * @name distance
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {Number}
         */
distance:function(a){return Math.sqrt((this._x-a.x)*(this._x-a.x)+(this._y-a.y)*(this._y-a.y))},/**
         * return the angle between this vector and the passed one
         * @name angle
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} v
         * @return {Number} angle in radians
         */
angle:function(a){return Math.atan2(a.y-this._y,a.x-this._x)},/**
         * Reflect this vector on an arbitrary axis.
         * @name reflect
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} axis The vector representing the axis.
         * @return {me.ObservableVector2d} Reference to this object for method chaining.
         */
reflect:function(a){var b=this._x,c=this._y;return this.project(a).scale(2),this._set(this._x-b,this._y-c)},/**
         * Reflect this vector on an arbitrary axis (represented by a unit vector) <br>
         * This is slightly more efficient than `reflect` when dealing with unit vectors.
         * @name reflectN
         * @memberOf me.ObservableVector2d
         * @function
         * @param {me.ObservableVector2d} axis The vector representing the axis.
         * @return {me.ObservableVector2d} Reference to this object for method chaining.
         */
reflectN:function(a){var b=this._x,c=this._y;return this.projectN(a).scale(2),this._set(this._x-b,this._y-c)},/**
         * return a clone copy of this vector
         * @name clone
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.ObservableVector2d} new me.ObservableVector2d
         */
clone:function(){
// shall we return a cloned me.ObservableVector2d here ?
return new me.ObservableVector2d(this._x,this._y,{onUpdate:this.onUpdate})},/**
         * return a `me.Vector2d` copy of this `me.ObservableVector2d` object
         * @name toVector2d
         * @memberOf me.ObservableVector2d
         * @function
         * @return {me.Vector2d} new me.Vector2d
         */
toVector2d:function(){return new me.Vector2d(this._x,this._y)},/**
         * convert the object to a string representation
         * @name toString
         * @memberOf me.ObservableVector2d
         * @function
         * @return {String}
         */
toString:function(){return"x:"+this._x+",y:"+this._y}}),/**
     * Base class for Vector2d exception handling.
     * @name Error
     * @class
     * @memberOf me.ObservableVector2d
     * @constructor
     * @param {String} msg Error message.
     */
me.ObservableVector2d.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.ObservableVector2d.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a Matrix2d Object.<br>
     * the identity matrix and parameters position : <br>
     * <img src="images/identity-matrix_2x.png"/>
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {me.Matrix2d} [mat2d] An instance of me.Matrix2d to copy from
     * @param {Number[]} [arguments...] Matrix elements. See {@link me.Matrix2d.set}
     */
me.Matrix2d=Object.extend(/** @scope me.Matrix2d.prototype */
{/** @ignore */
init:function(a,b,c,d,e,f,g,h,i){this.val=new Float32Array(9),a instanceof me.Matrix2d?this.copy(a):9===arguments.length?this.set(a,b,c,d,e,f,g,h,i):this.identity()},/**
         * reset the transformation matrix to the identity matrix (no transformation).<br>
         * the identity matrix and parameters position : <br>
         * <img src="images/identity-matrix_2x.png"/>
         * @name identity
         * @memberOf me.Matrix2d
         * @function
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},/**
         * set the matrix to the specified value
         * @name set
         * @memberOf me.Matrix2d
         * @function
         * @param {Number} aX
         * @param {Number} aY
         * @param {Number} aW
         * @param {Number} bX
         * @param {Number} bY
         * @param {Number} bW
         * @param {Number} cX
         * @param {Number} cY
         * @param {Number} cW
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
set:function(){var a=this.val;return a[0]=arguments[0],a[1]=arguments[1],a[2]=arguments[2],a[3]=arguments[3],a[4]=arguments[4],a[5]=arguments[5],a[6]=arguments[6],a[7]=arguments[7],a[8]=arguments[8],this},/**
         * Copies over the values from another me.Matrix2d.
         * @name copy
         * @memberOf me.Matrix2d
         * @function
         * @param {me.Matrix2d} b the matrix object to copy from
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
copy:function(a){return this.val.set(a.val),this},/**
         * multiply both matrix
         * @name multiply
         * @memberOf me.Matrix2d
         * @function
         * @param {me.Matrix2d} b Other matrix
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
multiply:function(a){a=a.val;var b=this.val,c=b[0],d=b[1],e=b[3],f=b[4],g=a[0],h=a[1],i=a[3],j=a[4],k=a[6],l=a[7];return b[0]=c*g+e*h,b[1]=d*g+f*h,b[3]=c*i+e*j,b[4]=d*i+f*j,b[6]+=c*k+e*l,b[7]+=d*k+f*l,this},/**
         * Multiply this matrix into a vector
         * @ignore
         */
vectorMultiply:function(a){var b=this.val,c=a.x,d=a.y;return a.x=c*b[0]+d*b[3]+b[6],a.y=c*b[1]+d*b[4]+b[7],a},/**
         * scale the matrix
         * @name scale
         * @memberOf me.Matrix2d
         * @function
         * @param {Number} x a number representing the abscissa of the scaling vector.
         * @param {Number} y a number representing the ordinate of the scaling vector.
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
scale:function(a,b){var c=this.val;return c[0]*=a,c[1]*=a,c[3]*=b,c[4]*=b,this},/**
         * rotate the matrix (counter-clockwise) by the specified angle (in radians).
         * @name rotate
         * @memberOf me.Matrix2d
         * @function
         * @param {Number} angle Rotation angle in radians.
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
rotate:function(a){if(0!==a){var b=this.val,c=b[0],d=b[1],e=b[3],f=b[4],g=Math.sin(a),h=Math.cos(a);b[0]=c*h+e*g,b[1]=d*h+f*g,b[3]=c*-g+e*h,b[4]=d*-g+f*h}return this},/**
         * translate the matrix
         * @name translate
         * @memberOf me.Matrix2d
         * @function
         * @param {Number} x the x coordindates to translate the matrix by
         * @param {Number} y the y coordindates to translate the matrix by
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
translate:function(a,b){var c=this.val;return c[6]+=a*c[0]+b*c[3],c[7]+=a*c[1]+b*c[4],this},/**
         * translate the matrix by a vector
         * @name translateV
         * @memberOf me.Matrix2d
         * @function
         * @param {me.Vector2d} v the vector to translate the matrix by
         * @return {me.Matrix2d} Reference to this object for method chaining
         */
translateV:function(a){return this.translate(a.x,a.y)},/**
         * returns true if the matrix is an identity matrix.
         * @name isIdentity
         * @memberOf me.Matrix2d
         * @function
         * @return {Boolean}
         **/
isIdentity:function(){var a=this.val;return 1===a[0]&&0===a[1]&&0===a[2]&&0===a[3]&&1===a[4]&&0===a[5]&&0===a[6]&&0===a[7]&&1===a[8]},/**
         * Clone the Matrix
         * @name clone
         * @memberOf me.Matrix2d
         * @function
         * @return {me.Matrix2d}
         */
clone:function(){return new me.Matrix2d(this)},/**
         * convert the object to a string representation
         * @name toString
         * @memberOf me.Matrix2d
         * @function
         * @return {String}
         */
toString:function(){var a=this.val;return"me.Matrix2d("+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+")"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a rectangle Object
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {Number} x position of the Rectangle
     * @param {Number} y position of the Rectangle
     * @param {Number} w width of the rectangle
     * @param {Number} h height of the rectangle
     */
me.Rect=Object.extend(/** @scope me.Rect.prototype */
{/** @ignore */
init:function(a,b,c,d){/**
             * position of the Rectangle
             * @public
             * @type {me.Vector2d}
             * @name pos
             * @memberOf me.Rect
             */
this.pos=new me.Vector2d(a,b),
// private properties for w & h
this._width=c,this._height=d,
// the shape type
this.shapeType="Rectangle"},/**
         * set new value to the rectangle shape
         * @name setShape
         * @memberOf me.Rect
         * @function
         * @param {Number} x position of the Rectangle
         * @param {Number} y position of the Rectangle
         * @param {Number} w width of the rectangle
         * @param {Number} h height of the rectangle
         * @return {me.Rect} this rectangle
         */
setShape:function(a,b,c,d){
// set the new position vector
// resize
return this.pos.set(a,b),this.resize(c,d),this},/**
         * resize the rectangle
         * @name resize
         * @memberOf me.Rect
         * @function
         * @param {Number} w new width of the rectangle
         * @param {Number} h new height of the rectangle
         * @return {me.Rect} this rectangle
         */
resize:function(a,b){return this.width=a,this.height=b,this},/**
         * returns the bounding box for this shape, the smallest rectangle object completely containing this shape.
         * @name getBounds
         * @memberOf me.Rect
         * @function
         * @return {me.Rect} this shape bounding box Rectangle object
         */
getBounds:function(){return this},/**
         * update the bounding box for this shape.
         * @name updateBounds
         * @memberOf me.Rect
         * @function
         * @return {me.Rect} this shape bounding box Rectangle object
         */
updateBounds:function(){return this},/**
         * clone this rectangle
         * @name clone
         * @memberOf me.Rect
         * @function
         * @return {me.Rect} new rectangle
         */
clone:function(){return new me.Rect(this.pos.x,this.pos.y,this._width,this._height)},/**
         * copy the position and size of the given rectangle into this one
         * @name copy
         * @memberOf me.Rect
         * @function
         * @param {me.Rect} rect Source rectangle
         * @return {me.Rect} new rectangle
         */
copy:function(a){return this.setShape(a.pos.x,a.pos.y,a._width,a._height)},/**
         * translate the rect by the specified offset
         * @name translate
         * @memberOf me.Rect
         * @function
         * @param {Number} x x offset
         * @param {Number} y y offset
         * @return {me.Rect} this rectangle
         */
translate:function(a,b){return this.pos.x+=a,this.pos.y+=b,this},/**
         * translate the rect by the specified vector
         * @name translateV
         * @memberOf me.Rect
         * @function
         * @param {me.Vector2d} v vector offset
         * @return {me.Rect} this rectangle
         */
translateV:function(a){return this.translate(a.x,a.y)},/**
         * merge this rectangle with another one
         * @name union
         * @memberOf me.Rect
         * @function
         * @param {me.Rect} rect other rectangle to union with
         * @return {me.Rect} the union(ed) rectangle
         */
union:function(/** {me.Rect} */a){var b=Math.min(this.left,a.left),c=Math.min(this.top,a.top);return this.resize(Math.max(this.right,a.right)-b,Math.max(this.bottom,a.bottom)-c),this.pos.set(b,c),this},/**
         * check if this rectangle is intersecting with the specified one
         * @name overlaps
         * @memberOf me.Rect
         * @function
         * @param  {me.Rect} rect
         * @return {boolean} true if overlaps
         */
overlaps:function(a){return this.left<a.right&&a.left<this.right&&this.top<a.bottom&&a.top<this.bottom},/**
         * check if this rectangle contains the specified one
         * @name contains
         * @memberOf me.Rect
         * @function
         * @param  {me.Rect} rect
         * @return {boolean} true if contains
         */
contains:function(a){return a.left>=this.left&&a.right<=this.right&&a.top>=this.top&&a.bottom<=this.bottom},/**
         * check if this rectangle contains the specified point
         * @name containsPointV
         * @memberOf me.Rect
         * @function
         * @param  {me.Vector2d} point
         * @return {boolean} true if contains
         */
containsPointV:function(a){return this.containsPoint(a.x,a.y)},/**
         * check if this rectangle contains the specified point
         * @name containsPoint
         * @memberOf me.Rect
         * @function
         * @param  {Number} x x coordinate
         * @param  {Number} y y coordinate
         * @return {boolean} true if contains
         */
containsPoint:function(a,b){return a>=this.left&&a<=this.right&&b>=this.top&&b<=this.bottom},/**
         * Returns a polygon whose edges are the same as this box.
         * @name toPolygon
         * @memberOf me.Rect
         * @function
         * @return {me.Polygon} a new Polygon that represents this rectangle.
         */
toPolygon:function(){var a=this.pos,b=this._width,c=this._height;return new me.Polygon(a.x,a.y,[new me.Vector2d,new me.Vector2d(b,0),new me.Vector2d(b,c),new me.Vector2d(0,c)])}}),
// redefine some properties to ease our life when getting the rectangle coordinates
/**
     * left coordinate of the Rectangle
     * @public
     * @type {Number}
     * @name left
     * @memberOf me.Rect
     */
Object.defineProperty(me.Rect.prototype,"left",{get:function(){return this.pos.x},configurable:!0}),/**
     * right coordinate of the Rectangle
     * @public
     * @type {Number}
     * @name right
     * @memberOf me.Rect
     */
Object.defineProperty(me.Rect.prototype,"right",{get:function(){return this.pos.x+this._width||this._width},configurable:!0}),/**
     * top coordinate of the Rectangle
     * @public
     * @type {Number}
     * @name top
     * @memberOf me.Rect
     */
Object.defineProperty(me.Rect.prototype,"top",{get:function(){return this.pos.y},configurable:!0}),/**
     * bottom coordinate of the Rectangle
     * @public
     * @type {Number}
     * @name bottom
     * @memberOf me.Rect
     */
Object.defineProperty(me.Rect.prototype,"bottom",{get:function(){return this.pos.y+this._height||this._height},configurable:!0}),/**
     * width of the Rectangle
     * @public
     * @type {Number}
     * @name width
     * @memberOf me.Rect
     */
Object.defineProperty(me.Rect.prototype,"width",{get:function(){return this._width},set:function(a){this._width=a},configurable:!0}),/**
     * height of the Rectangle
     * @public
     * @type {Number}
     * @name height
     * @memberOf me.Rect
     */
Object.defineProperty(me.Rect.prototype,"height",{get:function(){return this._height},set:function(a){this._height=a},configurable:!0})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * an ellipse Object
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {Number} x the center x coordinate of the ellipse
     * @param {Number} y the center y coordinate of the ellipse
     * @param {Number} w width (diameter) of the ellipse
     * @param {Number} h height (diameter) of the ellipse
     */
me.Ellipse=Object.extend({/** @scope me.Ellipse.prototype */
/** @ignore */
init:function(a,b,c,d){/**
             * the center coordinates of the ellipse
             * @public
             * @type {me.Vector2d}
             * @name pos
             * @memberOf me.Ellipse
             */
this.pos=new me.Vector2d,/**
             * The bounding rectangle for this shape
             * @private
             * @type {me.Rect}
             * @name _bounds
             * @memberOf me.Ellipse
             */
this._bounds=void 0,/**
             * Maximum radius of the ellipse
             * @public
             * @type {Number}
             * @name radius
             * @memberOf me.Ellipse
             */
this.radius=NaN,/**
             * Pre-scaled radius vector for ellipse
             * @public
             * @type {me.Vector2d}
             * @name radiusV
             * @memberOf me.Ellipse
             */
this.radiusV=new me.Vector2d,/**
             * Radius squared, for pythagorean theorom
             * @public
             * @type {me.Vector2d}
             * @name radiusSq
             * @memberOf me.Ellipse
             */
this.radiusSq=new me.Vector2d,/**
             * x/y scaling ratio for ellipse
             * @public
             * @type {me.Vector2d}
             * @name ratio
             * @memberOf me.Ellipse
             */
this.ratio=new me.Vector2d,
// the shape type
this.shapeType="Ellipse",this.setShape(a,b,c,d)},/**
         * set new value to the Ellipse shape
         * @name setShape
         * @memberOf me.Ellipse
         * @function
         * @param {Number} x position of the ellipse
         * @param {Number} y position of the ellipse
         * @param {Number} w width (diameter) of the ellipse
         * @param {Number} h height (diameter) of the ellipse
         */
setShape:function(a,b,c,d){var e=c/2,f=d/2;this.pos.set(a,b),this.radius=Math.max(e,f),this.ratio.set(e/this.radius,f/this.radius),this.radiusV.set(this.radius,this.radius).scaleV(this.ratio);var g=this.radius*this.radius;return this.radiusSq.set(g,g).scaleV(this.ratio),this.updateBounds(),this},/**
         * Rotate this Ellipse (counter-clockwise) by the specified angle (in radians).
         * @name rotate
         * @memberOf me.Ellipse
         * @function
         * @param {Number} angle The angle to rotate (in radians)
         * @return {me.Ellipse} Reference to this object for method chaining
         */
rotate:function(){
// TODO
return this},/**
         * Scale this Ellipse by the specified scalar.
         * @name scale
         * @memberOf me.Ellipse
         * @function
         * @param {Number} x
         * @param {Number} [y=x]
         * @return {me.Ellipse} Reference to this object for method chaining
         */
scale:function(a,b){return b="undefined"!=typeof b?b:a,this.setShape(this.pos.x,this.pos.y,2*this.radiusV.x*a,2*this.radiusV.y*b)},/**
         * Scale this Ellipse by the specified vector.
         * @name scale
         * @memberOf me.Ellipse
         * @function
         * @param {me.Vector2d} v
         * @return {me.Ellipse} Reference to this object for method chaining
         */
scaleV:function(a){return this.scale(a.x,a.y)},/**
         * translate the circle/ellipse by the specified offset
         * @name translate
         * @memberOf me.Ellipse
         * @function
         * @param {Number} x x offset
         * @param {Number} y y offset
         * @return {me.Ellipse} this ellipse
         */
translate:function(a,b){return this.pos.x+=a,this.pos.y+=b,this._bounds.translate(a,b),this},/**
         * translate the circle/ellipse by the specified vector
         * @name translateV
         * @memberOf me.Ellipse
         * @function
         * @param {me.Vector2d} v vector offset
         * @return {me.Rect} this ellipse
         */
translateV:function(a){return this.pos.add(a),this._bounds.translateV(a),this},/**
         * check if this circle/ellipse contains the specified point
         * @name containsPointV
         * @memberOf me.Ellipse
         * @function
         * @param  {me.Vector2d} point
         * @return {boolean} true if contains
         */
containsPointV:function(a){return this.containsPoint(a.x,a.y)},/**
         * check if this circle/ellipse contains the specified point
         * @name containsPoint
         * @memberOf me.Ellipse
         * @function
         * @param  {Number} x x coordinate
         * @param  {Number} y y coordinate
         * @return {boolean} true if contains
         */
containsPoint:function(a,b){
// Pythagorean theorem.
// Make position relative to object center point.
return a-=this.pos.x,b-=this.pos.y,a*a/this.radiusSq.x+b*b/this.radiusSq.y<=1},/**
         * returns the bounding box for this shape, the smallest Rectangle object completely containing this shape.
         * @name getBounds
         * @memberOf me.Ellipse
         * @function
         * @return {me.Rect} this shape bounding box Rectangle object
         */
getBounds:function(){return this._bounds},/**
         * update the bounding box for this shape.
         * @name updateBounds
         * @memberOf me.Ellipse
         * @function
         * @return {me.Rect} this shape bounding box Rectangle object
         */
updateBounds:function(){var a=this.radiusV.x,b=this.radiusV.y,c=this.pos.x-a,d=this.pos.y-b,e=2*a,f=2*b;return this._bounds?this._bounds.setShape(c,d,e,f):this._bounds=new me.Rect(c,d,e,f),this._bounds},/**
         * clone this Ellipse
         * @name clone
         * @memberOf me.Ellipse
         * @function
         * @return {me.Ellipse} new Ellipse
         */
clone:function(){return new me.Ellipse(this.pos.x,this.pos.y,2*this.radiusV.x,2*this.radiusV.y)}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a polygon Object.<br>
     * Please do note that melonJS implements a simple Axis-Aligned Boxes collision algorithm, which requires all polygons used for collision to be convex with all vertices defined with clockwise winding.
     * A polygon is convex when all line segments connecting two points in the interior do not cross any edge of the polygon
     * (which means that all angles are less than 180 degrees), as described here below : <br>
     * <center><img src="images/convex_polygon.png"/></center><br>
     * A polygon's `winding` is clockwise iff its vertices (points) are declared turning to the right. The image above shows COUNTERCLOCKWISE winding.
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {Number} x origin point of the Polygon
     * @param {Number} y origin point of the Polygon
     * @param {me.Vector2d[]} points array of vector defining the Polygon
     */
me.Polygon=Object.extend(/** @scope me.Polygon.prototype */
{/** @ignore */
init:function(a,b,c){/**
             * origin point of the Polygon
             * @public
             * @type {me.Vector2d}
             * @name pos
             * @memberOf me.Polygon
             */
this.pos=new me.Vector2d,/**
             * The bounding rectangle for this shape
             * @private
             * @type {me.Rect}
             * @name _bounds
             * @memberOf me.Polygon
             */
this._bounds=void 0,/**
             * Array of points defining the Polygon <br>
             * Note: If you manually change `points`, you **must** call `recalc`afterwards so that the changes get applied correctly.
             * @public
             * @type {me.Vector2d[]}
             * @name points
             * @memberOf me.Polygon
             */
this.points=null,
// the shape type
this.shapeType="Polygon",this.setShape(a,b,c)},/**
         * set new value to the Polygon
         * @name setShape
         * @memberOf me.Polygon
         * @function
         * @param {Number} x position of the Polygon
         * @param {Number} y position of the Polygon
         * @param {me.Vector2d[]} points array of vector defining the Polygon
         */
setShape:function(a,b,c){return this.pos.set(a,b),this.points=c,this.recalc(),this.updateBounds(),this},/**
         * Rotate this Polygon (counter-clockwise) by the specified angle (in radians).
         * @name rotate
         * @memberOf me.Polygon
         * @function
         * @param {Number} angle The angle to rotate (in radians)
         * @return {me.Polygon} Reference to this object for method chaining
         */
rotate:function(a){if(0!==a){for(var b=this.points,c=b.length,d=0;c>d;d++)b[d].rotate(a);this.recalc(),this.updateBounds()}return this},/**
         * Scale this Polygon by the given scalar.
         * @name scale
         * @memberOf me.Polygon
         * @function
         * @param {Number} x
         * @param {Number} [y=x]
         * @return {me.Polygon} Reference to this object for method chaining
         */
scale:function(a,b){b="undefined"!=typeof b?b:a;for(var c=this.points,d=c.length,e=0;d>e;e++)c[e].scale(a,b);return this.recalc(),this.updateBounds(),this},/**
         * Scale this Polygon by the given vector
         * @name scaleV
         * @memberOf me.Polygon
         * @function
         * @param {me.Vector2d} v
         * @return {me.Polygon} Reference to this object for method chaining
         */
scaleV:function(a){return this.scale(a.x,a.y)},/**
         * Computes the calculated collision polygon.
         * This **must** be called if the `points` array, `angle`, or `offset` is modified manually.
         * @name recalc
         * @memberOf me.Polygon
         * @function
         */
recalc:function(){var a,b=this.edges=[],c=this.normals=[],d=this.points,e=d.length;if(3>e)throw new me.Polygon.Error("Requires at least 3 points");
// Calculate the edges/normals
for(a=0;e>a;a++){var f=(new me.Vector2d).copy(d[(a+1)%e]).sub(d[a]);b.push(f),c.push((new me.Vector2d).copy(f).perp().normalize())}return this},/**
         * translate the Polygon by the specified offset
         * @name translate
         * @memberOf me.Polygon
         * @function
         * @param {Number} x x offset
         * @param {Number} y y offset
         * @return {me.Polygon} this Polygon
         */
translate:function(a,b){return this.pos.x+=a,this.pos.y+=b,this._bounds.translate(a,b),this},/**
         * translate the Polygon by the specified vector
         * @name translateV
         * @memberOf me.Polygon
         * @function
         * @param {me.Vector2d} v vector offset
         * @return {me.Polygon} this Polygon
         */
translateV:function(a){return this.pos.add(a),this._bounds.translateV(a),this},/**
         * check if this Polygon contains the specified point
         * @name containsPointV
         * @memberOf me.Polygon
         * @function
         * @param  {me.Vector2d} point
         * @return {boolean} true if contains
         */
containsPointV:function(a){return this.containsPoint(a.x,a.y)},/**
         * check if this Polygon contains the specified point <br>
         * (Note: it is highly recommended to first do a hit test on the corresponding <br>
         *  bounding rect, as the function can be highly consuming with complex shapes)
         * @name containsPoint
         * @memberOf me.Polygon
         * @function
         * @param  {Number} x x coordinate
         * @param  {Number} y y coordinate
         * @return {boolean} true if contains
         */
containsPoint:function(a,b){
//http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
for(var c=!1,d=this.pos.x,e=this.pos.y,f=this.points,g=f.length,h=0,i=g-1;g>h;i=h++){var j=f[h].y+e,k=f[h].x+d,l=f[i].y+e,m=f[i].x+d;j>b!=l>b&&(m-k)*(b-j)/(l-j)+k>a&&(c=!c)}return c},/**
         * returns the bounding box for this shape, the smallest Rectangle object completely containing this shape.
         * @name getBounds
         * @memberOf me.Polygon
         * @function
         * @return {me.Rect} this shape bounding box Rectangle object
         */
getBounds:function(){return this._bounds},/**
         * update the bounding box for this shape.
         * @name updateBounds
         * @memberOf me.Polygon
         * @function
         * @return {me.Rect} this shape bounding box Rectangle object
         */
updateBounds:function(){var a=1/0,b=1/0,c=-(1/0),d=-(1/0);return this.points.forEach(function(e){a=Math.min(a,e.x),b=Math.min(b,e.y),c=Math.max(c,e.x),d=Math.max(d,e.y)}),this._bounds?this._bounds.setShape(a,b,c-a,d-b):this._bounds=new me.Rect(a,b,c-a,d-b),this._bounds.translateV(this.pos)},/**
         * clone this Polygon
         * @name clone
         * @memberOf me.Polygon
         * @function
         * @return {me.Polygon} new Polygon
         */
clone:function(){var a=[];return this.points.forEach(function(b){a.push(new me.Vector2d(b.x,b.y))}),new me.Polygon(this.pos.x,this.pos.y,a)}}),/**
     * Base class for Polygon exception handling.
     * @name Error
     * @class
     * @memberOf me.Polygon
     * @constructor
     * @param {String} msg Error message.
     */
me.Polygon.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.Polygon.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a line segment Object.<br>
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {Number} x origin point of the Line
     * @param {Number} y origin point of the Line
     * @param {me.Vector2d[]} points array of vectors defining the Line
     */
me.Line=me.Polygon.extend(/** @scope me.Line.prototype */
{/**
         * check if this line segment contains the specified point
         * @name containsPointV
         * @memberOf me.Line
         * @function
         * @param  {me.Vector2d} point
         * @return {boolean} true if contains
         */
containsPointV:function(a){return this.containsPoint(a.x,a.y)},/**
         * check if this line segment contains the specified point
         * @name containsPoint
         * @memberOf me.Line
         * @function
         * @param  {Number} x x coordinate
         * @param  {Number} y y coordinate
         * @return {boolean} true if contains
         */
containsPoint:function(a,b){a-=this.pos.x,b-=this.pos.y;// Cy
var c=this.points[0],d=this.points[1];// Bx/By
//(Cy - Ay) * (Bx - Ax) = (By - Ay) * (Cx - Ax)
return(b-c.y)*(d.x-c.x)===(d.y-c.y)*(a-c.x)},/**
         * Computes the calculated collision edges and normals.
         * This **must** be called if the `points` array, `angle`, or `offset` is modified manually.
         * @name recalc
         * @memberOf me.Line
         * @function
         */
recalc:function(){
// The edges here are the direction of the `n`th edge of the polygon, relative to
// the `n`th point. If you want to draw a given edge from the edge value, you must
// first translate to the position of the starting point.
var a=this.edges=[],b=this.normals=[],c=this.points;if(2!==c.length)throw new me.Line.Error("Requires exactly 2 points");
// Calculate the edges/normals
var d=(new me.Vector2d).copy(c[1]).sub(c[0]);return a.push(d),b.push((new me.Vector2d).copy(d).perp().normalize()),this},/**
         * clone this line segment
         * @name clone
         * @memberOf me.Line
         * @function
         * @return {me.Line} new Line
         */
clone:function(){var a=[];return this.points.forEach(function(b){a.push(new me.Vector2d(b.x,b.y))}),new me.Line(this.pos.x,this.pos.y,a)}}),/**
     * Base class for Line exception handling.
     * @name Error
     * @class
     * @memberOf me.Line
     * @constructor
     * @param {String} msg Error message.
     */
me.Line.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.Line.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a Generic Body Object <br>
     * @class
     * @extends me.Rect
     * @memberOf me
     * @constructor
     * @param {me.Entity} entity the parent entity
     * @param {me.Polygon[]|me.Line[]|me.Ellipse[]} [shapes] the initial list of shapes
     */
me.Body=me.Rect.extend(/** @scope me.Body.prototype */
{/** @ignore */
init:function(a,b){/**
             * reference to the parent entity
             * @ignore
             */
this.entity=a,/**
             * The collision shapes of the entity <br>
             * @ignore
             * @type {me.Polygon[]|me.Line[]|me.Ellipse[]}
             * @name shapes
             * @memberOf me.Body
             */
this.shapes=[],/**
             * The body collision mask, that defines what should collide with what.<br>
             * (by default will collide with all entities)
             * @ignore
             * @type Number
             * @default me.collision.types.ALL_OBJECT
             * @name collisionMask
             * @see me.collision.types
             * @memberOf me.Body
             */
this.collisionMask=me.collision.types.ALL_OBJECT,/**
             * define the collision type of the body for collision filtering
             * @public
             * @type Number
             * @default me.collision.types.ENEMY_OBJECT
             * @name collisionType
             * @see me.collision.types
             * @memberOf me.Body
             * @example
             * // set the entity body collision type
             * myEntity.body.collisionType = me.collision.types.PLAYER_OBJECT;
             */
this.collisionType=me.collision.types.ENEMY_OBJECT,/**
             * entity current velocity<br>
             * @public
             * @type me.Vector2d
             * @default <0,0>
             * @name vel
             * @memberOf me.Body
             */
"undefined"==typeof this.vel&&(this.vel=new me.Vector2d),this.vel.set(0,0),/**
             * entity current acceleration<br>
             * @public
             * @type me.Vector2d
             * @default <0,0>
             * @name accel
             * @memberOf me.Body
             */
"undefined"==typeof this.accel&&(this.accel=new me.Vector2d),this.accel.set(0,0),/**
             * entity current friction<br>
             * @public
             * @type me.Vector2d
             * @default <0,0>
             * @name friction
             * @memberOf me.Body
             */
"undefined"==typeof this.friction&&(this.friction=new me.Vector2d),this.friction.set(0,0),/**
             * max velocity (to limit entity velocity)<br>
             * @public
             * @type me.Vector2d
             * @default <1000,1000>
             * @name maxVel
             * @memberOf me.Body
             */
"undefined"==typeof this.maxVel&&(this.maxVel=new me.Vector2d),this.maxVel.set(1e3,1e3),/**
             * Default gravity value of the entity<br>
             * to be set to 0 for RPG, shooter, etc...<br>
             * Note: Gravity can also globally be defined through me.sys.gravity
             * @public
             * @see me.sys.gravity
             * @type Number
             * @default 0.98
             * @name gravity
             * @memberOf me.Body
             */
this.gravity="undefined"!=typeof me.sys.gravity?me.sys.gravity:.98,/**
             * falling state of the object<br>
             * true if the object is falling<br>
             * false if the object is standing on something<br>
             * @readonly
             * @public
             * @type Boolean
             * @default false
             * @name falling
             * @memberOf me.Body
             */
this.falling=!1,/**
             * jumping state of the object<br>
             * equal true if the entity is jumping<br>
             * @readonly
             * @public
             * @type Boolean
             * @default false
             * @name jumping
             * @memberOf me.Body
             */
this.jumping=!1,
// call the super constructor
this._super(me.Rect,
// bounds the body by default
// to the parent entity
"init",[0,0,a.width,a.height]);
// parses the given shapes array and add them
for(var c=0;c<b.length;c++)this.addShape(b[c].clone(),!0)},/**
         * add a collision shape to this entity <br>
         * (note: me.Rect objects will be converted to me.Polygon before being added)
         * @name addShape
         * @memberOf me.Body
         * @public
         * @function
         * @param {me.Rect|me.Polygon|me.Line|me.Ellipse} shape a shape object
         * @return {Number} the shape array length
         */
addShape:function(a,b){
// return the length of the shape list
// ensure that rect shape are managed as polygon
// else polygon or circle
// update the body bounds to take in account the added shape
return"Rectangle"===a.shapeType?this.shapes.push(a.toPolygon()):this.shapes.push(a),b!==!0&&this.updateBounds(),this.shapes.length},/**
         * add collision shapes based on the given PhysicsEditor JSON object
         * @name addShapesFromJSON
         * @memberOf me.Body
         * @public
         * @function
         * @param {Object} json a JSON object as exported from the PhysicsEditor tool
         * @param {String} id the shape identifier within the given the json object
         * @see https://www.codeandweb.com/physicseditor
         * @return {Number} the shape array length
         */
addShapesFromJSON:function(a,b){var c=a[b];if("undefined"==typeof c)throw new me.Body.Error("Identifier ("+b+") undefined for the given PhysicsEditor JSON object)");
// go through all shapes and add them to the body
for(var d=0;d<c.length;d++){for(var e=[],f=0;f<c[d].shape.length;f+=2)e.push(new me.Vector2d(c[d].shape[f],c[d].shape[f+1]));this.addShape(new me.Polygon(0,0,e))}
// return the length of the shape list
// update the body bounds to take in account the added shapes
return this.updateBounds(),this.shapes.length},/**
         * return the collision shape at the given index
         * @name getShape
         * @memberOf me.Body
         * @public
         * @function
         * @param {Number} [index=0] the shape object at the specified index
         * @return {me.Polygon|me.Line|me.Ellipse} shape a shape object
         */
getShape:function(a){return this.shapes[a||0]},/**
         * remove the specified shape from the body shape list
         * @name removeShape
         * @memberOf me.Body
         * @public
         * @function
         * @param {me.Polygon|me.Line|me.Ellipse} shape a shape object
         * @return {Number} the shape array length
         */
removeShape:function(a){
// return the length of the shape list
// update the body bounds to take in account the removed shape
return this.shapes.remove(a),this.updateBounds(),this.shapes.length},/**
         * remove the shape at the given index from the body shape list
         * @name removeShapeAt
         * @memberOf me.Body
         * @public
         * @function
         * @param {Number} index the shape object at the specified index
         * @return {Number} the shape array length
         */
removeShapeAt:function(a){return this.removeShape(this.getShape(a))},/**
         * By default all entities are able to collide with all other entities, <br>
         * but it's also possible to specificy 'collision filters' to provide a finer <br>
         * control over which entities can collide with each other.
         * @name setCollisionMask
         * @memberOf me.Body
         * @public
         * @function
         * @see me.collision.types
         * @param {Number} bitmask the collision mask
         * @example
         * // filter collision detection with collision shapes, enemies and collectables
         * myEntity.body.setCollisionMask(me.collision.types.WORLD_SHAPE | me.collision.types.ENEMY_OBJECT | me.collision.types.COLLECTABLE_OBJECT);
         * ...
         * // disable collision detection with all other objects
         * myEntity.body.setCollisionMask(me.collision.types.NO_OBJECT);
         */
setCollisionMask:function(a){this.collisionMask=a},/**
         * the built-in function to solve the collision response
         * @protected
         * @name respondToCollision
         * @memberOf me.Body
         * @function
         * @param {me.collision.ResponseObject} response the collision response object
         */
respondToCollision:function(a){
// the overlap vector
var b=a.overlapV;
// FIXME: Respond proportionally to object mass
// Move out of the other object shape
this.entity.pos.sub(b),
// adjust velocity
0!==b.x&&(this.vel.x=~~(.5+this.vel.x-b.x)||0),0!==b.y&&(this.vel.y=~~(.5+this.vel.y-b.y)||0,this.falling=b.y>=1,this.jumping=b.y<=-1)},/**
         * update the body bounding rect (private)
         * the body rect size is here used to cache the total bounding rect
         * @private
         * @name updateBounds
         * @memberOf me.Body
         * @function
         */
updateBounds:function(){if(this.shapes.length>0){
// reset the rect with default values
var a=this.shapes[0].getBounds();this.pos.setV(a.pos),this.resize(a.width,a.height);for(var b=1;b<this.shapes.length;b++)this.union(this.shapes[b].getBounds())}
// update the parent entity bounds
return this.entity.onBodyUpdate(this.pos,this.width,this.height),this},/**
         * set the entity default velocity<br>
         * note : velocity is by default limited to the same value, see
         * setMaxVelocity if needed<br>
         * @name setVelocity
         * @memberOf me.Body
         * @function
         * @param {Number} x velocity on x axis
         * @param {Number} y velocity on y axis
         * @protected
         */
setVelocity:function(a,b){this.accel.x=0!==a?a:this.accel.x,this.accel.y=0!==b?b:this.accel.y,
// limit by default to the same max value
this.setMaxVelocity(a,b)},/**
         * cap the entity velocity to the specified value<br>
         * @name setMaxVelocity
         * @memberOf me.Body
         * @function
         * @param {Number} x max velocity on x axis
         * @param {Number} y max velocity on y axis
         * @protected
         */
setMaxVelocity:function(a,b){this.maxVel.x=a,this.maxVel.y=b},/**
         * set the entity default friction<br>
         * @name setFriction
         * @memberOf me.Body
         * @function
         * @param {Number} x horizontal friction
         * @param {Number} y vertical friction
         * @protected
         */
setFriction:function(a,b){this.friction.x=a||0,this.friction.y=b||0},/**
         * compute the new velocity value
         * @ignore
         */
computeVelocity:function(a){
// apply gravity (if any)
this.gravity&&(
// apply a constant gravity (if not on a ladder)
a.y+=this.gravity*me.timer.tick,
// check if falling / jumping
this.falling=a.y>0,this.jumping=this.falling?!1:this.jumping),
// apply friction
this.friction.x&&(a.x=me.utils.applyFriction(a.x,this.friction.x)),this.friction.y&&(a.y=me.utils.applyFriction(a.y,this.friction.y)),
// cap velocity
0!==a.y&&(a.y=a.y.clamp(-this.maxVel.y,this.maxVel.y)),0!==a.x&&(a.x=a.x.clamp(-this.maxVel.x,this.maxVel.x))},/**
         * update the body position
         * @name update
         * @memberOf me.Body
         * @function
         * @return {boolean} true if resulting velocity is different than 0
         */
update:function(){
// returns true if vel is different from 0
// update the velocity
// update player entity position
return this.computeVelocity(this.vel),this.entity.pos.add(this.vel),0!==this.vel.x||0!==this.vel.y},/**
         * Destroy function<br>
         * @ignore
         */
destroy:function(){this.entity=null,this.shapes=[]}}),/**
     * Base class for Body exception handling.
     * @name Error
     * @class
     * @memberOf me.Body
     * @constructor
     * @param {String} msg Error message.
     */
me.Body.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.Body.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * A QuadTree implementation in JavaScript, a 2d spatial subdivision algorithm.
 * Based on the QuadTree Library by Timo Hausmann and released under the MIT license
 * https://github.com/timohausmann/quadtree-js/
**/
function(){/**
     * Quadtree Constructor <br>
     * note: the global quadtree instance is available through `me.collision.quadTree`
     * @class
     * @name QuadTree
     * @extends Object
     * @memberOf me
     * @constructor
     * @see me.collision.quadTree
     * @param {me.Rect} bounds bounds of the node
     * @param {Number} [max_objects=4] max objects a node can hold before splitting into 4 subnodes
     * @param {Number} [max_levels=4] total max levels inside root Quadtree
     * @param {Number} [level] deepth level, required for subnodes
     */
function a(a,b,c,d){this.max_objects=b||4,this.max_levels=c||4,this.level=d||0,this.bounds=a,this.objects=[],this.nodes=[]}/**
     * a pool of `QuadTree` objects
     */
var b=[],c=function(a,c,d,e){if(b.length>0){var f=b.pop();return f.bounds=a,f.max_objects=c||4,f.max_levels=d||4,f.level=e||0,f}return new me.QuadTree(a,c,d,e)},d=function(a){b.push(a)};/*
     * Split the node into 4 subnodes
     */
a.prototype.split=function(){var a=this.level+1,b=~~(.5+this.bounds.width/2),d=~~(.5+this.bounds.height/2),e=~~(.5+this.bounds.pos.x),f=~~(.5+this.bounds.pos.y);
//top right node
this.nodes[0]=c({pos:{x:e+b,y:f},width:b,height:d},this.max_objects,this.max_levels,a),
//top left node
this.nodes[1]=c({pos:{x:e,y:f},width:b,height:d},this.max_objects,this.max_levels,a),
//bottom left node
this.nodes[2]=c({pos:{x:e,y:f+d},width:b,height:d},this.max_objects,this.max_levels,a),
//bottom right node
this.nodes[3]=c({pos:{x:e+b,y:f+d},width:b,height:d},this.max_objects,this.max_levels,a)},/*
     * Determine which node the object belongs to
     * @param {me.Rect} rect bounds of the area to be checked
     * @return Integer index of the subnode (0-3), or -1 if rect cannot completely fit within a subnode and is part of the parent node
     */
a.prototype.getIndex=function(a){var b=-1,c=this.bounds.pos.x+this.bounds.width/2,d=this.bounds.pos.y+this.bounds.height/2,
//rect can completely fit within the top quadrants
e=a.pos.y<d&&a.pos.y+a.height<d,
//rect can completely fit within the bottom quadrants
f=a.pos.y>d;
//rect can completely fit within the left quadrants
//rect can completely fit within the right quadrants
return a.pos.x<c&&a.pos.x+a.width<c?e?b=1:f&&(b=2):a.pos.x>c&&(e?b=0:f&&(b=3)),b},/**
     * Insert the given object container into the node.
     * @name insertContainer
     * @memberOf me.QuadTree
     * @function
     * @param {me.Container} container group of objects to be added
     */
a.prototype.insertContainer=function(a){for(var b,c=a.children.length;c--,b=a.children[c];)b instanceof me.Container?
// recursivly insert childs
this.insertContainer(b):
// only insert object with a "physic body"
"undefined"!=typeof b.body&&this.insert(b)},/**
     * Insert the given object into the node. If the node
     * exceeds the capacity, it will split and add all
     * objects to their corresponding subnodes.
     * @name insert
     * @memberOf me.QuadTree
     * @function
     * @param {Object} item object to be added
     */
a.prototype.insert=function(a){var b=-1;
//if we have subnodes ...
if(this.nodes.length>0&&(b=this.getIndex(a.getBounds()),-1!==b))return void this.nodes[b].insert(a);if(this.objects.push(a),this.objects.length>this.max_objects&&this.level<this.max_levels){
//split if we don't already have subnodes
0===this.nodes.length&&this.split();
//add all objects to there corresponding subnodes
for(var c=0;c<this.objects.length;)b=this.getIndex(this.objects[c].getBounds()),-1!==b?this.nodes[b].insert(this.objects.splice(c,1)[0]):c+=1}},/**
     * Return all objects that could collide with the given object
     * @name retrieve
     * @memberOf me.QuadTree
     * @function
     * @param {Object} object object to be checked against
     * @return {Object[]} array with all detected objects
     */
a.prototype.retrieve=function(a){var b=this.objects;
//if we have subnodes ...
if(this.nodes.length>0){var c=this.getIndex(a.getBounds());
//if rect fits into a subnode ..
if(-1!==c)b=b.concat(this.nodes[c].retrieve(a));else
//if rect does not fit into a subnode, check it against all subnodes
for(var d=0;d<this.nodes.length;d+=1)b=b.concat(this.nodes[d].retrieve(a))}return b},/**
     * clear the quadtree
     * @name clear
     * @memberOf me.QuadTree
     * @function
     */
a.prototype.clear=function(a){this.objects=[];for(var b=0;b<this.nodes.length;b+=1)this.nodes[b].clear(a),
// recycle the quadTree object
d(this.nodes[b]);
// empty the array
this.nodes=[],
// resize the root bounds if required
"undefined"!=typeof a&&(this.bounds.pos.x=a.pos.x,this.bounds.pos.y=a.pos.y,this.bounds.width=a.width,this.bounds.height=a.height)},
//make Quadtree available in the me namespace
me.QuadTree=a}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Separating Axis Theorem implementation, based on the SAT.js library by Jim Riecken <jimr@jimr.ca>
 * Available under the MIT License - https://github.com/jriecken/sat-js
 */
function(){/**
     * Flattens the specified array of points onto a unit vector axis,
     * resulting in a one dimensional range of the minimum and
     * maximum value on that axis.
     * @param {Array.<Vector>} points The points to flatten.
     * @param {Vector} normal The unit vector axis to flatten on.
     * @param {Array.<number>} result An array.  After calling this function,
     *   result[0] will be the minimum value,
     *   result[1] will be the maximum value.
     */
function a(a,b,c){for(var d=Number.MAX_VALUE,e=-Number.MAX_VALUE,f=a.length,g=0;f>g;g++){
// The magnitude of the projection of the point onto the normal
var h=a[g].dotProduct(b);d>h&&(d=h),h>e&&(e=h)}c[0]=d,c[1]=e}/**
     * Check whether two convex polygons are separated by the specified
     * axis (must be a unit vector).
     * @param {Vector} aPos The position of the first polygon.
     * @param {Vector} bPos The position of the second polygon.
     * @param {Array.<Vector>} aPoints The points in the first polygon.
     * @param {Array.<Vector>} bPoints The points in the second polygon.
     * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons
     *   will be projected onto this axis.
     * @param {Response=} response A Response object (optional) which will be populated
     *   if the axis is not a separating axis.
     * @return {boolean} true if it is a separating axis, false otherwise.  If false,
     *   and a response is passed in, information about how much overlap and
     *   the direction of the overlap will be populated.
     */
function b(b,c,d,e,f,h){var j=i.pop(),k=i.pop(),l=g.pop().copy(c).sub(b),m=l.dotProduct(f);
// Check if there is a gap. If there is, this is a separating axis and we can stop
if(
// Project the polygons onto the axis.
a(d,f,j),a(e,f,k),
// Move B's range to its position relative to A.
k[0]+=m,k[1]+=m,j[0]>k[1]||k[0]>j[1])return g.push(l),i.push(j),i.push(k),!0;
// This is not a separating axis. If we're calculating a response, calculate the overlap.
if(h){var n=0;
// A starts further left than B
if(j[0]<k[0])
// A ends before B does. We have to pull A out of B
if(h.aInB=!1,j[1]<k[1])n=j[1]-k[0],h.bInA=!1;else{var o=j[1]-k[0],p=k[1]-j[0];n=p>o?o:-p}else
// B ends before A ends. We have to push A out of B
if(h.bInA=!1,j[1]>k[1])n=j[0]-k[1],h.aInB=!1;else{var q=j[1]-k[0],r=k[1]-j[0];n=r>q?q:-r}
// If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.
var s=Math.abs(n);s<h.overlap&&(h.overlap=s,h.overlapN.copy(f),0>n&&h.overlapN.reverse())}return g.push(l),i.push(j),i.push(k),!1}/**
     * Calculates which Vornoi region a point is on a line segment. <br>
     * It is assumed that both the line and the point are relative to `(0,0)`<br>
     * <pre>
     *             |       (0)      |
     *      (-1)  [S]--------------[E]  (1)
     *             |       (0)      |
     * </pre>
     *
     * @ignore
     * @param {Vector} line The line segment.
     * @param {Vector} point The point.
     * @return  {number} LEFT_VORNOI_REGION (-1) if it is the left region,
     *          MIDDLE_VORNOI_REGION (0) if it is the middle region,
     *          RIGHT_VORNOI_REGION (1) if it is the right region.
     */
function c(a,b){var c=a.length2(),g=b.dotProduct(a);return 0>g?d:g>c?f:e}for(var d=-1,e=0,f=1,g=[],h=0;10>h;h++)g.push(new me.Vector2d);for(var i=[],j=0;5>j;j++)i.push([]);/**
     * A singleton for managing collision detection (and projection-based collision response) of 2D shapes.<br>
     * Based on the Separating Axis Theorem and supports detecting collisions between simple Axis-Aligned Boxes, convex polygons and circles based shapes.
     * @namespace me.collision
     * @memberOf me
     */
me.collision=function(){
// hold public stuff in our singleton
var a={};
// return our object
/*
         * PUBLIC STUFF
         */
/**
         * the world quadtree used for the collision broadphase
         * @name quadTree
         * @memberOf me.collision
         * @public
         * @type {me.QuadTree}
         */
/**
         * The maximum number of levels that the quadtree will create. Default is 4.
         * @name maxDepth
         * @memberOf me.collision
         * @public
         * @type {number}
         * @see me.collision.quadTree
         *
         */
/**
         * The maximum number of children that a quadtree node can contain before it is split into sub-nodes. Default is 8.
         * @name maxChildren
         * @memberOf me.collision
         * @public
         * @type {boolean}
         * @see me.collision.quadTree
         */
/**
         * bounds of the physic world.
         * @name bounds
         * @memberOf me.collision
         * @public
         * @type {me.Rect}
         */
/**
         * Enum for collision type values.
         * @property NO_OBJECT to disable collision check
         * @property PLAYER_OBJECT
         * @property NPC_OBJECT
         * @property ENEMY_OBJECT
         * @property COLLECTABLE_OBJECT
         * @property ACTION_OBJECT e.g. doors
         * @property PROJECTILE_OBJECT e.g. missiles
         * @property WORLD_SHAPE e.g. walls; for map collision shapes
         * @property ALL_OBJECT all of the above
         * @readonly
         * @enum {Number}
         * @name types
         * @memberOf me.collision
         * @see me.body.setCollisionMask
         * @see me.body.collisionType
         * @example
         * // set the entity body collision type
         * myEntity.body.collisionType = me.collision.types.PLAYER_OBJECT;
         * // filter collision detection with collision shapes, enemies and collectables
         * myEntity.body.setCollisionMask(me.collision.types.WORLD_SHAPE | me.collision.types.ENEMY_OBJECT | me.collision.types.COLLECTABLE_OBJECT);
         */
/**
         * Initialize the collision/physic world
         * @ignore
         */
/**
         * An object representing the result of an intersection.
         * @property {me.Entity} a The first object participating in the intersection
         * @property {me.Entity} b The second object participating in the intersection
         * @property {Number} overlap Magnitude of the overlap on the shortest colliding axis
         * @property {me.Vector2d} overlapV The overlap vector (i.e. `overlapN.scale(overlap, overlap)`). If this vector is subtracted from the position of a, a and b will no longer be colliding
         * @property {me.Vector2d} overlapN The shortest colliding axis (unit-vector)
         * @property {Boolean} aInB Whether the first object is entirely inside the second
         * @property {Boolean} bInA Whether the second object is entirely inside the first
         * @property {Number} indexShapeA The index of the colliding shape for the object a body
         * @property {Number} indexShapeB The index of the colliding shape for the object b body
         * @name ResponseObject
         * @memberOf me.collision
         * @public
         * @type {Object}
         * @see me.collision.check
         */
/**
         * Set some values of the response back to their defaults. <br>
         * Call this between tests if you are going to reuse a single <br>
         * Response object for multiple intersection tests <br>
         * (recommended as it will avoid allocating extra memory) <br>
         * @name clear
         * @memberOf me.collision.ResponseObject
         * @public
         * @function
         */
/**
         * a global instance of a response object used for collision detection <br>
         * this object will be reused amongst collision detection call if not user-defined response is specified
         * @name response
         * @memberOf me.collision
         * @public
         * @type {me.collision.ResponseObject}
         */
/**
         * a callback used to determine if two objects should collide (based on both respective objects collision mask and type).<br>
         * you can redefine this function if you need any specific rules over what should collide with what.
         * @name shouldCollide
         * @memberOf me.collision
         * @public
         * @function
         * @param {me.Entity} a a reference to the object A.
         * @param {me.Entity} b a reference to the object B.
         * @return {Boolean} true if they should collide, false otherwise
         */
/**
         * Checks if the specified entity collides with others entities
         * @name check
         * @memberOf me.collision
         * @public
         * @function
         * @param {me.Entity} obj entity to be tested for collision
         * @param {me.collision.ResponseObject} [respObj=me.collision.response] a user defined response object that will be populated if they intersect.
         * @return {Boolean} in case of collision, false otherwise
         * @example
         * update : function (dt) {
         *    // ...
         *
         *    // handle collisions against other shapes
         *    me.collision.check(this);
         *
         *    // ...
         * },
         *
         * // colision handler
         * onCollision : function (response) {
         *     if (response.b.body.collisionType === me.collision.types.ENEMY_OBJECT) {
         *         // makes the other entity solid, by substracting the overlap vector to the current position
         *         this.pos.sub(response.overlapV);
         *         this.hurt();
         *         // not solid
         *         return false;
         *     }
         *     // Make the object solid
         *     return true;
         * },
         */
/**
         * Checks whether polygons collide.
         * @ignore
         * @param {me.Entity} a a reference to the object A.
         * @param {me.Polygon} polyA a reference to the object A Polygon to be tested
         * @param {me.Entity} b a reference to the object B.
         * @param {me.Polygon} polyB a reference to the object B Polygon to be tested
         * @param {Response=} response Response object (optional) that will be populated if they intersect.
         * @return {boolean} true if they intersect, false if they don't.
         */
/**
         * Check if two Ellipse collide.
         * @ignore
         * @param {me.Entity} a a reference to the object A.
         * @param {me.Ellipse} ellipseA a reference to the object A Ellipse to be tested
         * @param {me.Entity} b a reference to the object B.
         * @param {me.Ellipse} ellipseB a reference to the object B Ellipse to be tested
         * @param {Response=} response Response object (optional) that will be populated if
         *   the circles intersect.
         * @return {boolean} true if the circles intersect, false if they don't.
         */
/**
         * Check if a polygon and an ellipse collide.
         * @ignore
         * @param {me.Entity} a a reference to the object A.
         * @param {me.Polygon} polyA a reference to the object A Polygon to be tested
         * @param {me.Entity} b a reference to the object B.
         * @param {me.Ellipse} ellipseB a reference to the object B Ellipse to be tested
         * @param {Response=} response Response object (optional) that will be populated if they intersect.
         * @return {boolean} true if they intersect, false if they don't.
         */
/**
         * Check if an ellipse and a polygon collide. <br>
         * **NOTE:** This is slightly less efficient than testPolygonEllipse as it just
         * runs testPolygonEllipse and reverses the response at the end.
         * @ignore
         * @param {me.Entity} a a reference to the object A.
         * @param {me.Ellipse} ellipseA a reference to the object A Ellipse to be tested
         * @param {me.Entity} a a reference to the object B.
         * @param {me.Polygon} polyB a reference to the object B Polygon to be tested
         * @param {Response=} response Response object (optional) that will be populated if
         *   they intersect.
         * @return {boolean} true if they intersect, false if they don't.
         */
return a.quadTree=null,a.maxDepth=4,a.maxChildren=8,a.bounds=null,a.types={/** to disable collision check */
NO_OBJECT:0,PLAYER_OBJECT:1,NPC_OBJECT:2,ENEMY_OBJECT:4,COLLECTABLE_OBJECT:8,ACTION_OBJECT:16,// door, etc...
PROJECTILE_OBJECT:32,// missiles, etc...
WORLD_SHAPE:64,// walls, etc...
ALL_OBJECT:4294967295},a.init=function(){
// default bounds to the game viewport
a.bounds=me.game.viewport.clone(),
// initializa the quadtree
a.quadTree=new me.QuadTree(a.bounds,a.maxChildren,a.maxDepth),
// reset the collision detection engine if a TMX level is loaded
me.event.subscribe(me.event.LEVEL_LOADED,function(){
// default bounds to game world
a.bounds=me.game.world.clone(),
// reset the quadtree
a.quadTree.clear(a.bounds)})},a.ResponseObject=function(){this.a=null,this.b=null,this.overlapN=new me.Vector2d,this.overlapV=new me.Vector2d,this.aInB=!0,this.bInA=!0,this.indexShapeA=-1,this.indexShapeB=-1,this.overlap=Number.MAX_VALUE},a.ResponseObject.prototype.clear=function(){return this.aInB=!0,this.bInA=!0,this.overlap=Number.MAX_VALUE,this.indexShapeA=-1,this.indexShapeB=-1,this},a.response=new a.ResponseObject,a.shouldCollide=function(a,b){return a.body&&b.body&&0!==(a.body.collisionMask&b.body.collisionType)&&0!==(a.body.collisionType&b.body.collisionMask)},a.check=function(b,c){for(var d,e=0,f=c||a.response,g=a.quadTree.retrieve(b),h=g.length;h--,d=g[h];)
// check if both objects "should" collide
if(d!==b&&a.shouldCollide(b,d)&&b.getBounds().overlaps(d.getBounds())){
// go trough all defined shapes in A
var i=b.body.shapes.length,j=d.body.shapes.length;if(0===i||0===j)continue;var k=0;do{var l=b.body.getShape(k),m=0;do{var n=d.body.getShape(m);
// full SAT collision check
a["test"+l.shapeType+n.shapeType].call(this,b,l,d,n,f.clear())===!0&&(
// we touched something !
e++,
// set the shape index
f.indexShapeA=k,f.indexShapeB=m,
// execute the onCollision callback
b.onCollision(f,d)!==!1&&b.body.respondToCollision.call(b.body,f),d.onCollision(f,b)!==!1&&d.body.respondToCollision.call(d.body,f)),m++}while(j>m);k++}while(i>k)}
// we could return the amount of objects we collided with ?
return e>0},a.testPolygonPolygon=function(a,c,d,e,f){
// specific point for
var h,i=c.points,j=c.normals,k=j.length,l=e.points,m=e.normals,n=m.length,o=g.pop().copy(a.pos).add(a.ancestor._absPos).add(c.pos),p=g.pop().copy(d.pos).add(d.ancestor._absPos).add(e.pos);
// If any of the edge normals of A is a separating axis, no intersection.
for(h=0;k>h;h++)if(b(o,p,i,l,j[h],f))return g.push(o),g.push(p),!1;
// If any of the edge normals of B is a separating axis, no intersection.
for(h=0;n>h;h++)if(b(o,p,i,l,m[h],f))return g.push(o),g.push(p),!1;
// Since none of the edge normals of A or B are a separating axis, there is an intersection
// and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the
// final overlap vector.
return f&&(f.a=a,f.b=d,f.overlapV.copy(f.overlapN).scale(f.overlap)),g.push(o),g.push(p),!0},a.testEllipseEllipse=function(a,b,c,d,e){
// Check if the distance between the centers of the two
// circles is greater than their combined radius.
var f=g.pop().copy(c.pos).add(c.ancestor._absPos).add(d.pos).sub(a.pos).add(a.ancestor._absPos).sub(b.pos),h=b.radius,i=d.radius,j=h+i,k=j*j,l=f.length2();
// If the distance is bigger than the combined radius, they don't intersect.
if(l>k)return g.push(f),!1;
// They intersect.  If we're calculating a response, calculate the overlap.
if(e){var m=Math.sqrt(l);e.a=a,e.b=c,e.overlap=j-m,e.overlapN.copy(f.normalize()),e.overlapV.copy(f).scale(e.overlap),e.aInB=i>=h&&i-h>=m,e.bInA=h>=i&&h-i>=m}return g.push(f),!0},a.testPolygonEllipse=function(a,b,e,h,i){
// For each edge in the polygon:
for(var j=g.pop().copy(e.pos).add(e.ancestor._absPos).add(h.pos).sub(a.pos).add(a.ancestor._absPos).sub(b.pos),k=h.radius,l=k*k,m=b.points,n=b.edges,o=n.length,p=g.pop(),q=g.pop(),r=g.pop(),s=0,t=0;o>t;t++){var u=t===o-1?0:t+1,v=0===t?o-1:t-1,w=0,x=null;
// Get the edge.
p.copy(n[t]),
// Calculate the center of the circle relative to the starting point of the edge.
r.copy(j).sub(m[t]),
// If the distance between the center of the circle and the point
// is bigger than the radius, the polygon is definitely not fully in
// the circle.
i&&r.length2()>l&&(i.aInB=!1);
// Calculate which Vornoi region the center of the circle is in.
var y=c(p,r),z=!0;
// If it's the left region:
if(y===d){var A=null;if(o>1&&(p.copy(n[v]),A=g.pop().copy(j).sub(m[v]),y=c(p,A),y!==f&&(z=!1)),z){if(s=r.length(),s>k)
// No intersection
return g.push(j),g.push(p),g.push(q),g.push(r),A&&g.push(A),!1;i&&(
// It intersects, calculate the overlap.
i.bInA=!1,x=r.normalize(),w=k-s)}A&&g.push(A)}else if(y===f){if(o>1&&(p.copy(n[u]),r.copy(j).sub(m[u]),y=c(p,r),y!==d&&(z=!1)),z){if(s=r.length(),s>k)
// No intersection
return g.push(j),g.push(p),g.push(q),g.push(r),!1;i&&(
// It intersects, calculate the overlap.
i.bInA=!1,x=r.normalize(),w=k-s)}}else{
// Need to check if the circle is intersecting the edge,
// Get the normal.
q.copy(b.normals[t]),
// Find the perpendicular distance between the center of the
// circle and the edge.
s=r.dotProduct(q);var B=Math.abs(s);
// If the circle is on the outside of the edge, there is no intersection.
if((1===o||s>0)&&B>k)
// No intersection
return g.push(j),g.push(p),g.push(q),g.push(r),!1;i&&(x=q,w=k-s,(s>=0||2*k>w)&&(i.bInA=!1))}
// If this is the smallest overlap we've seen, keep it.
// (overlapN may be null if the circle was in the wrong Vornoi region).
x&&i&&Math.abs(w)<Math.abs(i.overlap)&&(i.overlap=w,i.overlapN.copy(x))}
// Calculate the final overlap vector - based on the smallest overlap.
return i&&(i.a=a,i.b=e,i.overlapV.copy(i.overlapN).scale(i.overlap)),g.push(j),g.push(p),g.push(q),g.push(r),!0},a.testEllipsePolygon=function(b,c,d,e,f){
// Test the polygon against the circle.
var g=a.testPolygonEllipse(d,e,b,c,f);if(g&&f){
// Swap A and B in the response.
var h=f.a,i=f.aInB;f.overlapN.reverse(),f.overlapV.reverse(),f.a=f.b,f.b=h,f.aInB=f.bInA,f.bInA=i}return g},a}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * A base class for renderable objects.
     * @class
     * @extends me.Rect
     * @memberOf me
     * @constructor
     * @param {Number} x position of the renderable object
     * @param {Number} y position of the renderable object
     * @param {Number} width object width
     * @param {Number} height object height
     */
me.Renderable=me.Rect.extend(/** @scope me.Renderable.prototype */
{/**
         * @ignore
         */
init:function(a,b,c,d){/**
             * to identify the object as a renderable object
             * @ignore
             */
this.isRenderable=!0,/**
            * (G)ame (U)nique (Id)entifier" <br>
            * a GUID will be allocated for any renderable object added <br>
            * to an object container (including the `me.game.world` container)
            * @public
            * @type String
            * @name GUID
            * @memberOf me.Renderable
            */
this.GUID=void 0,/**
             * Whether the renderable object is visible and within the viewport<br>
             * @public
             * @readonly
             * @type Boolean
             * @default false
             * @name inViewport
             * @memberOf me.Renderable
             */
this.inViewport=!1,/**
             * Whether the renderable object will always update, even when outside of the viewport<br>
             * @public
             * @type Boolean
             * @default false
             * @name alwaysUpdate
             * @memberOf me.Renderable
             */
this.alwaysUpdate=!1,/**
             * Whether to update this object when the game is paused.
             * @public
             * @type Boolean
             * @default false
             * @name updateWhenPaused
             * @memberOf me.Renderable
             */
this.updateWhenPaused=!1,/**
             * make the renderable object persistent over level changes<br>
             * @public
             * @type Boolean
             * @default false
             * @name isPersistent
             * @memberOf me.Renderable
             */
this.isPersistent=!1,/**
             * Define if a renderable follows screen coordinates (floating)<br>
             * or the world coordinates (not floating)<br>
             * @public
             * @type Boolean
             * @default false
             * @name floating
             * @memberOf me.Renderable
             */
this.floating=!1,/**
             * Z-order for object sorting<br>
             * @private
             * @type Number
             * @default NaN
             * @name z
             * @memberOf me.Renderable
             */
this.z=NaN,/**
             * Define the object anchoring point<br>
             * This is used when positioning, or scaling the object<br>
             * The anchor point is a value between 0.0 and 1.0 (1.0 being the maximum size of the object) <br>
             * (0, 0) means the top-left corner, <br>
             * (1, 1) means the bottom-right corner, <br>
             * @public
             * @type me.Vector2d
             * @default <0.5,0.5>
             * @name anchorPoint
             * @memberOf me.Renderable
             */
this.anchorPoint=new me.Vector2d,/**
             * Define the renderable opacity<br>
             * Set to zero if you do not wish an object to be drawn
             * @see me.Renderable#setOpacity
             * @see me.Renderable#getOpacity
             * @public
             * @type Number
             * @default 1.0
             * @name me.Renderable#alpha
             */
this.alpha=1,/**
             * The bounding rectangle for this renderable
             * @ignore
             * @type {me.Rect}
             * @name _bounds
             * @memberOf me.Renderable
             */
this._bounds?this._bounds.setShape(a,b,c,d):this._bounds=new me.Rect(a,b,c,d),/**
             * Absolute position in the game world
             * @ignore
             * @type {me.Vector2d}
             * @name _absPos
             * @memberOf me.Renderable
             */
this._absPos?this._absPos.set(a,b):this._absPos=new me.Vector2d(a,b),
// set position to observable. Can use updateBounds, as _bounds using a regular vector.
// will not lead to stack too deep.
this.pos=new me.ObservableVector2d(a,b,{onUpdate:this.updateBoundsPos.bind(this)}),this._width=c,this._height=d,this.shapeType="Rectangle",
// set the default anchor point (middle of the renderable)
this.anchorPoint.set(.5,.5),
// ensure it's fully opaque by default
this.setOpacity(1)},/**
         * returns the bounding box for this renderable
         * @name getBounds
         * @memberOf me.Renderable
         * @function
         * @return {me.Rect} bounding box Rectangle object
         */
getBounds:function(){return this._bounds},/**
         * get the renderable alpha channel value<br>
         * @name getOpacity
         * @memberOf me.Renderable
         * @function
         * @return {Number} current opacity value between 0 and 1
         */
getOpacity:function(){return this.alpha},/**
         * update the renderable's bounding rect dimensions
         * @private
         * @name resizeBounds
         * @memberOf me.Renderable
         * @function
         */
resizeBounds:function(a,b){return this._bounds.resize(a,b),this._bounds},/**
         * set the renderable alpha channel value<br>
         * @name setOpacity
         * @memberOf me.Renderable
         * @function
         * @param {Number} alpha opacity value between 0.0 and 1.0
         */
setOpacity:function(a){"number"==typeof a&&(this.alpha=a.clamp(0,1),
// Set to 1 if alpha is NaN
this.alpha!==this.alpha&&(this.alpha=1))},/**
         * update function
         * called by the game manager on each game loop
         * @name update
         * @memberOf me.Renderable
         * @function
         * @protected
         * @param {Number} dt time since the last update in milliseconds.
         * @return false
         **/
update:function(){return!1},/**
         * update the renderable's bounding rect (private)
         * @private
         * @name updateBoundsPos
         * @memberOf me.Renderable
         * @function
         */
updateBoundsPos:function(a,b){
// XXX: This is called from the constructor, before it gets an ancestor
return this._bounds.pos.set(a,b),this.ancestor&&this._bounds.pos.add(this.ancestor._absPos),this._bounds},/**
         * update the bounds
         * @private
         * @deprecated
         * @name updateBounds
         * @memberOf me.Entity
         * @function
         */
updateBounds:function(){return console.warn("Deprecated: me.Renderable.updateBounds"),me.Rect.prototype.updateBounds.apply(this)},/**
         * object draw
         * called by the game manager on each game loop
         * @name draw
         * @memberOf me.Renderable
         * @function
         * @protected
         * @param {me.CanvasRenderer|me.WebGLRenderer} a renderer object
         **/
draw:function(){}}),/**
     * width of the Renderable bounding box<br>
     * @public
     * @type {Number}
     * @name width
     * @memberOf me.Renderable
     */
Object.defineProperty(me.Renderable.prototype,"width",{get:function(){return this._width},set:function(a){this.resizeBounds(a,this._height),this._width=a},configurable:!0}),/**
     * height of the Renderable bounding box <br>
     * @public
     * @type {Number}
     * @name height
     * @memberOf me.Renderable
     */
Object.defineProperty(me.Renderable.prototype,"height",{get:function(){return this._height},set:function(a){this.resizeBounds(this._width,a),this._height=a},configurable:!0}),/**
     * Base class for Renderable exception handling.
     * @name Error
     * @class
     * @memberOf me.Renderable
     * @constructor
     * @param {String} msg Error message.
     */
me.Renderable.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.Renderable.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * A Simple object to display a sprite on screen.
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {Number} x the x coordinates of the sprite object
     * @param {Number} y the y coordinates of the sprite object
     * @param {Object} settings Contains additional parameters for the sprite
     * @param {Image|String} settings.image reference to the Sprite Image. See {@link me.loader.getImage}
     * @param {Number} [settings.framewidth=settings.image.width] Image source width.
     * @param {Number} [settings.frameheight=settings.image.height] Image source height.
     * @param {Number} [settings.rotation] Initial rotation angle in radians.
     * @param {Boolean} [settings.flipX] Initial flip for X-axis.
     * @param {Boolean} [settings.flipY] Initial flip for Y-axis.
     * @example
     * // create a static Sprite Object
     * mySprite = new me.Sprite (100, 100, {
     *     image : me.loader.getImage("mySpriteImage")
     * });
     */
me.Sprite=me.Renderable.extend(/** @scope me.Sprite.prototype */
{/**
         * @ignore
         */
init:function(a,b,c){/**
             * private/internal scale factor
             * @ignore
             */
this._scale=new me.Vector2d(1,1),
// if true, image flipping/scaling is needed
this.scaleFlag=!1,
// just to keep track of when we flip
this.lastflipX=!1,this.lastflipY=!1,this.flipX(!!c.flipX),this.flipY(!!c.flipY),
// current frame texture offset
/**
             * The position to draw from on the source image.
             * @public
             * @type me.Vector2d
             * @name offset
             * @memberOf me.Vector2d
             */
this.offset=new me.Vector2d(0,0),/**
             * Set the angle (in Radians) of a sprite to rotate it <br>
             * WARNING: rotating sprites decreases performance with Canvas Renderer
             * @public
             * @type Number
             * @default 0
             * @name me.Sprite#angle
             */
this.angle=c.rotation||0,/**
             * Source rotation angle for pre-rotating the source image<br>
             * Commonly used for TexturePacker
             * @ignore
             */
this._sourceAngle=0,
// to manage the flickering effect
this.flickering=!1,this.flickerDuration=0,this.flickercb=null,this.flickerState=!1,
// Used by the game engine to adjust visibility as the
// sprite moves in and out of the viewport
this.isSprite=!0;var d=me.utils.getImage(c.image);
// call the super constructor
me.Renderable.prototype.init.apply(this,[a,b,c.framewidth||d.width,c.frameheight||d.height]),
// cache image reference
this.image=d},/**
         * return the flickering state of the object
         * @name isFlickering
         * @memberOf me.Sprite
         * @function
         * @return {Boolean}
         */
isFlickering:function(){return this.flickering},/**
         * make the object flicker
         * @name flicker
         * @memberOf me.Sprite
         * @function
         * @param {Number} duration expressed in milliseconds
         * @param {Function} callback Function to call when flickering ends
         * @example
         * // make the object flicker for 1 second
         * // and then remove it
         * this.flicker(1000, function () {
         *     me.game.world.removeChild(this);
         * });
         */
flicker:function(a,b){this.flickerDuration=a,this.flickerDuration<=0?(this.flickering=!1,this.flickercb=null):this.flickering||(this.flickercb=b,this.flickering=!0)},/**
         * Flip object on horizontal axis
         * @name flipX
         * @memberOf me.Sprite
         * @function
         * @param {Boolean} flip enable/disable flip
         */
flipX:function(a){a!==this.lastflipX&&(this.lastflipX=a,this._scale.x=-this._scale.x,this.scaleFlag=1!==this._scale.x||1!==this._scale.y)},/**
         * Flip object on vertical axis
         * @name flipY
         * @memberOf me.Sprite
         * @function
         * @param {Boolean} flip enable/disable flip
         */
flipY:function(a){a!==this.lastflipY&&(this.lastflipY=a,this._scale.y=-this._scale.y,this.scaleFlag=1!==this._scale.x||1!==this._scale.y)},/**
         * scale the sprite around his center<br>
         * @name scale
         * @memberOf me.Sprite
         * @function
         * @param {Number} ratioX x scaling ratio
         * @param {Number} ratioY y scaling ratio
         */
scale:function(a,b){var c=a,d="undefined"==typeof b?a:b;c>0&&(this._scale.x=this._scale.x<0?-c:c),d>0&&(this._scale.y=this._scale.y<0?-d:d),
// set the scaleFlag
this.scaleFlag=1!==this._scale.x||1!==this._scale.y},/**
         * scale the sprite around his center<br>
         * @name scaleV
         * @memberOf me.Sprite
         * @function
         * @param {me.Vector2d} vector ratio
         */
scaleV:function(a){this.scale(a.x,a.y)},/**
         * sprite update<br>
         * not to be called by the end user<br>
         * called by the game manager on each game loop
         * @name update
         * @memberOf me.Sprite
         * @function
         * @protected
         * @return false
         **/
update:function(a){
//update the "flickering" state if necessary
//update the "flickering" state if necessary
return this.flickering?(this.flickerDuration-=a,this.flickerDuration<0&&(this.flickercb&&this.flickercb(),this.flicker(-1)),!0):!1},/**
         * object draw<br>
         * not to be called by the end user<br>
         * called by the game manager on each game loop
         * @name draw
         * @memberOf me.Sprite
         * @function
         * @protected
         * @param {me.CanvasRenderer|me.WebGLRenderer} a renderer object
         **/
draw:function(a){
// do nothing if we are flickering
if(!this.flickering||(this.flickerState=!this.flickerState,this.flickerState)){
// save global alpha
var b=a.globalAlpha();
// sprite alpha value
a.setGlobalAlpha(b*this.getOpacity());
// clamp position vector to pixel grid
var c=~~this.pos.x,d=~~this.pos.y,e=this.width,f=this.height,g=this.angle+this._sourceAngle;if(this.scaleFlag||0!==g){
// save context
a.save();
// calculate pixel pos of the anchor point
var h=e*this.anchorPoint.x,i=f*this.anchorPoint.y;
// translate to the defined anchor point
a.translate(c+h,d+i),
// scale
this.scaleFlag&&a.scale(this._scale.x,this._scale.y),0!==g&&a.rotate(g),0!==this._sourceAngle?(e=this.height,f=this.width,c=-i,d=-h):(c=-h,d=-i)}a.drawImage(this.image,this.offset.x,this.offset.y,// sx,sy
e,f,// sw,sh
c,d,// dx,dy
e,f),(this.scaleFlag||0!==g)&&
// restore context
a.restore(),
// restore global alpha
a.setGlobalAlpha(b)}},/**
         * Destroy function<br>
         * @ignore
         */
destroy:function(){this.onDestroyEvent.apply(this,arguments)},/**
         * OnDestroy Notification function<br>
         * Called by engine before deleting the object
         * @name onDestroyEvent
         * @memberOf me.Sprite
         * @function
         */
onDestroyEvent:function(){}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * an object to manage animation
     * @class
     * @extends me.Sprite
     * @memberOf me
     * @constructor
     * @param {Number} x the x coordinates of the sprite object
     * @param {Number} y the y coordinates of the sprite object
     * @param {Object} settings Contains additional parameters for the animation sheet
     * @param {Image|String} settings.image Image to use for the animation
     * @param {Number} [settings.framewidth] Width of a single frame within the spritesheet
     * @param {Number} [settings.frameheight] Height of a single frame within the spritesheet
     * @example
     * // standalone image
     * var animationSheet = new me.AnimationSheet(0, 0, {
     *     image : "animationsheet",
     *     framewidth : 64,
     *     frameheight : 64
     * });
     */
me.AnimationSheet=me.Sprite.extend(/** @scope me.AnimationSheet.prototype */
{/** @ignore */
init:function(a,b,c){/**
             * pause and resume animation<br>
             * default value : false;
             * @public
             * @type Boolean
             * @name me.AnimationSheet#animationpause
             */
this.animationpause=!1,/**
             * animation cycling speed (delay between frame in ms)<br>
             * default value : 100ms;
             * @public
             * @type Number
             * @name me.AnimationSheet#animationspeed
             */
this.animationspeed=100,
// hold all defined animation
this.anim={},
// a flag to reset animation
this.resetAnim=null,
// default animation sequence
this.current=null,
// default animation speed (ms)
this.animationspeed=100,
// call the constructor
me.Sprite.prototype.init.apply(this,[a,b,c]),
// store/reset the current atlas information
"undefined"!=typeof c.atlas?(this.textureAtlas=c.atlas,this.atlasIndices=c.atlasIndices):(
// "regular" spritesheet
this.textureAtlas=me.video.renderer.cache.get(me.utils.getImage(c.image),c).getAtlas(),this.atlasIndices=null),
// create a default animation sequence with all sprites
this.addAnimation("default",null),
// set as default
this.setCurrentAnimation("default")},/**
         * add an animation <br>
         * For fixed-sized cell sprite sheet, the index list must follow the
         * logic as per the following example :<br>
         * <img src="images/spritesheet_grid.png"/>
         * @name addAnimation
         * @memberOf me.AnimationSheet
         * @function
         * @param {String} name animation id
         * @param {Number[]|String[]} index list of sprite index or name
         * defining the animation
         * @param {Number} [animationspeed] cycling speed for animation in ms
         * (delay between each frame).
         * @see me.AnimationSheet#animationspeed
         * @example
         * // walking animation
         * this.addAnimation("walk", [ 0, 1, 2, 3, 4, 5 ]);
         * // eating animation
         * this.addAnimation("eat", [ 6, 6 ]);
         * // rolling animation
         * this.addAnimation("roll", [ 7, 8, 9, 10 ]);
         * // slower animation
         * this.addAnimation("roll", [ 7, 8, 9, 10 ], 200);
         */
addAnimation:function(a,b,c){this.anim[a]={name:a,frame:{},idx:0,length:0,animationspeed:c||this.animationspeed,nextFrame:0},null==b&&(b=[],Object.keys(this.textureAtlas).forEach(function(a,c){b[c]=c}));
// set each frame configuration (offset, size, etc..)
for(var d=0,e=0,f=b.length;f>e;e++)if("number"==typeof b[e])"undefined"!=typeof this.textureAtlas[b[e]]&&(
// TODO: adding the cache source coordinates add undefined entries in webGL mode
this.anim[a].frame[""+e]=this.textureAtlas[b[e]],d++);else{// string
if(null===this.atlasIndices)throw new me.Renderable.Error("string parameters for addAnimation are not allowed for standard spritesheet based Texture");this.anim[a].frame[e]=this.textureAtlas[this.atlasIndices[b[e]]],d++}this.anim[a].length=d},/**
         * set the current animation
         * this will always change the animation & set the frame to zero
         * @name setCurrentAnimation
         * @memberOf me.AnimationSheet
         * @function
         * @param {String} name animation id
         * @param {String|Function} [onComplete] animation id to switch to when
         * complete, or callback
         * @example
         * // set "walk" animation
         * this.setCurrentAnimation("walk");
         *
         * // set "walk" animation if it is not the current animation
         * if (this.isCurrentAnimation("walk")) {
         *     this.setCurrentAnimation("walk");
         * }
         *
         * // set "eat" animation, and switch to "walk" when complete
         * this.setCurrentAnimation("eat", "walk");
         *
         * // set "die" animation, and remove the object when finished
         * this.setCurrentAnimation("die", (function () {
         *    me.game.world.removeChild(this);
         *    return false; // do not reset to first frame
         * }).bind(this));
         *
         * // set "attack" animation, and pause for a short duration
         * this.setCurrentAnimation("die", (function () {
         *    this.animationpause = true;
         *
         *    // back to "standing" animation after 1 second
         *    setTimeout(function () {
         *        this.setCurrentAnimation("standing");
         *    }, 1000);
         *
         *    return false; // do not reset to first frame
         * }).bind(this));
         **/
setCurrentAnimation:function(a,b){if(!this.anim[a])throw new me.Renderable.Error("animation id '"+a+"' not defined");this.current=this.anim[a],this.resetAnim=b||null,this.setAnimationFrame(this.current.idx),// or 0 ?
this.current.nextFrame=this.current.animationspeed},/**
         * return true if the specified animation is the current one.
         * @name isCurrentAnimation
         * @memberOf me.AnimationSheet
         * @function
         * @param {String} name animation id
         * @return {Boolean}
         * @example
         * if (!this.isCurrentAnimation("walk")) {
         *     // do something funny...
         * }
         */
isCurrentAnimation:function(a){return this.current.name===a},/**
         * force the current animation frame index.
         * @name setAnimationFrame
         * @memberOf me.AnimationSheet
         * @function
         * @param {Number} [index=0] animation frame index
         * @example
         * // reset the current animation to the first frame
         * this.setAnimationFrame();
         */
setAnimationFrame:function(a){this.current.idx=(a||0)%this.current.length;var b=this.current.frame[""+this.current.idx];this.offset=b.offset,this.width=b.width,this.height=b.height,this._sourceAngle=b.angle},/**
         * return the current animation frame index.
         * @name getCurrentAnimationFrame
         * @memberOf me.AnimationSheet
         * @function
         * @return {Number} current animation frame index
         */
getCurrentAnimationFrame:function(){return this.current.idx},/**
         * update the animation<br>
         * this is automatically called by the game manager {@link me.game}
         * @name update
         * @memberOf me.AnimationSheet
         * @function
         * @protected
         * @param {Number} dt time since the last update in milliseconds.
         */
update:function(a){
// update animation if necessary
if(!this.animationpause&&this.current.length>1&&(this.current.nextFrame-=a,this.current.nextFrame<=0)){
// switch animation if we reach the end of the strip
// and a callback is defined
if(this.setAnimationFrame(++this.current.idx),0===this.current.idx&&this.resetAnim)
// if string, change to the corresponding animation
if("string"==typeof this.resetAnim)this.setCurrentAnimation(this.resetAnim);else if("function"==typeof this.resetAnim&&this.resetAnim()===!1)return this.current.idx=this.current.length-1,this.setAnimationFrame(this.current.idx),me.Sprite.prototype.update.apply(this,[a]),!1;
// set next frame timestamp
return this.current.nextFrame=this.current.animationspeed,me.Sprite.prototype.update.apply(this,[a])||!0}return me.Sprite.prototype.update.apply(this,[a])}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){
// some ref shortcut
var a=Math.min,b=Math.max;/**
     * a camera/viewport Object
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {Number} minX start x offset
     * @param {Number} minY start y offset
     * @param {Number} maxX end x offset
     * @param {Number} maxY end y offset
     */
me.Viewport=me.Renderable.extend(/** @scope me.Viewport.prototype */
{/** @ignore */
init:function(a,b,c,d){/**
             * Axis definition
             * @property NONE
             * @property HORIZONTAL
             * @property VERTICAL
             * @property BOTH
             * @public
             * @constant
             * @enum {Number}
             * @name AXIS
             * @memberOf me.Viewport
             */
this.AXIS={NONE:0,HORIZONTAL:1,VERTICAL:2,BOTH:3},/**
             * Camera bounds
             * @public
             * @constant
             * @type me.Rect
             * @name bounds
             * @memberOf me.Viewport
             */
this.bounds=null,
// camera deadzone
this.deadzone=null,
// target to follow
this.target=null,
// axis to follow
this.follow_axis=0,
// shake parameters
this._shake=null,
// fade parameters
this._fadeIn=null,this._fadeOut=null,
// cache the screen rendering position
this.screenX=0,this.screenY=0,
// viewport coordinates
me.Renderable.prototype.init.apply(this,[a,b,c-a,d-b]),
// real world limits
this.bounds=new me.Rect(-(1/0),-(1/0),1/0,1/0),
// offset for shake effect
this.offset=new me.Vector2d,
// target to follow
this.target=null,
// default value follow
this.follow_axis=this.AXIS.NONE,
// shake variables
this._shake={intensity:0,duration:0,axis:this.AXIS.BOTH,onComplete:null},
// flash variables
this._fadeOut={color:null,duration:0,tween:null},
// fade variables
this._fadeIn={color:null,duration:0,tween:null},
// set a default deadzone
this.setDeadzone(this.width/6,this.height/6)},
// -- some private function ---
/** @ignore */
_followH:function(c){var d=this.pos.x;return c.x-this.pos.x>this.deadzone.right?this.pos.x=~~a(c.x-this.deadzone.right,this.bounds.width-this.width):c.x-this.pos.x<this.deadzone.pos.x&&(this.pos.x=~~b(c.x-this.deadzone.pos.x,this.bounds.pos.x)),d!==this.pos.x},/** @ignore */
_followV:function(c){var d=this.pos.y;return c.y-this.pos.y>this.deadzone.bottom?this.pos.y=~~a(c.y-this.deadzone.bottom,this.bounds.height-this.height):c.y-this.pos.y<this.deadzone.pos.y&&(this.pos.y=~~b(c.y-this.deadzone.pos.y,this.bounds.pos.y)),d!==this.pos.y},
// -- public function ---
/**
         * reset the viewport to specified coordinates
         * @name reset
         * @memberOf me.Viewport
         * @function
         * @param {Number} [x=0]
         * @param {Number} [y=0]
         */
reset:function(a,b){
// reset the initial viewport position to 0,0
this.pos.x=a||0,this.pos.y=b||0,
// reset the target
this.target=null,
// reset default axis value for follow
this.follow_axis=null},/**
         * change the deadzone settings.
         * the "deadzone" defines an area within the current viewport in which
         * the followed entity can move without scrolling the viewport.
         * @name setDeadzone
         * @see me.Viewport.follow
         * @memberOf me.Viewport
         * @function
         * @param {Number} w deadzone width
         * @param {Number} h deadzone height
         */
setDeadzone:function(a,b){null===this.deadzone&&(this.deadzone=new me.Rect(0,0,0,0)),
// reusing the old code for now...
this.deadzone.pos.set(~~((this.width-a)/2),~~((this.height-b)/2-.25*b)),this.deadzone.resize(a,b),
// force a camera update
this.updateTarget()},/**
         * resize the viewport
         * @name resize
         * @memberOf me.Viewport
         * @function
         * @param {Number} w new width of the viewport
         * @param {Number} h new height of the viewport
         * @return {me.Viewport} this viewport
        */
resize:function(a,b){me.Renderable.prototype.resize.apply(this,[a,b]);var c=me.game.currentLevel;return this.setBounds(0,0,Math.max(a,c.width),Math.max(b,c.height)),this.setDeadzone(a/6,b/6),this.moveTo(0,0),this.update(),me.event.publish(me.event.VIEWPORT_ONRESIZE,[this.width,this.height]),this},/**
         * set the viewport boundaries (set to the world limit by default).
         * the viewport is bound to the given coordinates and cannot move/be scrolled outside of it.
         * @name setBounds
         * @memberOf me.Viewport
         * @function
         * @param {Number} x world left limit
         * @param {Number} y world top limit
         * @param {Number} w world width limit
         * @param {Number} h world height limit
         */
setBounds:function(a,b,c,d){this.bounds.pos.set(a,b),this.bounds.resize(c,d)},/**
         * set the viewport to follow the specified entity
         * @name follow
         * @memberOf me.Viewport
         * @function
         * @param {me.Entity|me.Vector2d} target Entity or Position
         * Vector to follow
         * @param {me.Viewport.AXIS} [axis=this.AXIS.BOTH] Which axis to follow
         */
follow:function(a,b){if(a instanceof me.Entity)this.target=a.pos;else{if(!(a instanceof me.Vector2d))throw new me.Renderable.Error("invalid target for viewport.follow");this.target=a}
// if axis is null, camera is moved on target center
this.follow_axis="undefined"==typeof b?this.AXIS.BOTH:b,
// force a camera update
this.updateTarget()},/**
         * move the viewport position by the specified offset
         * @name move
         * @memberOf me.Viewport
         * @function
         * @param {Number} x
         * @param {Number} y
         * @example
         * // Move the viewport up by four pixels
         * me.game.viewport.move(0, -4);
         */
move:function(a,b){this.moveTo(~~(this.pos.x+a),~~(this.pos.y+b))},/**
         * move the viewport to the specified coordinates
         * @name moveTo
         * @memberOf me.Viewport
         * @function
         * @param {Number} x
         * @param {Number} y
         */
moveTo:function(a,b){this.pos.x=(~~a).clamp(this.bounds.pos.x,this.bounds.width-this.width),this.pos.y=(~~b).clamp(this.bounds.pos.y,this.bounds.height-this.height),
//publish the corresponding message
me.event.publish(me.event.VIEWPORT_ONCHANGE,[this.pos])},/** @ignore */
updateTarget:function(){var a=!1;if(this.target)switch(this.follow_axis){case this.AXIS.NONE:
//this.focusOn(this.target);
break;case this.AXIS.HORIZONTAL:a=this._followH(this.target);break;case this.AXIS.VERTICAL:a=this._followV(this.target);break;case this.AXIS.BOTH:a=this._followH(this.target),a=this._followV(this.target)||a}return a},/** @ignore */
update:function(a){var b=this.updateTarget();
// updated!
//publish the corresponding message
// check for fade/flash effect
return this._shake.duration>0&&(this._shake.duration-=a,this._shake.duration<=0?(this._shake.duration=0,this.offset.setZero(),"function"==typeof this._shake.onComplete&&this._shake.onComplete()):((this._shake.axis===this.AXIS.BOTH||this._shake.axis===this.AXIS.HORIZONTAL)&&(this.offset.x=(Math.random()-.5)*this._shake.intensity),(this._shake.axis===this.AXIS.BOTH||this._shake.axis===this.AXIS.VERTICAL)&&(this.offset.y=(Math.random()-.5)*this._shake.intensity)),b=!0),b===!0&&me.event.publish(me.event.VIEWPORT_ONCHANGE,[this.pos]),(null!=this._fadeIn.tween||null!=this._fadeOut.tween)&&(b=!0),b},/**
         * shake the camera
         * @name shake
         * @memberOf me.Viewport
         * @function
         * @param {Number} intensity maximum offset that the screen can be moved
         * while shaking
         * @param {Number} duration expressed in milliseconds
         * @param {me.Viewport.AXIS} [axis=this.AXIS.BOTH] specify on which axis you
         *   want the shake effect
         * @param {Function} [onComplete] callback once shaking effect is over
         * @example
         * // shake it baby !
         * me.game.viewport.shake(10, 500, me.game.viewport.AXIS.BOTH);
         */
shake:function(a,b,c,d){this._shake.duration>0||(this._shake={intensity:a,duration:b,axis:c||this.AXIS.BOTH,onComplete:d})},/**
         * fadeOut(flash) effect<p>
         * screen is filled with the specified color and slowly goes back to normal
         * @name fadeOut
         * @memberOf me.Viewport
         * @function
         * @param {me.Color|String} color a CSS color value
         * @param {Number} [duration=1000] expressed in milliseconds
         * @param {Function} [onComplete] callback once effect is over
         */
fadeOut:function(a,b,c){this._fadeOut.color=me.pool.pull("me.Color").copy(a),this._fadeOut.color.alpha=1,this._fadeOut.duration=b||1e3,// convert to ms
this._fadeOut.tween=me.pool.pull("me.Tween",this._fadeOut.color).to({alpha:0},this._fadeOut.duration).onComplete(c||null),this._fadeOut.tween.start()},/**
         * fadeIn effect <p>
         * fade to the specified color
         * @name fadeIn
         * @memberOf me.Viewport
         * @function
         * @param {me.Color|String} color a CSS color value
         * @param {Number} [duration=1000] expressed in milliseconds
         * @param {Function} [onComplete] callback once effect is over
         */
fadeIn:function(a,b,c){this._fadeIn.color=me.pool.pull("me.Color").copy(a),this._fadeIn.color.alpha=0,this._fadeIn.duration=b||1e3,//convert to ms
this._fadeIn.tween=me.pool.pull("me.Tween",this._fadeIn.color).to({alpha:1},this._fadeIn.duration).onComplete(c||null),this._fadeIn.tween.start()},/**
         * return the viewport width
         * @name getWidth
         * @memberOf me.Viewport
         * @function
         * @return {Number}
         */
getWidth:function(){return this.width},/**
         * return the viewport height
         * @name getHeight
         * @memberOf me.Viewport
         * @function
         * @return {Number}
         */
getHeight:function(){return this.height},/**
         * set the viewport position around the specified object
         * @name focusOn
         * @memberOf me.Viewport
         * @function
         * @param {me.Renderable}
         */
focusOn:function(a){var b=a.getBounds();this.moveTo(a.pos.x+b.pos.x+b.width/2,a.pos.y+b.pos.y+b.height/2)},/**
         * check if the specified rectangle is in the viewport
         * @name isVisible
         * @memberOf me.Viewport
         * @function
         * @param {me.Rect} rect
         * @return {Boolean}
         */
isVisible:function(a){return a.overlaps(this)},/**
         * convert the given "local" (screen) coordinates into world coordinates
         * @name localToWorld
         * @memberOf me.Viewport
         * @function
         * @param {Number} x
         * @param {Number} y
         * @param {Number} [v] an optional vector object where to set the
         * converted value
         * @return {me.Vector2d}
         */
localToWorld:function(a,b,c){return c=c||new me.Vector2d,c.set(a,b).add(this.pos).sub(me.game.currentLevel.pos)},/**
         * convert the given world coordinates into "local" (screen) coordinates
         * @name worldToLocal
         * @memberOf me.Viewport
         * @function
         * @param {Number} x
         * @param {Number} y
         * @param {Number} [v] an optional vector object where to set the
         * converted value
         * @return {me.Vector2d}
         */
worldToLocal:function(a,b,c){return c=c||new me.Vector2d,c.set(a,b).sub(this.pos).add(me.game.currentLevel.pos)},/**
         * render the camera effects
         * @ignore
         */
draw:function(){
// fading effect
this._fadeIn.tween&&(me.video.renderer.clearSurface(null,this._fadeIn.color),
// remove the tween if over
1===this._fadeIn.color.alpha&&(this._fadeIn.tween=null,me.pool.push(this._fadeIn.color),this._fadeIn.color=null)),
// flashing effect
this._fadeOut.tween&&(me.video.renderer.clearSurface(null,this._fadeOut.color),
// remove the tween if over
0===this._fadeOut.color.alpha&&(this._fadeOut.tween=null,me.pool.push(this._fadeOut.color),this._fadeOut.color=null))}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * GUI Object<br>
     * A very basic object to manage GUI elements <br>
     * The object simply register on the "pointerdown" <br>
     * or "touchstart" event and call the onClick function"
     * @class
     * @extends me.Sprite
     * @memberOf me
     * @constructor
     * @param {Number} x the x coordinate of the GUI Object
     * @param {Number} y the y coordinate of the GUI Object
     * @param {Object} settings See {@link me.Entity}
     * @example
     *
     * // create a basic GUI Object
     * var myButton = me.GUI_Object.extend(
     * {
     *    init:function (x, y)
     *    {
     *       var settings = {}
     *       settings.image = "button";
     *       settings.framewidth = 100;
     *       settings.frameheight = 50;
     *       // super constructor
     *       me.GUI_Object.prototype.init.apply(this, [x, y, settings]);
     *       // define the object z order
     *       this.z = 4;
     *    },
     *
     *    // output something in the console
     *    // when the object is clicked
     *    onClick:function (event)
     *    {
     *       console.log("clicked!");
     *       // don't propagate the event
     *       return false;
     *    }
     * });
     *
     * // add the object at pos (10,10)
     * me.game.world.addChild(new myButton(10,10));
     *
     */
me.GUI_Object=me.Sprite.extend({/** @scope me.GUI_Object.prototype */
/**
         * @ignore
         */
init:function(a,b,c){/**
             * object can be clicked or not
             * @public
             * @type boolean
             * @default true
             * @name me.GUI_Object#isClickable
             */
this.isClickable=!0,/**
             * Tap and hold threshold timeout in ms
             * @type {number}
             * @default 250
             * @name me.GUI_Object#holdThreshold
             */
this.holdThreshold=250,/**
             * object can be tap and hold
             * @public
             * @type boolean
             * @default false
             * @name me.GUI_Object#isHoldable
             */
this.isHoldable=!1,/**
             * true if the pointer is over the object
             * @public
             * @type boolean
             * @default false
             * @name me.GUI_Object#hover
             */
this.hover=!1,
// object has been updated (clicked,etc..)
this.holdTimeout=null,this.updated=!1,this.released=!0,
// call the parent constructor
me.Sprite.prototype.init.apply(this,[a,b,c]),
// GUI items use screen coordinates
this.floating=!0,
// register on mouse event
me.input.registerPointerEvent("pointerdown",this,this.clicked.bind(this)),me.input.registerPointerEvent("pointerup",this,this.release.bind(this)),me.input.registerPointerEvent("pointercancel",this,this.release.bind(this)),me.input.registerPointerEvent("pointerenter",this,this.enter.bind(this)),me.input.registerPointerEvent("pointerleave",this,this.leave.bind(this))},/**
         * return true if the object has been clicked
         * @ignore
         */
update:function(){
// clear the flag
return this.updated?(this.released||(this.updated=!1),!0):!1},/**
         * function callback for the pointerdown event
         * @ignore
         */
clicked:function(a){
// Check if left mouse button is pressed OR if device has touch
// Check if left mouse button is pressed OR if device has touch
return(1===a.which||me.device.touch)&&this.isClickable?(this.updated=!0,this.isHoldable&&(null!==this.holdTimeout&&me.timer.clearTimeout(this.holdTimeout),this.holdTimeout=me.timer.setTimeout(this.hold.bind(this),this.holdThreshold,!1),this.released=!1),this.onClick(a)):void 0},/**
         * function called when the object is pressed <br>
         * to be extended <br>
         * return false if we need to stop propagating the event
         * @name onClick
         * @memberOf me.GUI_Object
         * @public
         * @function
         * @param {Event} event the event object
         */
onClick:function(){return!1},/**
         * function callback for the pointerEnter event
         * @ignore
         */
enter:function(a){return this.hover=!0,this.onOver(a)},/**
         * function called when the pointer is over the object
         * @name onOver
         * @memberOf me.GUI_Object
         * @public
         * @function
         * @param {Event} event the event object
         */
onOver:function(){},/**
         * function callback for the pointerLeave event
         * @ignore
         */
leave:function(a){return this.hover=!1,this.release.call(this,a),this.onOut(a)},/**
         * function called when the pointer is leaving the object area
         * @name onOut
         * @memberOf me.GUI_Object
         * @public
         * @function
         * @param {Event} event the event object
         */
onOut:function(){},/**
         * function callback for the pointerup event
         * @ignore
         */
release:function(a){return this.released===!1?(this.released=!0,me.timer.clearTimeout(this.holdTimeout),this.onRelease(a)):void 0},/**
         * function called when the object is pressed and released <br>
         * to be extended <br>
         * return false if we need to stop propagating the event
         * @name onRelease
         * @memberOf me.GUI_Object
         * @public
         * @function
         * @param {Event} event the event object
         */
onRelease:function(){return!1},/**
         * function callback for the tap and hold timer event
         * @ignore
         */
hold:function(){me.timer.clearTimeout(this.holdTimeout),this.released||this.onHold()},/**
         * function called when the object is pressed and held<br>
         * to be extended <br>
         * @name onHold
         * @memberOf me.GUI_Object
         * @public
         * @function
         */
onHold:function(){},/**
         * OnDestroy notification function<br>
         * Called by engine before deleting the object<br>
         * be sure to call the parent function if overwritten
         * @name onDestroyEvent
         * @memberOf me.GUI_Object
         * @public
         * @function
         */
onDestroyEvent:function(){me.input.releasePointerEvent("pointerdown",this),me.input.releasePointerEvent("pointerup",this),me.input.releasePointerEvent("pointercancel",this),me.input.releasePointerEvent("pointerenter",this),me.input.releasePointerEvent("pointerleave",this),me.timer.clearTimeout(this.holdTimeout)}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * Private function to re-use for object removal in a defer
     * @ignore
     */
var a=function(a,b){a.ancestor&&a.ancestor.removeChildNow(a,b)},b=0;/**
     * me.Container represents a collection of child objects
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {Number} [x=0] position of the container
     * @param {Number} [y=0] position of the container
     * @param {Number} [w=me.game.viewport.width] width of the container
     * @param {number} [h=me.game.viewport.height] height of the container
     */
me.Container=me.Renderable.extend(/** @scope me.Container.prototype */
{/**
         * constructor
         * @ignore
         */
init:function(a,b,c,d){/**
             * keep track of pending sort
             * @ignore
             */
this.pendingSort=null,
// TODO; container do not have a physic body
// ADD child container child one by one to the quadtree?
/**
             * the container default transformation matrix
             * @public
             * @type me.Matrix2d
             * @name transform
             * @memberOf me.Container
             */
this.transform=new me.Matrix2d,
// call the _super constructor
me.Renderable.prototype.init.apply(this,[a,b,c||1/0,d||1/0]),/**
             * The array of children of this container.
             * @ignore
             */
this.children=[],/**
             * The property of the child object that should be used to sort on <br>
             * value : "x", "y", "z"
             * @public
             * @type String
             * @default me.game.sortOn
             * @name sortOn
             * @memberOf me.Container
             */
this.sortOn=me.game.sortOn,/**
             * Specify if the children list should be automatically sorted when adding a new child
             * @public
             * @type Boolean
             * @default true
             * @name autoSort
             * @memberOf me.Container
             */
this.autoSort=!0,this.transform.identity(),/**
             * Used by the debug panel plugin
             * @ignore
             */
this.drawCount=0,/**
             * The bounds that contains all its children
             * @public
             * @type me.Rect
             * @name childBounds
             * @memberOf me.Container
             */
this.childBounds=this.getBounds().clone()},/**
         * Add a child to the container <br>
         * if auto-sort is disable, the object will be appended at the bottom of the list
         * @name addChild
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         * @param {number} [z] forces the z index of the child to the specified value
         * @return {me.Renderable} the added child
         */
addChild:function(a,b){
// only allocate a GUID if the object has no previous ancestor
// (e.g. move one child from one container to another)
// allocated a GUID value (use child.id as based index if defined)
// change the child z-index if one is specified
// specify a z property to infinity if not defined
return"undefined"!=typeof a.ancestor?a.ancestor.removeChildNow(a):a.isRenderable&&(a.GUID=me.utils.createGUID(a.id)),"number"==typeof b&&(a.z=b),("undefined"==typeof a.z||a.z!==a.z)&&(a.z=this.children.length),a.ancestor=this,this.children.push(a),this.autoSort===!0&&this.sort(),"function"==typeof a.onActivateEvent&&a.onActivateEvent(),a},/**
         * Add a child to the container at the specified index<br>
         * (the list won't be sorted after insertion)
         * @name addChildAt
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         * @param {Number} index
         * @return {me.Renderable} the added child
         */
addChildAt:function(a,b){if(b>=0&&b<this.children.length)
// only allocate a GUID if the object has no previous ancestor
// (e.g. move one child from one container to another)
// allocated a GUID value
return"undefined"!=typeof a.ancestor?a.ancestor.removeChildNow(a):a.isRenderable&&(a.GUID=me.utils.createGUID()),a.ancestor=this,this.children.splice(b,0,a),"function"==typeof a.onActivateEvent&&a.onActivateEvent(),a;throw new me.Container.Error("Index ("+b+") Out Of Bounds for addChildAt()")},/**
         * Swaps the position (z-index) of 2 children
         * @name swapChildren
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         * @param {me.Renderable} child2
         */
swapChildren:function(a,b){var c=this.getChildIndex(a),d=this.getChildIndex(b);if(-1===c||-1===d)throw new me.Container.Error(a+" Both the supplied childs must be a child of the caller "+this);
// swap z index
var e=a.z;a.z=b.z,b.z=e,
// swap the positions..
this.children[c]=b,this.children[d]=a},/**
         * Returns the Child at the specified index
         * @name getChildAt
         * @memberOf me.Container
         * @function
         * @param {Number} index
         */
getChildAt:function(a){if(a>=0&&a<this.children.length)return this.children[a];throw new me.Container.Error("Index ("+a+") Out Of Bounds for getChildAt()")},/**
         * Returns the index of the Child
         * @name getChildAt
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         */
getChildIndex:function(a){return this.children.indexOf(a)},/**
         * Returns true if contains the specified Child
         * @name hasChild
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         * @return {Boolean}
         */
hasChild:function(a){return this===a.ancestor},/**
         * return the child corresponding to the given property and value.<br>
         * note : avoid calling this function every frame since
         * it parses the whole object tree each time
         * @name getChildByProp
         * @memberOf me.Container
         * @public
         * @function
         * @param {String} prop Property name
         * @param {String|RegExp|Number|Boolean} value Value of the property
         * @return {me.Renderable[]} Array of childs
         * @example
         * // get the first child object called "mainPlayer" in a specific container :
         * var ent = myContainer.getChildByProp("name", "mainPlayer");
         *
         * // or query the whole world :
         * var ent = me.game.world.getChildByProp("name", "mainPlayer");
         *
         * // partial property matches are also allowed by using a RegExp.
         * // the following matches "redCOIN", "bluecoin", "bagOfCoins", etc :
         * var allCoins = me.game.world.getChildByProp("name", /coin/i);
         *
         * // searching for numbers or other data types :
         * var zIndex10 = me.game.world.getChildByProp("z", 10);
         * var inViewport = me.game.world.getChildByProp("inViewport", true);
         */
getChildByProp:function(a,b){function c(a,c){var e=a[c];b instanceof RegExp&&"string"==typeof e?b.test(e)&&d.push(a):e===b&&d.push(a)}for(var d=[],e=this.children.length-1;e>=0;e--){var f=this.children[e];c(f,a),f instanceof me.Container&&(d=d.concat(f.getChildByProp(a,b)))}return d},/**
         * returns the list of childs with the specified name<br>
         * as defined in Tiled (Name field of the Object Properties)<br>
         * note : avoid calling this function every frame since
         * it parses the whole object list each time
         * @name getChildByName
         * @memberOf me.Container
         * @public
         * @function
         * @param {String|RegExp|Number|Boolean} name entity name
         * @return {me.Renderable[]} Array of children
         */
getChildByName:function(a){return this.getChildByProp("name",a)},/**
         * return the child corresponding to the specified GUID<br>
         * note : avoid calling this function every frame since
         * it parses the whole object list each time
         * @name getChildByGUID
         * @memberOf me.Container
         * @public
         * @function
         * @param {String|RegExp|Number|Boolean} GUID entity GUID
         * @return {me.Renderable} corresponding child or null
         */
getChildByGUID:function(a){var b=this.getChildByProp("GUID",a);return b.length>0?b[0]:null},/**
         * resizes the child bounds rectangle, based on children bounds.
         * @name updateChildBounds
         * @memberOf me.Container
         * @function
         * @return {me.Rect} updated child bounds
         */
updateChildBounds:function(){this.childBounds.pos.set(1/0,1/0),this.childBounds.resize(-(1/0),-(1/0));for(var a,b,c=this.children.length;c--,b=this.children[c];)b.isRenderable&&(a=b instanceof me.Container?b.childBounds:b.getBounds(),null!==a&&this.childBounds.union(a));return this.childBounds},/**
         * update the renderable's bounding rect (private)
         * @private
         * @name updateBoundsPos
         * @memberOf me.Container
         * @function
         */
updateBoundsPos:function(a,b){me.Renderable.prototype.updateBoundsPos.apply(this,[a,b]),
// Update container's absolute position
this._absPos.set(a,b),this.ancestor&&this._absPos.add(this.ancestor._absPos);
// Notify children that the parent's position has changed
for(var c,d=this.children.length;d--,c=this.children[d];)c.isRenderable&&c.updateBoundsPos(c.pos.x,c.pos.y);return this._bounds},/**
         * Invokes the removeChildNow in a defer, to ensure the child is removed safely after the update & draw stack has completed
         * @name removeChild
         * @memberOf me.Container
         * @public
         * @function
         * @param {me.Renderable} child
         * @param {Boolean} [keepalive=False] True to prevent calling child.destroy()
         */
removeChild:function(b,c){b.ancestor&&a.defer(this,b,c)},/**
         * Removes (and optionally destroys) a child from the container.<br>
         * (removal is immediate and unconditional)<br>
         * Never use keepalive=true with objects from {@link me.pool}. Doing so will create a memory leak.
         * @name removeChildNow
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         * @param {Boolean} [keepalive=False] True to prevent calling child.destroy()
         */
removeChildNow:function(a,b){if(!this.hasChild(a))throw new me.Container.Error(a+" The supplied child must be a child of the caller "+this);a.ancestor=void 0,"function"==typeof a.onDeactivateEvent&&a.onDeactivateEvent(),b||("function"==typeof a.destroy&&a.destroy(),me.pool.push(a)),this.children.splice(this.getChildIndex(a),1)},/**
         * Automatically set the specified property of all childs to the given value
         * @name setChildsProperty
         * @memberOf me.Container
         * @function
         * @param {String} property property name
         * @param {Object} value property value
         * @param {Boolean} [recursive=false] recursively apply the value to child containers if true
         */
setChildsProperty:function(a,b,c){for(var d=this.children.length;d>=0;d--){var e=this.children[d];c===!0&&e instanceof me.Container&&e.setChildsProperty(a,b,c),e[a]=b}},/**
         * Move the child in the group one step forward (z depth).
         * @name moveUp
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         */
moveUp:function(a){var b=this.getChildIndex(a);b-1>=0&&
// note : we use an inverted loop
this.swapChildren(a,this.getChildAt(b-1))},/**
         * Move the child in the group one step backward (z depth).
         * @name moveDown
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         */
moveDown:function(a){var b=this.getChildIndex(a);b+1<this.children.length&&
// note : we use an inverted loop
this.swapChildren(a,this.getChildAt(b+1))},/**
         * Move the specified child to the top(z depth).
         * @name moveToTop
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         */
moveToTop:function(a){var b=this.getChildIndex(a);b>0&&(
// note : we use an inverted loop
this.children.splice(0,0,this.children.splice(b,1)[0]),
// increment our child z value based on the previous child depth
a.z=this.children[1].z+1)},/**
         * Move the specified child the bottom (z depth).
         * @name moveToBottom
         * @memberOf me.Container
         * @function
         * @param {me.Renderable} child
         */
moveToBottom:function(a){var b=this.getChildIndex(a);b<this.children.length-1&&(
// note : we use an inverted loop
this.children.splice(this.children.length-1,0,this.children.splice(b,1)[0]),
// increment our child z value based on the next child depth
a.z=this.children[this.children.length-2].z-1)},/**
         * Manually trigger the sort of all the childs in the container</p>
         * @name sort
         * @memberOf me.Container
         * @public
         * @function
         * @param {Boolean} [recursive=false] recursively sort all containers if true
         */
sort:function(a){
// do nothing if there is already a pending sort
if(!this.pendingSort){if(a===!0)
// trigger other child container sort function (if any)
for(var b,c=this.children.length;c--,b=this.children[c];)b instanceof me.Container&&
// note : this will generate one defered sorting function
// for each existing containe
b.sort(a);/** @ignore */
this.pendingSort=function(a){
// sort everything in this container
a.children.sort(a["_sort"+a.sortOn.toUpperCase()]),
// clear the defer id
a.pendingSort=null,
// make sure we redraw everything
me.game.repaint()}.defer(this,this)}},/**
         * Z Sorting function
         * @ignore
         */
_sortZ:function(a,b){return b.z-a.z},/**
         * X Sorting function
         * @ignore
         */
_sortX:function(a,b){/* ? */
var c=b.z-a.z;return c?c:(b.pos&&b.pos.x)-(a.pos&&a.pos.x)||0},/**
         * Y Sorting function
         * @ignore
         */
_sortY:function(a,b){var c=b.z-a.z;return c?c:(b.pos&&b.pos.y)-(a.pos&&a.pos.y)||0},/**
         * Destroy function<br>
         * @ignore
         */
destroy:function(){
// cancel any sort operation
this.pendingSort&&(clearTimeout(this.pendingSort),this.pendingSort=null);
// delete all children
for(var a,b=this.children.length;b--,a=this.children[b];)
// don't remove it if a persistent object
a.isPersistent||this.removeChildNow(a);
// reset the transformation matrix
this.transform.identity()},/**
         * @ignore
         */
update:function(a){me.Renderable.prototype.update.apply(this,[a]);var c=!1,d=!1,e=me.state.isPaused(),f=me.game.viewport;
// Update container's absolute position
this._absPos.setV(this.pos),this.ancestor&&this._absPos.add(this.ancestor._absPos);for(var g,h=this.children.length;h--,g=this.children[h];)(!e||g.updateWhenPaused)&&(g.isRenderable?(d=b>0||g.floating,d&&b++,g.inViewport=d||f.isVisible(g.getBounds()),c=(g.inViewport||g.alwaysUpdate)&&g.update(a)||c,g._absPos.setV(this._absPos).add(g.pos),b>0&&b--):
// just directly call update() for non renderable object
c=g.update(a)||c);return c},/**
         * @ignore
         */
draw:function(a,c){var d=me.game.viewport,e=!1;this.drawCount=0;var f=!1;this.transform.isIdentity()||(f=!0,a.save(),a.transform(this.transform));
// apply the group opacity
var g=a.globalAlpha();a.setGlobalAlpha(g*this.getOpacity()),
// translate to the container position
a.translate(this.pos.x,this.pos.y);for(var h,i=this.children.length;i--,h=this.children[i];)e=b>0||h.floating,(h.inViewport||e)&&h.isRenderable&&(e&&b++,1===b&&a.translate(d.screenX-this.pos.x,d.screenY-this.pos.y),h.draw(a,c),1===b&&a.translate(this.pos.x-d.screenX,this.pos.y-d.screenY),e&&b--,this.drawCount++);
// restore the group opacity
a.setGlobalAlpha(g),
// restore the container position
a.translate(-this.pos.x,-this.pos.y),f&&
// restore context
a.restore()}}),/**
     * Base class for ObjectContainer exception handling.
     * @name Error
     * @class
     * @memberOf me.Container
     * @constructor
     * @param {String} msg Error message.
     */
me.Container.Error=me.Renderable.Error.extend({init:function(a){me.Renderable.Error.prototype.init.apply(this,[a]),this.name="me.Container.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a Generic Object Entity<br>
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {Number} x the x coordinates of the entity object
     * @param {Number} y the y coordinates of the entity object
     * @param {Object} settings Entity properties, to be defined through Tiled or when calling the entity constructor
     * <img src="images/object_properties.png"/>
     * @param {String} [settings.name] object entity name
     * @param {String} [settings.id] object unique IDs
     * @param {Image|String} [settings.image] resource name of a spritesheet to use for the entity renderable component
     * @param {Number} [settings.framewidth] width of a single frame in the given spritesheet
     * @param {Number} [settings.frameheight] height of a single frame in the given spritesheet
     * @param {String} [settings.type] object type
     * @param {Number} [settings.collisionMask] Mask collision detection for this object
     * @param {{me.Rect[]|me.Polygon[]|me.Line[]|me.Ellipse[]}} [settings.shapes] the initial list of collision shapes (usually populated through Tiled)
     */
me.Entity=me.Renderable.extend(/** @scope me.Entity.prototype */
{/** @ignore */
init:function(a,b,c){
// ensure mandatory properties are defined
if(/**
             * The entity renderable object (if defined)
             * @public
             * @type me.Renderable
             * @name renderable
             * @memberOf me.Entity
             */
this.renderable=null,"number"!=typeof c.width||"number"!=typeof c.height)throw new me.Entity.Error("height and width properties are mandatory when passing settings parameters to an object entity");
// call the super constructor
me.Renderable.prototype.init.apply(this,[a,b,c.width,c.height]),c.image&&(this.renderable=new me.AnimationSheet(0,0,{image:c.image,framewidth:~~(c.framewidth||c.width),frameheight:~~(c.frameheight||c.height),spacing:~~c.spacing,margin:~~c.margin})),/**
             * Entity name<br>
             * as defined in the Tiled Object Properties
             * @public
             * @type String
             * @name name
             * @memberOf me.Entity
             */
this.name=c.name||"",/**
             * object type (as defined in Tiled)
             * @public
             * @type String
             * @name type
             * @memberOf me.Entity
             */
this.type=c.type||"",/**
             * object unique ID (as defined in Tiled)
             * @public
             * @type Number
             * @name id
             * @memberOf me.Entity
             */
this.id=c.id||"",/**
             * dead/living state of the entity<br>
             * default value : true
             * @public
             * @type Boolean
             * @name alive
             * @memberOf me.Entity
             */
this.alive=!0;/**
             * the entity body object
             * @public
             * @type me.Body
             * @name body
             * @memberOf me.Entity
             */
// initialize the default body
var d=Array.isArray(c.shapes)?c.shapes:[new me.Rect(0,0,this.width,this.height)];this.body?this.body.init(this,d):this.body=new me.Body(this,d);
// ensure the entity bounds and pos are up-to-date
var e=this.body.updateBounds();
// set the  collision mask if defined
if(
// resize the entity if required
0===this.width&&0===this.height&&this.resize(e.width,e.height),
// set the  collision mask if defined
"undefined"!=typeof c.collisionMask&&this.body.setCollisionMask(c.collisionMask),"undefined"!=typeof c.collisionType){if("undefined"==typeof me.collision.types[c.collisionType])throw new me.Entity.Error("Invalid value for the collisionType property");this.body.collisionType=me.collision.types[c.collisionType]}},/**
         * return the distance to the specified entity
         * @name distanceTo
         * @memberOf me.Entity
         * @function
         * @param {me.Entity} entity Entity
         * @return {Number} distance
         */
distanceTo:function(a){var b=this.getBounds(),c=a.getBounds(),d=b.pos.x+b.width/2-(c.pos.x+c.width/2),e=b.pos.y+b.height/2-(c.pos.y+c.height/2);return Math.sqrt(d*d+e*e)},/**
         * return the distance to the specified point
         * @name distanceToPoint
         * @memberOf me.Entity
         * @function
         * @param {me.Vector2d} vector vector
         * @return {Number} distance
         */
distanceToPoint:function(a){var b=this.getBounds(),c=b.pos.x+b.width/2-a.x,d=b.pos.y+b.height/2-a.y;return Math.sqrt(c*c+d*d)},/**
         * return the angle to the specified entity
         * @name angleTo
         * @memberOf me.Entity
         * @function
         * @param {me.Entity} entity Entity
         * @return {Number} angle in radians
         */
angleTo:function(a){var b=this.getBounds(),c=a.getBounds(),d=c.pos.x+c.width/2-(b.pos.x+b.width/2),e=c.pos.y+c.height/2-(b.pos.y+b.height/2);return Math.atan2(e,d)},/**
         * return the angle to the specified point
         * @name angleToPoint
         * @memberOf me.Entity
         * @function
         * @param {me.Vector2d} vector vector
         * @return {Number} angle in radians
         */
angleToPoint:function(a){var b=this.getBounds(),c=a.x-(b.pos.x+b.width/2),d=a.y-(b.pos.y+b.height/2);return Math.atan2(d,c)},/**
         * update the bounding rect dimensions
         * @private
         * @name resizeBounds
         * @memberOf me.Entity
         * @function
         */
resizeBounds:function(a,b){this._bounds.resize(a,b)},/** @ignore */
update:function(a){return this.renderable?this.renderable.update(a):me.Renderable.prototype.update.apply(this,[a])},/**
         * update the bounds position when the position is modified
         * @private
         * @name updateBoundsPos
         * @memberOf me.Entity
         * @function
         */
updateBoundsPos:function(a,b){var c=this.body.pos;return me.Renderable.prototype.updateBoundsPos.apply(this,[a+c.x,b+c.y]),this._bounds},/**
         * update the bounds position when the body is modified
         * @private
         * @name onBodyUpdate
         * @memberOf me.Entity
         * @function
         */
onBodyUpdate:function(a,b,c){this._bounds.pos.setV(this.pos).add(a),
// XXX: This is called from the constructor, before it gets an ancestor
this.ancestor&&this._bounds.pos.add(this.ancestor._absPos),this._bounds.resize(b,c)},/**
         * object draw<br>
         * not to be called by the end user<br>
         * called by the game manager on each game loop
         * @name draw
         * @memberOf me.Entity
         * @function
         * @protected
         * @param {Context2d} context 2d Context on which draw our object
         **/
draw:function(a){
// draw the sprite if defined
if(this.renderable){
// translate the renderable position (relative to the entity)
// and keeps it in the entity defined bounds
var b=~~(.5+this.pos.x+this.body.pos.x+this.anchorPoint.x*(this.body.width-this.renderable.width)),c=~~(.5+this.pos.y+this.body.pos.y+this.anchorPoint.y*(this.body.height-this.renderable.height));a.translate(b,c),this.renderable.draw(a),a.translate(-b,-c)}},/**
         * Destroy function<br>
         * @ignore
         */
destroy:function(){
// free some property objects
this.renderable&&(this.renderable.destroy.apply(this.renderable,arguments),this.renderable=null),this.body.destroy.apply(this.body,arguments),this.body=null},/**
         * OnDestroy Notification function<br>
         * Called by engine before deleting the object
         * @name onDestroyEvent
         * @memberOf me.Entity
         * @function
         */
onDestroyEvent:function(){},/**
         * onCollision callback<br>
         * triggered in case of collision, when this entity body is being "touched" by another one<br>
         * @name onCollision
         * @memberOf me.Entity
         * @function
         * @param {me.collision.ResponseObject} response the collision response object
         * @param {me.Entity} other the other entity touching this one (a reference to response.a or response.b)
         * @return {Boolean} true if the object should respond to the collision (its position and velocity will be corrected)
         */
onCollision:function(){return!1}}),/*
     * A Collectable entity
     */
/**
     * @class
     * @extends me.Entity
     * @memberOf me
     * @constructor
     * @param {Number} x the x coordinates of the entity object
     * @param {Number} y the y coordinates of the entity object
     * @param {Object} settings See {@link me.Entity}
     */
me.CollectableEntity=me.Entity.extend(/** @scope me.CollectableEntity.prototype */
{/** @ignore */
init:function(a,b,c){
// call the super constructor
me.Entity.prototype.init.apply(this,[a,b,c]),this.body.collisionType=me.collision.types.COLLECTABLE_OBJECT}}),/*
     * A level entity
     */
/**
     * @class
     * @extends me.Entity
     * @memberOf me
     * @constructor
     * @param {Number} x the x coordinates of the object
     * @param {Number} y the y coordinates of the object
     * @param {Object} settings See {@link me.Entity}
     * @example
     * me.game.world.addChild(new me.LevelEntity(
     *     x, y, {
     *         "duration" : 250, // Fade duration (in ms)
     *         "color" : "#000", // Fade color
     *         "to" : "mymap2"   // TMX level to load
     *     }
     * ));
     */
me.LevelEntity=me.Entity.extend(/** @scope me.LevelEntity.prototype */
{/** @ignore */
init:function(a,b,c){me.Entity.prototype.init.apply(this,[a,b,c]),this.nextlevel=c.to,this.fade=c.fade,this.duration=c.duration,this.fading=!1,this.name="levelEntity",
// a temp variable
this.gotolevel=c.to,this.body.collisionType=me.collision.types.ACTION_OBJECT},/**
         * @ignore
         */
onFadeComplete:function(){me.levelDirector.loadLevel(this.gotolevel),me.game.viewport.fadeOut(this.fade,this.duration)},/**
         * go to the specified level
         * @name goTo
         * @memberOf me.LevelEntity
         * @function
         * @param {String} [level=this.nextlevel] name of the level to load
         * @protected
         */
goTo:function(a){this.gotolevel=a||this.nextlevel,
// load a level
//console.log("going to : ", to);
this.fade&&this.duration?this.fading||(this.fading=!0,me.game.viewport.fadeIn(this.fade,this.duration,this.onFadeComplete.bind(this))):me.levelDirector.loadLevel(this.gotolevel)},/** @ignore */
onCollision:function(){return"levelEntity"===this.name&&this.goTo(),!1}}),/**
     * Base class for Entity exception handling.
     * @name Error
     * @class
     * @memberOf me.Entity
     * @constructor
     * @param {String} msg Error message.
     */
me.Entity.Error=me.Renderable.Error.extend({init:function(a){me.Renderable.Error.prototype.init.apply(this,[a]),this.name="me.Entity.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Screens objects & State machine
 *
 */
function(){/**
     * A class skeleton for "Screen" Object <br>
     * every "screen" object (title screen, credits, ingame, etc...) to be managed <br>
     * through the state manager must inherit from this base class.
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @see me.state
     */
me.ScreenObject=Object.extend(/** @scope me.ScreenObject.prototype */
{/** @ignore */
init:function(){},/**
         * Object reset function
         * @ignore
         */
reset:function(){
// reset the game manager
me.game.reset(),
// call the onReset Function
this.onResetEvent.apply(this,arguments)},/**
         * destroy function
         * @ignore
         */
destroy:function(){
// notify the object
this.onDestroyEvent.apply(this,arguments)},/**
         * onResetEvent function<br>
         * called by the state manager when reseting the object<br>
         * this is typically where you will load a level, etc...
         * to be extended
         * @name onResetEvent
         * @memberOf me.ScreenObject
         * @function
         * @param {} [arguments...] optional arguments passed when switching state
         * @see me.state#change
         */
onResetEvent:function(){},/**
         * onDestroyEvent function<br>
         * called by the state manager before switching to another state<br>
         * @name onDestroyEvent
         * @memberOf me.ScreenObject
         * @function
         */
onDestroyEvent:function(){}}),
// based on the requestAnimationFrame polyfill by Erik Möller
function(){var a=0,b=1e3/60,c=me.agent.prefixed("requestAnimationFrame"),d=me.agent.prefixed("cancelAnimationFrame")||me.agent.prefixed("cancelRequestAnimationFrame");c&&d||(c=function(c){var d=window.performance.now(),e=Math.max(0,b-(d-a)),f=window.setTimeout(function(){c(d+e)},e);return a=d+e,f},d=function(a){window.clearTimeout(a)}),
// put back in global namespace
window.requestAnimationFrame=c,window.cancelAnimationFrame=d}(),/**
     * a State Manager (state machine)<p>
     * There is no constructor function for me.state.
     * @namespace me.state
     * @memberOf me
     */
me.state=function(){/**
         * @ignore
         */
function a(){
// ensure nothing is running first and in valid state
-1===i&&-1!==h&&(
// reset the timer
me.timer.reset(),
// start the main loop
i=window.requestAnimationFrame(d))}/**
         * Resume the game loop after a pause.
         * @ignore
         */
function b(){
// ensure game is actually paused and in valid state
j&&-1!==h&&(
// reset the timer
me.timer.reset(),j=!1)}/**
         * Pause the loop for most screen objects.
         * @ignore
         */
function c(){
// Set the paused boolean to stop updates on (most) entities
j=!0}/**
         * this is only called when using requestAnimFrame stuff
         * @param {Number} time current timestamp in milliseconds
         * @ignore
         */
function d(a){
// update all game objects
me.game.update(a),
// render all game objects
me.game.draw(),
// schedule the next frame update
-1!==i&&(i=window.requestAnimationFrame(d))}/**
         * stop the SO main loop
         * @ignore
         */
function e(){
// cancel any previous animationRequestFrame
window.cancelAnimationFrame(i),i=-1}/**
         * start the SO main loop
         * @ignore
         */
function f(b){
// clear previous interval if any
e(),
// call the screen object destroy method
k[h]&&
// just notify the object
k[h].screen.destroy(),k[b]&&(h=b,k[h].screen.reset.apply(k[h].screen,n),a(),m&&m(),me.game.repaint())}
// hold public stuff in our singleton
var g={},h=-1,i=-1,j=!1,k={},l={color:"",duration:0},m=null,n=null,o=0;
// return our object
/*
         * PUBLIC STUFF
         */
/**
         * default state ID for Loading Screen
         * @constant
         * @name LOADING
         * @memberOf me.state
         */
/**
         * default state ID for Menu Screen
         * @constant
         * @name MENU
         * @memberOf me.state
         */
/**
         * default state ID for "Ready" Screen
         * @constant
         * @name READY
         * @memberOf me.state
         */
/**
         * default state ID for Play Screen
         * @constant
         * @name PLAY
         * @memberOf me.state
         */
/**
         * default state ID for Game Over Screen
         * @constant
         * @name GAMEOVER
         * @memberOf me.state
         */
/**
         * default state ID for Game End Screen
         * @constant
         * @name GAME_END
         * @memberOf me.state
         */
/**
         * default state ID for High Score Screen
         * @constant
         * @name SCORE
         * @memberOf me.state
         */
/**
         * default state ID for Credits Screen
         * @constant
         * @name CREDITS
         * @memberOf me.state
         */
/**
         * default state ID for Settings Screen
         * @constant
         * @name SETTINGS
         * @memberOf me.state
         */
/**
         * default state ID for user defined constants<br>
         * @constant
         * @name USER
         * @memberOf me.state
         * @example
         * var STATE_INFO = me.state.USER + 0;
         * var STATE_WARN = me.state.USER + 1;
         * var STATE_ERROR = me.state.USER + 2;
         * var STATE_CUTSCENE = me.state.USER + 3;
         */
/**
         * onPause callback
         * @callback
         * @name onPause
         * @memberOf me.state
         */
/**
         * onResume callback
         * @callback
         * @name onResume
         * @memberOf me.state
         */
/**
         * onStop callback
         * @callback
         * @name onStop
         * @memberOf me.state
         */
/**
         * onRestart callback
         * @callback
         * @name onRestart
         * @memberOf me.state
         */
/**
         * @ignore
         */
/**
         * Stop the current screen object.
         * @name stop
         * @memberOf me.state
         * @public
         * @function
         * @param {Boolean} pauseTrack pause current track on screen stop.
         */
/**
         * pause the current screen object
         * @name pause
         * @memberOf me.state
         * @public
         * @function
         * @param {Boolean} pauseTrack pause current track on screen pause
         */
/**
         * Restart the screen object from a full stop.
         * @name restart
         * @memberOf me.state
         * @public
         * @function
         * @param {Boolean} resumeTrack resume current track on screen resume
         */
/**
         * resume the screen object
         * @name resume
         * @memberOf me.state
         * @public
         * @function
         * @param {Boolean} resumeTrack resume current track on screen resume
         */
/**
         * return the running state of the state manager
         * @name isRunning
         * @memberOf me.state
         * @public
         * @function
         * @return {Boolean} true if a "process is running"
         */
/**
         * Return the pause state of the state manager
         * @name isPaused
         * @memberOf me.state
         * @public
         * @function
         * @return {Boolean} true if the game is paused
         */
/**
         * associate the specified state with a screen object
         * @name set
         * @memberOf me.state
         * @public
         * @function
         * @param {Number} state State ID (see constants)
         * @param {me.ScreenObject} so Instantiated ScreenObject to associate
         * with state ID
         * @example
         * var MenuButton = me.GUI_Object.extend({
         *     "onClick" : function () {
         *         // Change to the PLAY state when the button is clicked
         *         me.state.change(me.state.PLAY);
         *         return true;
         *     }
         * });
         *
         * var MenuScreen = me.ScreenObject.extend({
         *     onResetEvent: function() {
         *         // Load background image
         *         me.game.world.addChild(
         *             new me.ImageLayer(0, 0, {
         *                 image : "bg",
         *                 z: 0 // z-index
         *             }
         *         );
         *
         *         // Add a button
         *         me.game.world.addChild(
         *             new MenuButton(350, 200, { "image" : "start" }),
         *             1 // z-index
         *         );
         *
         *         // Play music
         *         me.audio.playTrack("menu");
         *     },
         *
         *     "onDestroyEvent" : function () {
         *         // Stop music
         *         me.audio.stopTrack();
         *     }
         * });
         *
         * me.state.set(me.state.MENU, new MenuScreen());
         */
/**
         * return a reference to the current screen object<br>
         * useful to call a object specific method
         * @name current
         * @memberOf me.state
         * @public
         * @function
         * @return {me.ScreenObject}
         */
/**
         * specify a global transition effect
         * @name transition
         * @memberOf me.state
         * @public
         * @function
         * @param {String} effect (only "fade" is supported for now)
         * @param {me.Color|String} color a CSS color value
         * @param {Number} [duration=1000] expressed in milliseconds
         */
/**
         * enable/disable transition for a specific state (by default enabled for all)
         * @name setTransition
         * @memberOf me.state
         * @public
         * @function
         * @param {Number} state State ID (see constants)
         * @param {Boolean} enable
         */
/**
         * change the game/app state
         * @name change
         * @memberOf me.state
         * @public
         * @function
         * @param {Number} state State ID (see constants)
         * @param {} [arguments...] extra arguments to be passed to the reset functions
         * @example
         * // The onResetEvent method on the play screen will receive two args:
         * // "level_1" and the number 3
         * me.state.change(me.state.PLAY, "level_1", 3);
         */
/**
         * return true if the specified state is the current one
         * @name isCurrent
         * @memberOf me.state
         * @public
         * @function
         * @param {Number} state State ID (see constants)
         */
return g.LOADING=0,g.MENU=1,g.READY=2,g.PLAY=3,g.GAMEOVER=4,g.GAME_END=5,g.SCORE=6,g.CREDITS=7,g.SETTINGS=8,g.USER=100,g.onPause=null,g.onResume=null,g.onStop=null,g.onRestart=null,g.init=function(){
// set the embedded loading screen
g.set(g.LOADING,new me.DefaultLoadingScreen)},g.stop=function(a){
// only stop when we are not loading stuff
h!==g.LOADING&&g.isRunning()&&(
// stop the main loop
e(),
// current music stop
a===!0&&me.audio.pauseTrack(),o=window.performance.now(),me.event.publish(me.event.STATE_STOP),"function"==typeof g.onStop&&g.onStop())},g.pause=function(a){
// only pause when we are not loading stuff
h===g.LOADING||g.isPaused()||(
// stop the main loop
c(),
// current music stop
a===!0&&me.audio.pauseTrack(),o=window.performance.now(),me.event.publish(me.event.STATE_PAUSE),"function"==typeof g.onPause&&g.onPause())},g.restart=function(b){g.isRunning()||(
// restart the main loop
a(),
// current music stop
b===!0&&me.audio.resumeTrack(),o=window.performance.now()-o,me.game.repaint(),me.event.publish(me.event.STATE_RESTART,[o]),"function"==typeof g.onRestart&&g.onRestart())},g.resume=function(a){g.isPaused()&&(
// resume the main loop
b(),
// current music stop
a===!0&&me.audio.resumeTrack(),o=window.performance.now()-o,me.event.publish(me.event.STATE_RESUME,[o]),"function"==typeof g.onResume&&g.onResume())},g.isRunning=function(){return-1!==i},g.isPaused=function(){return j},g.set=function(a,b){k[a]={},k[a].screen=b,k[a].transition=!0},g.current=function(){return k[h].screen},g.transition=function(a,b,c){"fade"===a&&(l.color=b,l.duration=c)},g.setTransition=function(a,b){k[a].transition=b},g.change=function(a){
// Protect against undefined ScreenObject
if("undefined"==typeof k[a])throw new me.Error("Undefined ScreenObject for state '"+a+"'");n=null,arguments.length>1&&(n=Array.prototype.slice.call(arguments,1)),l.duration&&k[a].transition?(m=function(){me.game.viewport.fadeOut(l.color,l.duration)},me.game.viewport.fadeIn(l.color,l.duration,function(){f.defer(this,a)})):f.defer(this,a)},g.isCurrent=function(a){return h===a},g}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
function(){
// a basic progress bar object
var a=me.Renderable.extend({init:function(a,b,c){me.Renderable.prototype.init.apply(this,[a.x,a.y,b,c]),
// flag to know if we need to refresh the display
this.invalidate=!1,
// default progress bar height
this.barHeight=4,
// current progress
this.progress=0},
// make sure the screen is refreshed every frame
onProgressUpdate:function(a){this.progress=~~(a*this.width),this.invalidate=!0},
// make sure the screen is refreshed every frame
update:function(){
// clear the flag
return this.invalidate===!0?(this.invalidate=!1,!0):!1},
// draw function
draw:function(a){
// draw the progress bar
a.setColor("black"),a.fillRect(0,this.height/2-this.barHeight/2,this.width,this.barHeight),a.setColor("#55aa00"),a.fillRect(2,this.height/2-this.barHeight/2,this.progress,this.barHeight),a.setColor("white")}}),b=me.Renderable.extend({init:function(a,b,c){me.Renderable.prototype.init.apply(this,[b,c,100,85]),this.iconCanvas=a;var d=me.video.renderer.getContext2d(this.iconCanvas);d.translate(this.pos.x,this.pos.y),d.beginPath(),d.moveTo(.7,48.9),d.bezierCurveTo(10.8,68.9,38.4,75.8,62.2,64.5),d.bezierCurveTo(86.1,53.1,97.2,27.7,87,7.7),d.lineTo(87,7.7),d.bezierCurveTo(89.9,15.4,73.9,30.2,50.5,41.4),d.bezierCurveTo(27.1,52.5,5.2,55.8,.7,48.9),d.lineTo(.7,48.9),d.lineTo(.7,48.9),d.closePath(),d.fillStyle="rgb(255, 255, 255)",d.fill(),d.beginPath(),d.moveTo(84,7),d.bezierCurveTo(87.6,14.7,72.5,30.2,50.2,41.6),d.bezierCurveTo(27.9,53,6.9,55.9,3.2,48.2),d.bezierCurveTo(-.5,40.4,14.6,24.9,36.9,13.5),d.bezierCurveTo(59.2,2.2,80.3,-.8,84,7),d.lineTo(84,7),d.closePath(),d.lineWidth=5.3,d.strokeStyle="rgb(255, 255, 255)",d.lineJoin="miter",d.miterLimit=4,d.stroke()},draw:function(a){a.drawImage(this.iconCanvas,0,0)}}),c=me.Renderable.extend({
// constructor
init:function(a,b){me.Renderable.prototype.init.apply(this,[0,0,a,b]),this.logo1=new me.Font("century gothic",32,"white","middle"),this.logo2=new me.Font("century gothic",32,"#55aa00","middle"),this.logo2.bold(),this.logo1.textBaseline=this.logo2.textBaseline="alphabetic"},draw:function(a){
// measure the logo size
var b=this.logo1.measureText(a,"melon").width,c=(this.width-b-this.logo2.measureText(a,"JS").width)/2,d=this.height/2+this.logo2.measureText(a,"melon").height;
// draw the melonJS string
this.logo1.draw(a,"melon",c,d),c+=b,this.logo2.draw(a,"JS",c,d)}});/**
     * a default loading screen
     * @memberOf me
     * @ignore
     * @constructor
     */
me.DefaultLoadingScreen=me.ScreenObject.extend({
// call when the loader is resetted
onResetEvent:function(){me.game.reset(),
// background color
me.game.world.addChild(new me.ColorLayer("background","#202020",0));
// progress bar
var d=new a(new me.Vector2d,me.video.renderer.getWidth(),me.video.renderer.getHeight());this.loaderHdlr=me.event.subscribe(me.event.LOADER_PROGRESS,d.onProgressUpdate.bind(d)),this.resizeHdlr=me.event.subscribe(me.event.VIEWPORT_ONRESIZE,d.resize.bind(d)),me.game.world.addChild(d,1),this.iconCanvas=me.video.createCanvas(me.game.viewport.width,me.game.viewport.height,!1);
// melonJS text & logo
var e=new b(this.iconCanvas,(me.video.renderer.getWidth()-100)/2,me.video.renderer.getHeight()/2-d.barHeight/2-90);me.game.world.addChild(e,1),me.game.world.addChild(new c(me.video.renderer.getWidth(),me.video.renderer.getHeight()),1)},
// destroy object at end of loading
onDestroyEvent:function(){
// cancel the callback
me.event.unsubscribe(this.loaderHdlr),me.event.unsubscribe(this.resizeHdlr),this.loaderHdlr=this.resizeHdlr=null}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a small class to manage loading of stuff and manage resources
     * There is no constructor function for me.input.
     * @namespace me.loader
     * @memberOf me
     */
me.loader=function(){/**
         * check the loading status
         * @ignore
         */
function a(){l===k?
// wait 1/2s and execute callback (cheap workaround to ensure everything is loaded)
f.onload?(
// make sure we clear the timer
clearTimeout(m),
// trigger the onload callback
setTimeout(function(){f.onload(),me.event.publish(me.event.LOADER_COMPLETE)},300)):console.error("no load callback defined"):m=setTimeout(a,100)}/**
         * load Images
         * @example
         * preloadImages([
         *     { name : 'image1', src : 'images/image1.png'},
         *     { name : 'image2', src : 'images/image2.png'},
         *     { name : 'image3', src : 'images/image3.png'},
         *     { name : 'image4', src : 'images/image4.png'}
         * ]);
         * @ignore
         */
function b(a,b,c){
// create new Image object and add to list
g[a.name]=new Image,g[a.name].onload=b,g[a.name].onerror=c,g[a.name].src=a.src+f.nocache}/**
         * preload TMX files
         * @ignore
         */
function c(a,b,c){function d(b,c){
// set the TMX content
h[a.name]={data:b,isTMX:"tmx"===a.type,format:c}}
//if the data is in the tmxData object, don't get it via a XMLHTTPRequest
if(
// add the tmx to the levelDirector
"tmx"===a.type&&me.levelDirector.addTMXLevel(a.name),a.data)return d(a.data,a.format),void b();var e=new XMLHttpRequest,g=me.utils.getFileExtension(a.src);e.overrideMimeType&&("json"===g?e.overrideMimeType("application/json"):e.overrideMimeType("text/xml")),e.open("GET",a.src+f.nocache,!0),
// set the callbacks
e.ontimeout=c,e.onreadystatechange=function(){if(4===e.readyState)
// status = 0 when file protocol is used, or cross-domain origin,
// (With Chrome use "--allow-file-access-from-files --disable-web-security")
if(200===e.status||0===e.status&&e.responseText){var a=null;
// parse response
switch(g){case"xml":case"tmx":case"tsx":
// ie9 does not fully implement the responseXML
if(me.device.ua.match(/msie/i)||!e.responseXML){if(!window.DOMParser)throw new f.Error("XML file format loading not supported, use the JSON file format instead");
// manually create the XML DOM
a=(new DOMParser).parseFromString(e.responseText,"text/xml")}else a=e.responseXML;
// converts to a JS object
// (returns with map as a the root object, to match native json format)
a=me.TMXUtils.parse(a),"tmx"===g&&(a=a.map),
// force format to json
g="json";break;case"json":a=JSON.parse(e.responseText);break;default:throw new f.Error("TMX file format "+g+"not supported !")}
//set the TMX content
d(a,g),
// fire the callback
b()}else c()},
// send the request
e.send(null)}/**
         * preload TMX files
         * @ignore
         */
function d(a,b,c){var d=new XMLHttpRequest;d.overrideMimeType&&d.overrideMimeType("application/json"),d.open("GET",a.src+f.nocache,!0),
// set the callbacks
d.ontimeout=c,d.onreadystatechange=function(){4===d.readyState&&(
// status = 0 when file protocol is used, or cross-domain origin,
// (With Chrome use "--allow-file-access-from-files --disable-web-security")
200===d.status||0===d.status&&d.responseText?(
// get the Texture Packer Atlas content
j[a.name]=JSON.parse(d.responseText),
// fire the callback
b()):c())},
// send the request
d.send(null)}/**
         * preload Binary files
         * @ignore
         */
function e(a,b,c){var d=new XMLHttpRequest;
// load our file
d.open("GET",a.src+f.nocache,!0),d.responseType="arraybuffer",d.onerror=c,d.onload=function(){var c=d.response;if(c){for(var e=new Uint8Array(c),f=[],g=0;g<e.byteLength;g++)f[g]=String.fromCharCode(e[g]);i[a.name]=f.join(""),
// callback
b()}},d.send()}
// hold public stuff in our singleton
var f={},g={},h={},i={},j={},k=0,l=0,m=0;
// return our object
/**
         * to enable/disable caching
         * @ignore
         */
/*
         * PUBLIC STUFF
         */
/**
         * onload callback
         * @public
         * @callback
         * @name onload
         * @memberOf me.loader
         * @example
         * // set a callback when everything is loaded
         * me.loader.onload = this.loaded.bind(this);
         */
/**
         * onProgress callback<br>
         * each time a resource is loaded, the loader will fire the specified function,
         * giving the actual progress [0 ... 1], as argument, and an object describing the resource loaded
         * @public
         * @callback
         * @name onProgress
         * @memberOf me.loader
         * @example
         * // set a callback for progress notification
         * me.loader.onProgress = this.updateProgress.bind(this);
         */
/**
         * Base class for Loader exception handling.
         * @name Error
         * @class
         * @memberOf me.loader
         * @constructor
         * @param {String} msg Error message.
         */
/**
         * just increment the number of already loaded resources
         * @ignore
         */
/**
         * on error callback for image loading
         * @ignore
         */
/**
         * enable the nocache mechanism
         * @ignore
         */
/**
         * set all the specified game resources to be preloaded.<br>
         * each resource item must contain the following fields :<br>
         * - name    : internal name of the resource<br>
         * - type    : "binary", "image", "tmx", "tsx", "audio"<br>
         * each resource except type "tmx" must contain the following field :<br>
         * - src     : path and file name of the resource<br>
         * (!) for tmx :<br>
         * - src     : path and file name of the resource<br>
         * or<br>
         * - data    : the json or xml object representation of the tmx file<br>
         * - format  : "xml" or "json"<br>
         * (!) for audio :<br>
         * - src     : path (only) where resources are located<br>
         * <br>
         * @name preload
         * @memberOf me.loader
         * @public
         * @function
         * @param {Object[]} resources
         * @example
         * var g_resources = [
         *   // PNG tileset
         *   {name: "tileset-platformer", type: "image",  src: "data/map/tileset.png"},
         *   // PNG packed texture
         *   {name: "texture", type:"image", src: "data/gfx/texture.png"}
         *   // TSX file
         *   {name: "meta_tiles", type: "tsx", src: "data/map/meta_tiles.tsx"},
         *   // TMX level (XML & JSON)
         *   {name: "map1", type: "tmx", src: "data/map/map1.json"},
         *   {name: "map2", type: "tmx", src: "data/map/map2.tmx"},
         *   {name: "map3", type: "tmx", format: "json", data: {"height":15,"layers":[...],"tilewidth":32,"version":1,"width":20}},
         *   {name: "map4", type: "tmx", format: "xml", data: {xml representation of tmx}},
         *   // audio resources
         *   {name: "bgmusic", type: "audio",  src: "data/audio/"},
         *   {name: "cling",   type: "audio",  src: "data/audio/"},
         *   // binary file
         *   {name: "ymTrack", type: "binary", src: "data/audio/main.ym"},
         *   // JSON file (used for texturePacker)
         *   {name: "texture", type: "json", src: "data/gfx/texture.json"}
         * ];
         *
         * // set all resources to be loaded
         * me.loader.preload(g_resources);
         */
/**
         * Load a single resource (to be used if you need to load additional resource during the game)<br>
         * Given parameter must contain the following fields :<br>
         * - name    : internal name of the resource<br>
         * - type    : "audio", binary", "image", "json", "tmx", "tsx"<br>
         * each resource except type "tmx" must contain the following field :<br>
         * - src     : path and file name of the resource<br>
         * (!) for tmx :<br>
         * - src     : path and file name of the resource<br>
         * or<br>
         * - data    : the json or xml object representation of the tmx file<br>
         * - format  : "xml" or "json"<br>
         * (!) for audio :<br>
         * - src     : path (only) where resources are located<br>
         * @name load
         * @memberOf me.loader
         * @public
         * @function
         * @param {Object} resource
         * @param {Function} onload function to be called when the resource is loaded
         * @param {Function} onerror function to be called in case of error
         * @example
         * // load an image asset
         * me.loader.load({name: "avatar",  type:"image",  src: "data/avatar.png"}, this.onload.bind(this), this.onerror.bind(this));
         *
         * // start loading music
         * me.loader.load({
         *     name   : "bgmusic",
         *     type   : "audio",
         *     src    : "data/audio/"
         * }, function () {
         *     me.audio.play("bgmusic");
         * });
         */
/**
         * unload specified resource to free memory
         * @name unload
         * @memberOf me.loader
         * @public
         * @function
         * @param {Object} resource
         * @return {Boolean} true if unloaded
         * @example me.loader.unload({name: "avatar",  type:"image",  src: "data/avatar.png"});
         */
/**
         * unload all resources to free memory
         * @name unloadAll
         * @memberOf me.loader
         * @public
         * @function
         * @example me.loader.unloadAll();
         */
/**
         * return the specified TMX/TSX object
         * @name getTMX
         * @memberOf me.loader
         * @public
         * @function
         * @param {String} tmx name of the tmx/tsx element ("map1");
         * @return {XML|Object}
         */
/**
         * return the specified Binary object
         * @name getBinary
         * @memberOf me.loader
         * @public
         * @function
         * @param {String} name of the binary object ("ymTrack");
         * @return {Object}
         */
/**
         * return the specified Image Object
         * @name getImage
         * @memberOf me.loader
         * @public
         * @function
         * @param {String} Image name of the Image element ("tileset-platformer");
         * @return {Image}
         */
/**
         * return the specified JSON Object
         * @name getJSON
         * @memberOf me.loader
         * @public
         * @function
         * @param {String} Name for the json file to load
         * @return {Object}
         */
/**
         * Return the loading progress in percent
         * @name getLoadProgress
         * @memberOf me.loader
         * @public
         * @function
         * @deprecated use callback instead
         * @return {Number}
         */
return f.nocache="",f.onload=void 0,f.onProgress=void 0,f.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.loader.Error"}}),f.onResourceLoaded=function(a){
// increment the loading counter
l++;
// callback ?
var b=f.getLoadProgress();f.onProgress&&
// pass the load progress in percent, as parameter
f.onProgress(b,a),me.event.publish(me.event.LOADER_PROGRESS,[b,a])},f.onLoadingError=function(a){throw new f.Error("Failed loading resource "+a.src)},f.setNocache=function(a){f.nocache=a?"?"+~~(1e7*Math.random()):""},f.preload=function(b){
// parse the resources
for(var c=0;c<b.length;c++)k+=f.load(b[c],f.onResourceLoaded.bind(f,b[c]),f.onLoadingError.bind(f,b[c]));
// check load status
a()},f.load=function(a,g,h){
// check ressource type
switch(a.type){case"binary":
// reuse the preloadImage fn
return e.call(this,a,g,h),1;case"image":
// reuse the preloadImage fn
return b.call(this,a,g,h),1;case"json":return d.call(this,a,g,h),1;case"tmx":case"tsx":return c.call(this,a,g,h),1;case"audio":return me.audio.load(a,g,h),1;default:throw new f.Error("load : unknown or invalid resource type : "+a.type)}},f.unload=function(a){switch(a.type){case"binary":return a.name in i?(delete i[a.name],!0):!1;case"image":
// cocoonJS implements a dispose function to free
// corresponding allocated texture in memory
return a.name in g?("function"==typeof g[a.name].dispose&&g[a.name].dispose(),delete g[a.name],!0):!1;case"json":return a.name in j?(delete j[a.name],!0):!1;case"tmx":case"tsx":return a.name in h?(delete h[a.name],!0):!1;case"audio":return me.audio.unload(a.name);default:throw new f.Error("unload : unknown or invalid resource type : "+a.type)}},f.unloadAll=function(){var a;
// unload all binary resources
for(a in i)i.hasOwnProperty(a)&&f.unload({name:a,type:"binary"});
// unload all image resources
for(a in g)g.hasOwnProperty(a)&&f.unload({name:a,type:"image"});
// unload all tmx resources
for(a in h)h.hasOwnProperty(a)&&f.unload({name:a,type:"tmx"});
// unload all in json resources
for(a in j)j.hasOwnProperty(a)&&f.unload({name:a,type:"json"});
// unload all audio resources
me.audio.unloadAll()},f.getTMX=function(a){return a=""+a,a in h?h[a].data:null},f.getBinary=function(a){return a=""+a,a in i?i[a]:null},f.getImage=function(a){return a=""+a,a in g?g[a]:null},f.getJSON=function(a){return a=""+a,a in j?j[a]:null},f.getLoadProgress=function(){return l/k},f}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Font / Bitmap font
 *
 * ASCII Table
 * http://www.asciitable.com/
 * [ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz]
 *
 * -> first char " " 32d (0x20);
 */
function(){/**
     * a generic system font object.
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {String} font a CSS font name
     * @param {Number|String} size size, or size + suffix (px, em, pt)
     * @param {me.Color|String} fillStyle a CSS color value
     * @param {String} [textAlign="left"] horizontal alignment
     */
me.Font=me.Renderable.extend(/** @scope me.Font.prototype */
{/** @ignore */
init:function(a,b,c,d){
// private font properties
/** @ignore */
this.fontSize=new me.Vector2d(0,0),/**
             * defines the color used to draw the font.<br>
             * @public
             * @type me.Color
             * @default black
             * @name me.Font#fillStyle
             */
this.fillStyle=(new me.Color).copy(c),/**
             * defines the color used to draw the font stroke.<br>
             * @public
             * @type me.Color
             * @default black
             * @name me.Font#strokeStyle
             */
this.strokeStyle=new me.Color(0,0,0),/**
             * sets the current line width, in pixels, when drawing stroke
             * @public
             * @type Number
             * @default 1
             * @name me.Font#lineWidth
             */
this.lineWidth=1,/**
             * Set the default text alignment (or justification),<br>
             * possible values are "left", "right", and "center".<br>
             * @public
             * @type String
             * @default "left"
             * @name me.Font#textAlign
             */
this.textAlign=d||"left",/**
             * Set the text baseline (e.g. the Y-coordinate for the draw operation), <br>
             * possible values are "top", "hanging, "middle, "alphabetic, "ideographic, "bottom"<br>
             * @public
             * @type String
             * @default "top"
             * @name me.Font#textBaseline
             */
this.textBaseline="top",/**
             * Set the line spacing height (when displaying multi-line strings). <br>
             * Current font height will be multiplied with this value to set the line height.
             * @public
             * @type Number
             * @default 1.0
             * @name me.Font#lineHeight
             */
this.lineHeight=1,
// super constructor
me.Renderable.prototype.init.apply(this,[0,0,0,0]),
// font name and type
this.setFont(a,b,c,d),this.gid||(this.gid=me.utils.createGUID())},/**
         * make the font bold
         * @name bold
         * @memberOf me.Font
         * @function
         */
bold:function(){this.font="bold "+this.font},/**
         * make the font italic
         * @name italic
         * @memberOf me.Font
         * @function
         */
italic:function(){this.font="italic "+this.font},/**
         * Change the font settings
         * @name setFont
         * @memberOf me.Font
         * @function
         * @param {String} font a CSS font name
         * @param {Number|String} size size, or size + suffix (px, em, pt)
         * @param {me.Color|String} fillStyle a CSS color value
         * @param {String} [textAlign="left"] horizontal alignment
         * @example
         * font.setFont("Arial", 20, "white");
         * font.setFont("Arial", "1.5em", "white");
         */
setFont:function(a,b,c,d){
// font name and type
var e=a.split(",").map(function(a){return a=a.trim(),/(^".*"$)|(^'.*'$)/.test(a)?a:'"'+a+'"'});this.fontSize.y=+b,this.height=this.fontSize.y,"number"==typeof b&&(b+="px"),this.font=b+" "+e.join(","),"undefined"!=typeof c&&this.fillStyle.copy(c),d&&(this.textAlign=d)},/**
         * measure the given text size in pixels
         * @name measureText
         * @memberOf me.Font
         * @function
         * @param {me.CanvasRenderer|me.WebGLRenderer} renderer Reference to the destination renderer instance
         * @param {String} text
         * @return {Object} returns an object, with two attributes: width (the width of the text) and height (the height of the text).
         */
measureText:function(a,b){var c=a.fontContext2D;
// draw the text
c.font=this.font,c.fillStyle=this.fillStyle.toRGBA(),c.textAlign=this.textAlign,c.textBaseline=this.textBaseline,this.height=this.width=0;for(var d=(""+b).split("\n"),e=0;e<d.length;e++)this.width=Math.max(c.measureText(d[e].trimRight()).width,this.width),this.height+=this.fontSize.y*this.lineHeight;return{width:this.width,height:this.height}},/**
         * draw a text at the specified coord
         * @name draw
         * @memberOf me.Font
         * @function
         * @param {me.CanvasRenderer|me.WebGLRenderer} renderer Reference to the destination renderer instance
         * @param {String} text
         * @param {Number} x
         * @param {Number} y
         */
draw:function(a,b,c,d){c=~~c,d=~~d;
// save the previous global alpha value
var e=a.globalAlpha();a.setGlobalAlpha(e*this.getOpacity()),
// update initial position
this.pos.set(c,d),
// draw the text
a.drawFont(this._drawFont(a.fontContext2D,b,c,d,!1)),
// restore the previous global alpha value
a.setGlobalAlpha(e)},/**
         * draw a stroke text at the specified coord, as defined <br>
         * by the `lineWidth` and `fillStroke` properties. <br>
         * Note : using drawStroke is not recommended for performance reasons
         * @name drawStroke
         * @memberOf me.Font
         * @function
         * @param {me.CanvasRenderer|me.WebGLRenderer} renderer Reference to the destination renderer instance
         * @param {String} text
         * @param {Number} x
         * @param {Number} y
         */
drawStroke:function(a,b,c,d){c=~~c,d=~~d;
// save the previous global alpha value
var e=a.globalAlpha();a.setGlobalAlpha(e*this.getOpacity()),
// update initial position
this.pos.set(c,d),
// draw the text
a.drawFont(this._drawFont(a.fontContext2D,b,c,d,!0)),
// restore the previous global alpha value
a.setGlobalAlpha(e)},/**
         * @ignore
         */
_drawFont:function(a,b,c,d,e){a.font=this.font,a.fillStyle=this.fillStyle.toRGBA(),e&&(a.strokeStyle=this.strokeStyle.toRGBA(),a.lineWidth=this.lineWidth),a.textAlign=this.textAlign,a.textBaseline=this.textBaseline;for(var f=(""+b).split("\n"),g="",h=0,i=d,j=this.fontSize.y*this.lineHeight,k=0;k<f.length;k++)g=f[k].trimRight(),h=Math.max(h,a.measureText(g).width),a[e?"strokeText":"fillText"](g,c,d),d+=j;
// compute bounds
var l="right"===this.textAlign?c-h:"center"===this.textAlign?c-~~(h/2):c;return i=["top","hanging"].indexOf(this.textBaseline)>=0?i:"middle"===this.textBaseline?i-~~(j/2):i-j,{x:~~l,y:~~i,w:~~(h+.5),h:~~(f.length*j+.5)}}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Font / Bitmap font
 *
 * ASCII Table
 * http://www.asciitable.com/
 * [ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz]
 *
 * -> first char " " 32d (0x20);
 */
function(){/**
     * a bitpmap font object
     * @class
     * @extends me.Font
     * @memberOf me
     * @constructor
     * @param {String} font font name
     * @param {Number|Object} size either a number value, or an object like { x : 16, y : 16 }
     * @param {Number} [scale=1.0]
     * @param {Number} [firstChar=0x20] charcode for the first character in the font sheet. Default is the space character.
     */
me.BitmapFont=me.Font.extend(/** @scope me.BitmapFont.prototype */
{/** @ignore */
init:function(a,b,c,d){/** @ignore */
// scaled font size;
this.sSize=new me.Vector2d,
// #char per row
this.charCount=0,
// font name and type
me.Font.prototype.init.apply(this,[a,b,"#000000"]),
// first char in the ascii table
this.firstChar=d||32,
// load the font metrics
this.loadFontMetrics(a,b),
// set a default alignement
this.textAlign="left",this.textBaseline="top",
// resize if necessary
c&&this.resize(c)},/**
         * Load the font metrics
         * @ignore
         */
loadFontMetrics:function(a,b){this.font=me.loader.getImage(a),
// some cheap metrics
this.fontSize.x=b.x||b,this.fontSize.y=b.y||this.font.height,this.sSize.copy(this.fontSize),this.height=this.sSize.y,
// #char per row
this.charCount=~~(this.font.width/this.fontSize.x)},/**
         * change the font settings
         * @name set
         * @memberOf me.BitmapFont
         * @function
         * @param {String} textAlign ("left", "center", "right")
         * @param {Number} [scale]
         */
set:function(a,b){this.textAlign=a,
// updated scaled Size
b&&this.resize(b)},/**
         * change the font display size
         * @name resize
         * @memberOf me.BitmapFont
         * @function
         * @param {Number} scale ratio
         */
resize:function(a){
// updated scaled Size
this.sSize.setV(this.fontSize),this.sSize.x*=a,this.sSize.y*=a,this.height=this.sSize.y},/**
         * measure the given text size in pixels
         * @name measureText
         * @memberOf me.BitmapFont
         * @function
         * @param {me.CanvasRenderer|me.WebGLRenderer} renderer Reference to the destination renderer instance
         * @param {String} text
         * @return {Object} an object with two properties: `width` and `height`, defining the output dimensions
         */
measureText:function(a,b){var c=(""+b).split("\n");this.height=this.width=0;for(var d=0;d<c.length;d++)this.width=Math.max(c[d].trimRight().length*this.sSize.x,this.width),this.height+=this.sSize.y*this.lineHeight;return{width:this.width,height:this.height}},/**
         * draw a text at the specified coord
         * @name draw
         * @memberOf me.BitmapFont
         * @function
         * @param {me.CanvasRenderer|me.WebGLRenderer} renderer Reference to the destination renderer instance
         * @param {String} text
         * @param {Number} x
         * @param {Number} y
         */
draw:function(a,b,c,d){var e=(""+b).split("\n"),f=c,g=this.sSize.y*this.lineHeight,h=a.globalAlpha();a.setGlobalAlpha(h*this.getOpacity()),
// update initial position
this.pos.set(c,d);for(var i=0;i<e.length;i++){c=f;var j=e[i].trimRight(),k=j.length*this.sSize.x;switch(this.textAlign){case"right":c-=k;break;case"center":c-=.5*k}
// adjust y pos based on alignment value
switch(this.textBaseline){case"middle":d-=.5*g;break;case"ideographic":case"alphabetic":case"bottom":d-=g}
// draw the string
for(var l=0,m=j.length;m>l;l++){
// calculate the char index
var n=j.charCodeAt(l)-this.firstChar;n>=0&&
// draw it
a.drawImage(this.font,this.fontSize.x*(n%this.charCount),this.fontSize.y*~~(n/this.charCount),this.fontSize.x,this.fontSize.y,~~c,~~d,this.sSize.x,this.sSize.y),c+=this.sSize.x}
// increment line
d+=g}
// restore the previous global alpha value
a.setGlobalAlpha(h)}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Audio Mngt Objects
 *
 *
 */
function(){/**
     * There is no constructor function for me.audio.
     * @namespace me.audio
     * @memberOf me
     */
me.audio=function(){/**
         * event listener callback on load error
         * @ignore
         */
function a(a,d){
// check the retry counter
if(e++>3){
// something went wrong
var f="melonJS: failed loading "+a;if(me.sys.stopOnAudioError!==!1)
// throw an exception and stop everything !
throw new b.Error(f);
// disable audio
me.audio.disable(),
// call error callback if defined
d&&d(),
// warning
console.log(f+", disabling audio")}else c[a].load()}/*
         * PRIVATE STUFF
         */
// hold public stuff in our singleton
var b={},c={},d=null,e=0;
// return our object
/*
         * PUBLIC STUFF
         */
/**
         * Base class for Audio exception handling.
         * @name Error
         * @class
         * @memberOf me.audio
         * @constructor
         * @param {String} msg Error message.
         */
/**
         * initialize the audio engine<br>
         * the melonJS loader will try to load audio files corresponding to the
         * browser supported audio format<br>
         * if no compatible audio codecs are found, audio will be disabled
         * @name init
         * @memberOf me.audio
         * @public
         * @function
         * @param {String}
         *          audioFormat audio format provided ("mp3, ogg, m4a, wav")
         * @return {Boolean} Indicates whether audio initialization was successful
         * @example
         * // initialize the "sound engine", giving "mp3" and "ogg" as desired audio format
         * // i.e. on Safari, the loader will load all audio.mp3 files,
         * // on Opera the loader will however load audio.ogg files
         * if (!me.audio.init("mp3,ogg")) {
         *     alert("Sorry but your browser does not support html 5 audio !");
         *     return;
         * }
         */
/**
         * enable audio output <br>
         * only useful if audio supported and previously disabled through
         *
         * @see me.audio#disable
         * @name enable
         * @memberOf me.audio
         * @public
         * @function
         */
/**
         * disable audio output
         *
         * @name disable
         * @memberOf me.audio
         * @public
         * @function
         */
/**
         * Load an audio file.<br>
         * <br>
         * sound item must contain the following fields :<br>
         * - name    : name of the sound<br>
         * - src     : source path<br>
         * @ignore
         */
/**
         * play the specified sound
         * @name play
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio clip name - case sensitive
         * @param {Boolean} [loop=false] loop audio
         * @param {Function} [onend] Function to call when sound instance ends playing.
         * @param {Number} [volume=default] Float specifying volume (0.0 - 1.0 values accepted).
         * @return {Number} the sound instance ID.
         * @example
         * // play the "cling" audio clip
         * me.audio.play("cling");
         * // play & repeat the "engine" audio clip
         * me.audio.play("engine", true);
         * // play the "gameover_sfx" audio clip and call myFunc when finished
         * me.audio.play("gameover_sfx", false, myFunc);
         * // play the "gameover_sfx" audio clip with a lower volume level
         * me.audio.play("gameover_sfx", false, null, 0.5);
         */
/**
         * Fade a currently playing sound between two volumee.
         * @name fade
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio clip name - case sensitive
         * @param {Number} from Volume to fade from (0.0 to 1.0).
         * @param {Number} to Volume to fade to (0.0 to 1.0).
         * @param {Number} duration Time in milliseconds to fade.
         * @param {Number} [id] the sound instance ID. If none is passed, all sounds in group will fade.
         */
/**
         * stop the specified sound on all channels
         * @name stop
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio clip name - case sensitive
         * @param {Number} [id] the sound instance ID. If none is passed, all sounds in group will stop.
         * @example
         * me.audio.stop("cling");
         */
/**
         * pause the specified sound on all channels<br>
         * this function does not reset the currentTime property
         * @name pause
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio clip name - case sensitive
         * @param {Number} [id] the sound instance ID. If none is passed, all sounds in group will pause.
         * @example
         * me.audio.pause("cling");
         */
/**
         * play the specified audio track<br>
         * this function automatically set the loop property to true<br>
         * and keep track of the current sound being played.
         * @name playTrack
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio track name - case sensitive
         * @param {Number} [volume=default] Float specifying volume (0.0 - 1.0 values accepted).
         * @return {Number} the sound instance ID.
         * @example
         * me.audio.playTrack("awesome_music");
         */
/**
         * stop the current audio track
         *
         * @see me.audio#playTrack
         * @name stopTrack
         * @memberOf me.audio
         * @public
         * @function
         * @example
         * // play a awesome music
         * me.audio.playTrack("awesome_music");
         * // stop the current music
         * me.audio.stopTrack();
         */
/**
         * pause the current audio track
         *
         * @name pauseTrack
         * @memberOf me.audio
         * @public
         * @function
         * @example
         * me.audio.pauseTrack();
         */
/**
         * resume the previously paused audio track
         *
         * @name resumeTrack
         * @memberOf me.audio
         * @public
         * @function
         * @example
         * // play an awesome music
         * me.audio.playTrack("awesome_music");
         * // pause the audio track
         * me.audio.pauseTrack();
         * // resume the music
         * me.audio.resumeTrack();
         */
/**
         * returns the current track Id
         * @name getCurrentTrack
         * @memberOf me.audio
         * @public
         * @function
         * @return {String} audio track name
         */
/**
         * set the default global volume
         * @name setVolume
         * @memberOf me.audio
         * @public
         * @function
         * @param {Number} volume Float specifying volume (0.0 - 1.0 values accepted).
         */
/**
         * get the default global volume
         * @name getVolume
         * @memberOf me.audio
         * @public
         * @function
         * @returns {Number} current volume value in Float [0.0 - 1.0] .
         */
/**
         * mute the specified sound
         * @name mute
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio clip name - case sensitive
         * @param {Number} [id] the sound instance ID. If none is passed, all sounds in group will mute.
         */
/**
         * unmute the specified sound
         * @name unmute
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio clip name
         * @param {Number} [id] the sound instance ID. If none is passed, all sounds in group will unmute.
         */
/**
         * mute all audio
         * @name muteAll
         * @memberOf me.audio
         * @public
         * @function
         */
/**
         * unmute all audio
         * @name unmuteAll
         * @memberOf me.audio
         * @public
         * @function
         */
/**
         * unload specified audio track to free memory
         *
         * @name unload
         * @memberOf me.audio
         * @public
         * @function
         * @param {String} sound_name audio track name - case sensitive
         * @return {Boolean} true if unloaded
         * @example
         * me.audio.unload("awesome_music");
         */
/**
         * unload all audio to free memory
         *
         * @name unloadAll
         * @memberOf me.audio
         * @public
         * @function
         * @example
         * me.audio.unloadAll();
         */
return b.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.audio.Error"}}),b.init=function(a){if(!me.initialized)throw new b.Error("me.audio.init() called before engine initialization.");
// if no param is given to init we use mp3 by default
// convert it into an array
// XXX: workaround https://github.com/goldfire/howler.js/issues/328
return a="string"==typeof a?a:"mp3",this.audioFormats=a.split(","),me.device.ua.contains("OPR/")&&(this.audioFormats=this.audioFormats.filter(function(a){return"mp3"!==a}),this.audioFormats.length||this.audioFormats.push("ogg")),!Howler.noAudio},b.enable=function(){this.unmuteAll()},b.disable=function(){this.muteAll()},b.load=function(d,f,g){var h=[];if("undefined"==typeof this.audioFormats||0===this.audioFormats.length)throw new b.Error("target audio extension(s) should be set through me.audio.init() before calling the preloader.");for(var i=0;i<this.audioFormats.length;i++)h.push(d.src+d.name+"."+this.audioFormats[i]+me.loader.nocache);return c[d.name]=new Howl({src:h,volume:Howler.volume(),onloaderror:function(){c[d.name]=this,a.call(me.audio,d.name,g)},onload:function(){c[d.name]=this,e=0,f&&f()}}),1},b.play=function(a,b,d,e){var f=c[a];if(f&&"undefined"!=typeof f){var g=f.play();
// arg[0] can take different types in howler 2.0
return"boolean"==typeof b&&f.loop(b,g),f.volume("number"==typeof e?e.clamp(0,1):Howler.volume(),g),"function"==typeof d&&(b===!0?f.on("end",d,g):f.once("end",d,g)),g}},b.fade=function(a,b,d,e,f){var g=c[a];g&&"undefined"!=typeof g&&g.fade(b,d,e,f)},b.stop=function(a,b){var d=c[a];d&&"undefined"!=typeof d&&(d.stop(b),
// remove the defined onend callback (if any defined)
d.off("end",b))},b.pause=function(a,b){var d=c[a];d&&"undefined"!=typeof d&&d.pause(b)},b.playTrack=function(a,b){return d=a,me.audio.play(d,!0,null,b)},b.stopTrack=function(){null!==d&&(c[d].stop(),d=null)},b.pauseTrack=function(){null!==d&&c[d].pause()},b.resumeTrack=function(){null!==d&&c[d].play()},b.getCurrentTrack=function(){return d},b.setVolume=function(a){Howler.volume(a)},b.getVolume=function(){return Howler.volume()},b.mute=function(a,b,d){
// if not defined : true
d="undefined"==typeof d?!0:!!d;var e=c[a];e&&"undefined"!=typeof e&&e.mute(d,b)},b.unmute=function(a,c){b.mute(a,c,!1)},b.muteAll=function(){Howler.mute(!0)},b.unmuteAll=function(){Howler.mute(!1)},b.unload=function(a){
// destroy the Howl object
// cocoonJS implements a dispose function to free
// corresponding allocated audio in memory
return a=a,a in c?(c[a].unload(),"function"==typeof c[a].dispose&&c[a].dispose(),delete c[a],!0):!1},b.unloadAll=function(){for(var a in c)c.hasOwnProperty(a)&&b.unload(a)},b}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * video functions
     * There is no constructor function for me.video
     * @namespace me.video
     * @memberOf me
     */
me.video=function(){/**
         * Auto-detect the best renderer to use
         * @ignore
         */
function a(a,b,c,d){try{return new me.WebGLRenderer(a,b,c,d)}catch(e){return new me.CanvasRenderer(a,b,c,d)}}
// hold public stuff in our apig
var b={},c=null,d=0,e=1,f=0,g=0,h=1/0,i=1/0,j={wrapper:void 0,renderer:0,// canvas
doubleBuffering:!1,autoScale:!1,scale:1,scaleMethod:"fit",transparent:!1,antiAlias:!1};
// return our api
/*
         * PUBLIC STUFF
         */
/**
         * Base class for Video exception handling.
         * @name Error
         * @class
         * @constructor
         * @memberOf me.video
         * @param {String} msg Error message.
         */
/**
         * Select the HTML5 Canvas renderer
         * @public
         * @name CANVAS
         * @memberOf me.video
         * @enum {Number}
         */
/**
         * Select the WebGL renderer
         * @public
         * @name WEBGL
         * @memberOf me.video
         * @enum {Number}
         */
/**
         * Auto-select the renderer (Attempt WebGL first, with fallback to Canvas)
         * @public
         * @name AUTO
         * @memberOf me.video
         * @enum {Number}
         */
/**
         * Initialize the "video" system (create a canvas based on the given arguments, and the related renderer). <br>
         * melonJS support various scaling mode : <br>
         *  - <i>`fit`</i> : Letterboxed; content is scaled to design aspect ratio <br>
         *  - <i>`fill-max`</i> : Canvas is resized to fit maximum design resolution; content is scaled to design aspect ratio <br>
         *  - <i>`flex-height`</i> : Canvas height is resized to fit; content is scaled to design aspect ratio <br>
         *  - <i>`flex-width`</i> : Canvas width is resized to fit; content is scaled to design aspect ratio <br>
         *  - <i>`stretch`</i> : Canvas is resized to fit; content is scaled to screen aspect ratio
         * @name init
         * @memberOf me.video
         * @function
         * @param {Number} width the width of the canvas viewport
         * @param {Number} height the height of the canvas viewport
         * @param {Object} [options] The optional video/renderer parameters
         * @param {String} [options.wrapper=document.body] the "div" element name to hold the canvas in the HTML file
         * @param {Number} [options.renderer=me.video.CANVAS] renderer to use.
         * @param {Boolean} [options.doubleBuffering=false] enable/disable double buffering
         * @param {Number|String} [options.scale=1.0] enable scaling of the canvas ('auto' for automatic scaling)
         * @param {String} [options.scaleMethod="fit"] ('fit','fill-max','flex-width','flex-height','stretch') screen scaling modes
         * @param {Boolean} [options.transparent=false] whether to allow transparent pixels in the front buffer (screen)
         * @param {Boolean} [options.antiAlias=false] whether to enable or not video scaling interpolation
         * @return {Boolean} false if initialization failed (canvas not supported)
         * @example
         * // init the video with a 640x480 canvas
         * me.video.init(640, 480, {
         *     wrapper : "screen",
         *     renderer : me.video.CANVAS,
         *     scale : "auto",
         *     scaleMethod : "fit",
         *     doubleBuffering : true
         * });
         */
/**
         * return the relative (to the page) position of the specified Canvas
         * @name getPos
         * @memberOf me.video
         * @function
         * @param {Canvas} [canvas] system one if none specified
         * @return {me.Vector2d}
         */
/**
         * set the max canvas display size (when scaling)
         * @name setMaxSize
         * @memberOf me.video
         * @function
         * @param {Number} width width
         * @param {Number} height height
         */
/**
         * Create and return a new Canvas
         * @name createCanvas
         * @memberOf me.video
         * @function
         * @param {Number} width width
         * @param {Number} height height
         * @param {Boolean} [screencanvas=false] set to true if this canvas renders directly to the screen
         * @return {Canvas}
         */
/**
         * return a reference to the wrapper
         * @name getWrapper
         * @memberOf me.video
         * @function
         * @return {Document}
         */
/**
         * callback for window resize event
         * @ignore
         */
/**
         * Modify the "displayed" canvas size
         * @name updateDisplaySize
         * @memberOf me.video
         * @function
         * @param {Number} scaleX X scaling multiplier
         * @param {Number} scaleY Y scaling multiplier
         */
return b.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.video.Error"}}),b.CANVAS=0,b.WEBGL=1,b.AUTO=2,b.init=function(d,h,i){
// ensure melonjs has been properly initialized
if(!me.initialized)throw new b.Error("me.video.init() called before engine initialization.");j=Object.assign(j,i||{}),j.doubleBuffering=!!j.doubleBuffering,j.autoScale="auto"===j.scale||!1,j.scaleMethod=["fill-max","flex-width","flex-height","stretch"].indexOf(j.scaleMethod)>=0?j.scaleMethod:"fit",j.transparent=!!j.transparent,me.game.HASH.webgl===!0&&(j.renderer=b.WEBGL),j.scale=j.autoScale?1:+j.scale||1,me.sys.scale=new me.Vector2d(j.scale,j.scale),(j.autoScale||1!==j.scale)&&(j.doubleBuffering=!0),e=d/h,f=d,g=h;
// default scaled size value
var k=d*me.sys.scale.x,l=h*me.sys.scale.y;
// stop here if not supported
if(j.zoomX=k,j.zoomY=l,
//add a channel for the onresize/onorientationchange event
window.addEventListener("resize",throttle(100,!1,function(a){me.event.publish(me.event.WINDOW_ONRESIZE,[a])}),!1),window.addEventListener("orientationchange",function(a){me.event.publish(me.event.WINDOW_ONORIENTATION_CHANGE,[a])},!1),
// register to the channel
me.event.subscribe(me.event.WINDOW_ONRESIZE,me.video.onresize.bind(me.video)),me.event.subscribe(me.event.WINDOW_ONORIENTATION_CHANGE,me.video.onresize.bind(me.video)),c=b.createCanvas(k,l,!0),i.wrapper&&(j.wrapper=document.getElementById(i.wrapper)),j.wrapper||(j.wrapper=document.body),j.wrapper.appendChild(c),!c.getContext)return!1;/**
             * A reference to the current video renderer
             * @public
             * @memberOf me.video
             * @name renderer
             * @type {me.Renderer|me.CanvasRenderer|me.WebGLRenderer}
             */
switch(j.renderer){case b.WEBGL:this.renderer=new me.WebGLRenderer(c,d,h,j);break;case b.AUTO:this.renderer=a(c,d,h,j);break;default:this.renderer=new me.CanvasRenderer(c,d,h,j)}
// adjust CSS style for High-DPI devices
var m=me.device.getPixelRatio();
// set max the canvas max size if CSS values are defined
if(m>1&&(c.style.width=c.width/m+"px",c.style.height=c.height/m+"px"),window.getComputedStyle){var n=window.getComputedStyle(c,null);me.video.setMaxSize(parseInt(n.maxWidth,10),parseInt(n.maxHeight,10))}
// trigger an initial resize();
return me.game.init(),me.video.onresize(),!0},b.getPos=function(a){return a=a||this.renderer.getScreenCanvas(),a.getBoundingClientRect?a.getBoundingClientRect():{left:0,top:0}},b.setMaxSize=function(a,b){h=a||1/0,i=b||1/0,this.onresize.defer(this)},b.createCanvas=function(a,d,e){if(0===a||0===d)throw new b.Error("width or height was zero, Canvas could not be initialized !");var f=document.createElement("canvas");
// enable ScreenCanvas on cocoonJS
return e===!0&&navigator.isCocoonJS&&me.device.android2!==!0&&(f.screencanvas=!0),f.width=a||c.width,f.height=d||c.height,f},b.getWrapper=function(){return j.wrapper},b.onresize=function(){
// default (no scaling)
var a=1,b=1;if(
// check for orientation information
"undefined"!=typeof window.orientation?me.device.orientation=window.orientation:me.device.orientation=window.outerWidth>window.outerHeight?90:0,j.autoScale){var c=me.video.renderer.getScreenCanvas().parentNode,k=Math.min(h,c.width||window.innerWidth),l=Math.min(i,c.height||window.innerHeight),m=k/l,n=1/0,o=1/0;"fill-max"===j.scaleMethod&&e>m||"flex-width"===j.scaleMethod?(n=Math.min(h,g*m),a=b=k/n,n=~~(n+.5),this.renderer.resize(n,g),me.game.viewport.resize(n,g),me.game.world.updateChildBounds()):"fill-max"===j.scaleMethod&&m>e||"flex-height"===j.scaleMethod?(o=Math.min(i,f*(l/k)),a=b=l/o,o=~~(o+.5),this.renderer.resize(f,o),me.game.viewport.resize(f,o),me.game.world.updateChildBounds()):"stretch"===j.scaleMethod?(a=k/f,b=l/g):
// scale the display canvas to fit the parent container
// make sure we maintain the original aspect ratio
a=b=e>m?k/f:l/g,
// adjust scaling ratio based on the device pixel ratio
a*=me.device.getPixelRatio(),b*=me.device.getPixelRatio(),d&&
// cancel any previous pending resize
clearTimeout(d),d=me.video.updateDisplaySize.defer(this,a,b)}},b.updateDisplaySize=function(a,b){
// update the global scale variable
me.sys.scale.set(a,b),
// renderer resize logic
this.renderer.scaleCanvas(a,b),me.game.repaint(),
// make sure we have the correct relative canvas position cached
me.input._offset=me.video.getPos(),
// clear the timeout id
d=0},b}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a base renderer object
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {Canvas} canvas The html canvas tag to draw to on screen.
     * @param {Number} width The width of the canvas without scaling
     * @param {Number} height The height of the canvas without scaling
     * @param {Object} [options] The renderer parameters
     * @param {Boolean} [options.doubleBuffering=false] Whether to enable double buffering
     * @param {Boolean} [options.antiAlias=false] Whether to enable anti-aliasing
     * @param {Boolean} [options.transparent=false] Whether to enable transparency on the canvas (performance hit when enabled)
     * @param {Number} [options.zoomX=width] The actual width of the canvas with scaling applied
     * @param {Number} [options.zoomY=height] The actual height of the canvas with scaling applied
     */
me.Renderer=Object.extend(/** @scope me.Renderer.prototype */
{/**
         * @ignore
         */
init:function(a,b,c,d){
// rendering options
// canvas object and context
// global color
return d=d||{},this.transparent=!!d.transparent,this.doubleBuffering=!!d.doubleBuffering,this.antiAlias=!!d.antiAlias,this.gameWidthZoom=d.zoomX||b,this.gameHeightZoom=d.zoomY||c,this.canvas=this.backBufferCanvas=a,this.context=null,this.globalColor=new me.Color(255,255,255,1),this},/**
         * @ignore
         */
applyRGBFilter:function(a,b,c){
//create a output canvas using the given canvas or image size
var d,e,f=this.getContext2d(me.video.createCanvas(a.width,a.height,!1)),g=me.utils.getPixels(a),h=g.data;switch(b){case"b&w":for(d=0,e=h.length;e>d;d+=4){var i=3*h[d]+4*h[d+1]+h[d+2]>>>3;h[d]=i,// red
h[d+1]=i,// green
h[d+2]=i}break;case"brightness":
// make sure it's between 0.0 and 1.0
var j=Math.abs(c).clamp(0,1);for(d=0,e=h.length;e>d;d+=4)h[d]*=j,// red
h[d+1]*=j,// green
h[d+2]*=j;break;case"transparent":var k=me.pool.pull("me.Color").parseCSS(c),l=me.pool.pull("me.Color");for(d=0,e=h.length;e>d;d+=4)l.setColor(h[d],h[d+1],h[d+2]),l.equals(k)&&(h[d+3]=0);me.pool.push(k),me.pool.push(l);break;default:return null}
// return it
// put our modified image back in the new filtered canvas
return f.putImageData(g,0,0),f},/**
         * @ignore
         */
prepareSurface:function(){},/**
         * @ignore
         */
reset:function(){this.resetTransform(),this.cache.reset()},/**
         * return a reference to the system canvas
         * @name getCanvas
         * @memberOf me.Renderer
         * @function
         * @return {Canvas}
         */
getCanvas:function(){return this.backBufferCanvas},/**
         * return a reference to the screen canvas
         * @name getScreenCanvas
         * @memberOf me.Renderer
         * @function
         * @return {Canvas}
         */
getScreenCanvas:function(){return this.canvas},/**
         * return a reference to the screen canvas corresponding 2d Context<br>
         * (will return buffered context if double buffering is enabled, or a reference to the Screen Context)
         * @name getScreenContext
         * @memberOf me.Renderer
         * @function
         * @return {Context2d}
         */
getScreenContext:function(){return this.context},/**
         * Returns the 2D Context object of the given Canvas<br>
         * Also configures anti-aliasing based on constructor options.
         * @name getContext2d
         * @memberOf me.Renderer
         * @function
         * @param {Canvas} canvas
         * @param {Boolean} [opaque=false] True to disable transparency
         * @return {Context2d}
         */
getContext2d:function(a,b){if("undefined"==typeof a||null===a)throw new me.video.Error("You must pass a canvas element in order to create a 2d context");if("undefined"==typeof a.getContext)throw new me.video.Error("Your browser does not support HTML5 canvas.");var c;
// cocoonJS specific extension
return c=navigator.isCocoonJS?a.getContext("2d",{antialias:this.antiAlias,alpha:!b}):a.getContext("2d",{alpha:!b}),c.canvas||(c.canvas=a),this.setAntiAlias(c,this.antiAlias),c},/**
         * return the width of the system Canvas
         * @name getWidth
         * @memberOf me.Renderer
         * @function
         * @return {Number}
         */
getWidth:function(){return this.backBufferCanvas.width},/**
         * return the height of the system Canvas
         * @name getHeight
         * @memberOf me.Renderer
         * @function
         * @return {Number}
         */
getHeight:function(){return this.backBufferCanvas.height},/**
         * return the current global alpha
         * @name globalAlpha
         * @memberOf me.Renderer
         * @function
         * @return {Number}
         */
globalAlpha:function(){return this.globalColor.glArray[3]},/**
         * resizes the canvas
         * @name resize
         * @memberOf me.Renderer
         * @function
         */
resize:function(a,b){this.backBufferCanvas.width=a,this.backBufferCanvas.height=b},/**
         * enable/disable image smoothing (scaling interpolation) for the specified 2d Context<br>
         * (!) this might not be supported by all browsers <br>
         * @name setImageSmoothing
         * @memberOf me.Renderer
         * @function
         * @param {Context2d} context
         * @param {Boolean} [enable=false]
         */
setAntiAlias:function(a,b){"undefined"!=typeof a&&
// enable/disable antialis on the given context
me.agent.setPrefixed("imageSmoothingEnabled",b===!0,a);
// disable antialias CSS scaling on the main canvas
var c=a.canvas.style["image-rendering"];b!==!1||""!==c&&"auto"!==c?b===!0&&"pixelated"===c&&(
// if set to the standard "pixelated"
a.canvas.style["image-rendering"]="auto"):
// if a specific value is set through CSS or equal to the standard "auto" one
a.canvas.style["image-rendering"]="pixelated"},/**
         * @ignore
         */
drawFont:function(){}})}(),/*
* MelonJS Game Engine
* Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
* http://www.melonjs.org
*
*/
function(){/**
     * a basic texture cache object
     * @ignore
     */
me.Renderer.TextureCache=Object.extend({/**
         * @ignore
         */
init:function(a){this.max_size=a||1/0,this.reset()},/**
         * @ignore
         */
reset:function(){this.cache=new Map,this.units=new Map,this.length=0},/**
         * @ignore
         */
validate:function(){if(this.length>=this.max_size)
// TODO: Merge textures instead of throwing an exception
throw new me.video.Error("Texture cache overflow: "+this.max_size+" texture units available.")},/**
         * @ignore
         */
get:function(a,b){if(!this.cache.has(a)){if(this.validate(),!b){var c=a.width,d=a.height;b={
// FIXME: Create a texture atlas helper function
meta:{app:"melonJS",size:{w:c,h:d}},frames:[{filename:"default",frame:{x:0,y:0,w:c,h:d}}]}}var e=new me.video.renderer.Texture(b,a,!0);this.cache.set(a,e),this.units.set(e,this.length++)}return this.cache.get(a)},/**
         * @ignore
         */
put:function(a,b){this.validate(),this.cache.set(a,b),this.units.set(b,this.length++)},/**
         * @ignore
         */
getUnit:function(a){return this.units.get(a)}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015 Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a canvas renderer object
     * @class
     * @extends me.Renderer
     * @memberOf me
     * @constructor
     * @param {Canvas} canvas The html canvas tag to draw to on screen.
     * @param {Number} width The width of the canvas without scaling
     * @param {Number} height The height of the canvas without scaling
     * @param {Object} [options] The renderer parameters
     * @param {Boolean} [options.doubleBuffering=false] Whether to enable double buffering
     * @param {Boolean} [options.antiAlias=false] Whether to enable anti-aliasing
     * @param {Boolean} [options.transparent=false] Whether to enable transparency on the canvas (performance hit when enabled)
     * @param {Number} [options.zoomX=width] The actual width of the canvas with scaling applied
     * @param {Number} [options.zoomY=height] The actual height of the canvas with scaling applied
     */
me.CanvasRenderer=me.Renderer.extend(/** @scope me.CanvasRenderer.prototype */
{/**
         * @ignore
         */
init:function(a,b,c,d){
// parent constructor
// defined the 2d context
// create the back buffer if we use double buffering
// Clears the front buffer for each frame blit
// apply the default color to the 2d context
// create a texture cache
return me.Renderer.prototype.init.apply(this,[a,b,c,d]),this.context=this.getContext2d(this.canvas,!this.transparent),this.doubleBuffering?(this.backBufferCanvas=me.video.createCanvas(b,c,!1),this.backBufferContext2D=this.getContext2d(this.backBufferCanvas),this.transparent&&(this.context.globalCompositeOperation="copy")):(this.backBufferCanvas=this.canvas,this.backBufferContext2D=this.context),this.fontContext2D=this.backBufferContext2D,this.setColor(this.globalColor),this.cache=new me.Renderer.TextureCache,this},/**
         * prepare the framebuffer for drawing a new frame
         * @name prepareSurface
         * @memberOf me.CanvasRenderer
         * @function
         */
prepareSurface:function(){this.transparent&&this.clearSurface(null,"rgba(0,0,0,0)",!0)},/**
         * render the main framebuffer on screen
         * @name blitSurface
         * @memberOf me.CanvasRenderer
         * @function
         */
blitSurface:function(){this.doubleBuffering&&this.context.drawImage(this.backBufferCanvas,0,0,this.backBufferCanvas.width,this.backBufferCanvas.height,0,0,this.gameWidthZoom,this.gameHeightZoom)},/**
         * Clear the specified context with the given color
         * @name clearSurface
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Context2d} [ctx=null] Canvas context, defaults to system context if falsy.
         * @param {me.Color|String} color CSS color.
         * @param {Boolean} [opaque=false] Allow transparency [default] or clear the surface completely [true]
         */
clearSurface:function(a,b,c){a||(a=this.backBufferContext2D);var d=a.canvas;a.save(),a.setTransform(1,0,0,1,0,0),a.globalCompositeOperation=c?"copy":"source-over",a.fillStyle=b instanceof me.Color?b.toRGBA():b,a.fillRect(0,0,d.width,d.height),a.restore()},/**
         * Draw an image using the canvas api
         * @name drawImage
         * @memberOf me.CanvasRenderer
         * @function
         * @param {image} image Source image
         * @param {Number} sx Source x-coordinate
         * @param {Number} sy Source y-coordinate
         * @param {Number} sw Source width
         * @param {Number} sh Source height
         * @param {Number} dx Destination x-coordinate
         * @param {Number} dy Destination y-coordinate
         * @param {Number} dw Destination width
         * @param {Number} dh Destination height
         * @example
         * // Can be used in three ways:
         * renderer.drawImage(image, dx, dy);
         * renderer.drawImage(image, dx, dy, dw, dh);
         * renderer.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
         * // dx, dy, dw, dh being the destination target & dimensions. sx, sy, sw, sh being the position & dimensions to take from the image
         */
drawImage:function(){this.backBufferContext2D.drawImage.apply(this.backBufferContext2D,arguments)},/**
         * Fill an arc at the specified coordinates with given radius, start and end points
         * @name fillArc
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} x arc center point x-axis
         * @param {Number} y arc center point y-axis
         * @param {Number} radius
         * @param {Number} start start angle in radians
         * @param {Number} end end angle in radians
         * @param {Boolean} [antiClockwise=false] draw arc anti-clockwise
         */
fillArc:function(a,b,c,d,e,f){this.backBufferContext2D.save(),this.backBufferContext2D.beginPath(),this.backBufferContext2D.translate(a+c,b+c),this.backBufferContext2D.arc(0,0,c,d,e,f||!1),this.backBufferContext2D.fill(),this.backBufferContext2D.closePath(),this.backBufferContext2D.restore()},/**
         * Draw a filled rectangle at the specified coordinates
         * @name fillRect
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         * @param {Number} width
         * @param {Number} height
         */
fillRect:function(a,b,c,d){this.backBufferContext2D.fillRect(a,b,c,d)},/**
         * return a reference to the system 2d Context
         * @name getContext
         * @memberOf me.CanvasRenderer
         * @function
         * @return {Context2d}
         */
getContext:function(){return this.backBufferContext2D},/**
         * resets the canvas transform to identity
         * @name resetTransform
         * @memberOf me.CanvasRenderer
         * @function
         */
resetTransform:function(){this.backBufferContext2D.setTransform(1,0,0,1,0,0)},/**
         * scales the canvas & 2d Context
         * @name scaleCanvas
         * @memberOf me.CanvasRenderer
         * @function
         */
scaleCanvas:function(a,b){this.canvas.width=this.gameWidthZoom=this.backBufferCanvas.width*a,this.canvas.height=this.gameHeightZoom=this.backBufferCanvas.height*b,
// adjust CSS style for High-DPI devices
me.device.getPixelRatio()>1&&(this.canvas.style.width=this.canvas.width/me.device.getPixelRatio()+"px",this.canvas.style.height=this.canvas.height/me.device.getPixelRatio()+"px"),this.doubleBuffering&&this.transparent&&(
// Clears the front buffer for each frame blit
this.context.globalCompositeOperation="copy"),this.setAntiAlias(this.context,this.antiAlias),this.blitSurface()},/**
         * save the canvas context
         * @name save
         * @memberOf me.CanvasRenderer
         * @function
         */
save:function(){this.backBufferContext2D.save()},/**
         * restores the canvas context
         * @name restore
         * @memberOf me.CanvasRenderer
         * @function
         */
restore:function(){this.backBufferContext2D.restore(),this.globalColor.glArray[3]=this.backBufferContext2D.globalAlpha},/**
         * rotates the canvas context
         * @name rotate
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} angle in radians
         */
rotate:function(a){this.backBufferContext2D.rotate(a)},/**
         * scales the canvas context
         * @name scale
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         */
scale:function(a,b){this.backBufferContext2D.scale(a,b)},/**
         * Sets the fill & stroke style colors for the context.
         * @name setColor
         * @memberOf me.CanvasRenderer
         * @function
         * @param {me.Color|String} color css color value
         */
setColor:function(a){this.backBufferContext2D.strokeStyle=this.backBufferContext2D.fillStyle=a instanceof me.Color?a.toRGBA():a},/**
         * Sets the global alpha on the canvas context
         * @name setGlobalAlpha
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} alpha 0.0 to 1.0 values accepted.
         */
setGlobalAlpha:function(a){this.backBufferContext2D.globalAlpha=this.globalColor.glArray[3]=a},/**
         * sets the line width on the context
         * @name setLineWidth
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} width Line width
         */
setLineWidth:function(a){this.backBufferContext2D.lineWidth=a},/**
         * Stroke an arc at the specified coordinates with given radius, start and end points
         * @name strokeArc
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} x arc center point x-axis
         * @param {Number} y arc center point y-axis
         * @param {Number} radius
         * @param {Number} start start angle in radians
         * @param {Number} end end angle in radians
         * @param {Boolean} [antiClockwise=false] draw arc anti-clockwise
         */
strokeArc:function(a,b,c,d,e,f){this.backBufferContext2D.beginPath(),this.backBufferContext2D.translate(a+c,b+c),this.backBufferContext2D.arc(0,0,c,d,e,f||!1),this.backBufferContext2D.stroke(),this.backBufferContext2D.closePath()},/**
         * Stroke an ellipse at the specified coordinates with given radius, start and end points
         * @name strokeEllipse
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} x arc center point x-axis
         * @param {Number} y arc center point y-axis
         * @param {Number} w horizontal radius of the ellipse
         * @param {Number} h vertical radius of the ellipse
         */
strokeEllipse:function(a,b,c,d){this.context.beginPath();var e=c,f=d,g=a-e,h=a+e,i=b-f,j=b+f,k=.551784*e,l=.551784*f,m=a-k,n=a+k,o=b-l,p=b+l;this.backBufferContext2D.moveTo(a,i),this.backBufferContext2D.bezierCurveTo(n,i,h,o,h,b),this.backBufferContext2D.bezierCurveTo(h,p,n,j,a,j),this.backBufferContext2D.bezierCurveTo(m,j,g,p,g,b),this.backBufferContext2D.bezierCurveTo(g,o,m,i,a,i),this.backBufferContext2D.stroke()},/**
         * Stroke a line of the given two points
         * @name strokeLine
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} startX the start x coordinate
         * @param {Number} startY the start y coordinate
         * @param {Number} endX the end x coordinate
         * @param {Number} endY the end y coordinate
         */
strokeLine:function(a,b,c,d){this.backBufferContext2D.beginPath(),this.backBufferContext2D.moveTo(a,b),this.backBufferContext2D.lineTo(c,d),this.backBufferContext2D.stroke()},/**
         * Strokes a me.Polygon on the screen with a specified color
         * @name strokePolygon
         * @memberOf me.CanvasRenderer
         * @function
         * @param {me.Polygon} poly the shape to draw
         */
strokePolygon:function(a){this.backBufferContext2D.translate(a.pos.x,a.pos.y),this.backBufferContext2D.beginPath(),this.backBufferContext2D.moveTo(a.points[0].x,a.points[0].y);for(var b,c=1;c<a.points.length;c++)b=a.points[c],this.backBufferContext2D.lineTo(b.x,b.y);this.backBufferContext2D.lineTo(a.points[0].x,a.points[0].y),this.backBufferContext2D.stroke(),this.backBufferContext2D.closePath(),this.backBufferContext2D.translate(-a.pos.x,-a.pos.y)},/**
         * Stroke a rectangle at the specified coordinates with a given color
         * @name strokeRect
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         * @param {Number} width
         * @param {Number} height
         */
strokeRect:function(a,b,c,d){this.backBufferContext2D.strokeRect(a,b,c,d)},/**
         * draw the given shape
         * @name drawShape
         * @memberOf me.CanvasRenderer
         * @function
         * @param {me.Rect|me.Polygon|me.Line|me.Ellipse} shape a shape object
         */
drawShape:function(a){a instanceof me.Rect?this.strokeRect(a.left,a.top,a.width,a.height):a instanceof me.Line||a instanceof me.Polygon?(this.save(),this.strokePolygon(a),this.restore()):a instanceof me.Ellipse&&(this.save(),a.radiusV.x===a.radiusV.y?
// it's a circle
this.strokeArc(a.pos.x-a.radius,a.pos.y-a.radius,a.radius,0,2*Math.PI):
// it's an ellipse
this.strokeEllipse(a.pos.x,a.pos.y,a.radiusV.x,a.radiusV.y),this.restore())},/**
         * Multiply given matrix into the renderer tranformation matrix
         * @name multiplyMatrix
         * @memberOf me.CanvasRenderer
         * @function
         * @param {me.Matrix2d} mat2d Matrix to transform by
         */
transform:function(a){var b=a.val;this.backBufferContext2D.transform(b[0],b[1],b[3],b[4],b[6],b[7])},/**
         * Translates the context to the given position
         * @name translate
         * @memberOf me.CanvasRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         */
translate:function(a,b){this.backBufferContext2D.translate(a,b)}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a local constant for the -(Math.PI / 2) value
     * @ignore
     */
var a=-(Math.PI/2);/**
     * A Texture atlas object <br>
     * For portability, a global reference to this class is available through the default renderer: {@link me.video.renderer}.Texture <br>
     * <br>
     * Currently supports : <br>
     * - [TexturePacker]{@link http://www.codeandweb.com/texturepacker/} : through JSON export <br>
     * - [ShoeBox]{@link http://renderhjs.net/shoebox/} : through JSON export using the
     * melonJS setting [file]{@link https://github.com/melonjs/melonJS/raw/master/media/shoebox_JSON_export.sbx} <br>
     * - Standard (fixed cell size) spritesheet : through a {framewidth:xx, frameheight:xx} object
     * @class
     * @extends Object
     * @memberOf me.CanvasRenderer
     * @name Texture
     * @constructor
     * @param {Object} atlas atlas information. See {@link me.loader.getJSON}
     * @param {Image} [texture=atlas.meta.image] texture name
     * @param {Boolean} [cached=false] Use true to skip caching this Texture
     * @example
     * // create a texture atlas from a JSON Object
     * texture = new me.video.renderer.Texture(
     *     me.loader.getJSON("texture"),
     *     me.loader.getImage("texture")
     * );
     *
     * // create a texture atlas for a spritesheet
     * texture = new me.video.renderer.Texture(
     *     { framewidth : 32, frameheight : 32 },
     *     me.loader.getImage("spritesheet")
     * );
     */
me.CanvasRenderer.prototype.Texture=Object.extend(/** @scope me.video.renderer.Texture.prototype */
{/**
         * @ignore
         */
init:function(a,b,c){if(/**
             * to identify the atlas format (e.g. texture packer)
             * @ignore
             */
this.format=null,/**
             * the image texture itself (FIXME: This should be named `image`)
             * @ignore
             */
this.texture=b||null,/**
             * the atlas dictionnary
             * @ignore
             */
this.atlas=null,"undefined"!=typeof a)if("undefined"!=typeof a.meta){
// Texture Packer
if(a.meta.app.contains("texturepacker"))
// set the texture
if(this.format="texturepacker","undefined"==typeof b){var d=a.meta.image;if(this.texture=me.utils.getImage(d),!this.texture)throw new me.video.renderer.Texture.Error("Atlas texture '"+d+"' not found")}else this.texture=b;else if(a.meta.app.contains("ShoeBox")){if(!a.meta.exporter||!a.meta.exporter.contains("melonJS"))throw new me.video.renderer.Texture.Error("ShoeBox requires the JSON exporter : https://github.com/melonjs/melonJS/tree/master/media/shoebox_JSON_export.sbx");this.format="ShoeBox",
// set the texture
this.texture=b}else a.meta.app.contains("melonJS")&&(this.format="melonJS",this.texture=b);
// initialize the atlas
this.atlas=this.build(a)}else
// a regular spritesheet ?
"undefined"!=typeof a.framewidth&&"undefined"!=typeof a.frameheight&&(this.format="Spritesheet (fixed cell size)",void 0!==typeof b&&(
// overwrite if specified
a.image=b),
// initialize the atlas
this.atlas=this.buildFromSpriteSheet(a));
// if format not recognized
if(!this.atlas)throw new me.video.renderer.Texture.Error("texture atlas format not supported");
// Add self to TextureCache
c||me.video.renderer.cache.put(this.texture,this)},/**
         * @ignore
         */
build:function(b){var c={};return b.frames.forEach(function(b){
// fix wrongly formatted JSON (e.g. last dummy object in ShoeBox)
if(b.hasOwnProperty("filename")){
// Source coordinates
var d=b.frame;c[b.filename]={name:name,// frame name
offset:new me.Vector2d(d.x,d.y),width:d.w,height:d.h,angle:b.rotated===!0?a:0}}}),c},/**
         * build an atlas from the given spritesheet
         * @ignore
         */
buildFromSpriteSheet:function(a){var b={},c=a.image,d=a.spacing||0,e=a.margin||0,f=c.width,g=c.height,h=new me.Vector2d(~~((f-e+d)/(a.framewidth+d)),~~((g-e+d)/(a.frameheight+d)));
// verifying the texture size
((f-e+d)%(a.framewidth+d)!==0||(g-e+d)%(a.frameheight+d)!==0)&&(f=e+h.x*(a.framewidth+d),g=e+h.y*(a.frameheight+d),console.warn("Spritesheet Texture for image: "+c.src+" is not divisible by "+(a.framewidth+d)+"x"+(a.frameheight+d)+", truncating effective size to "+f+"x"+g));
// build the local atlas
for(var i=0,j=h.x*h.y;j>i;i++)b[""+i]={name:""+i,offset:new me.Vector2d(e+(d+a.framewidth)*(i%h.x),e+(d+a.frameheight)*~~(i/h.x)),width:a.framewidth,height:a.frameheight,angle:0};return b},/**
         * return the Atlas dictionnary
         * @name getAtlas
         * @memberOf me.CanvasRenderer.Texture
         * @function
         * @return {Object}
         */
getAtlas:function(){return this.atlas},/**
         * return the Atlas texture
         * @name getTexture
         * @memberOf me.CanvasRenderer.Texture
         * @function
         * @return {Image}
         */
getTexture:function(){return this.texture},/**
         * return a normalized region/frame information for the specified sprite name
         * @name getRegion
         * @memberOf me.CanvasRenderer.Texture
         * @function
         * @param {String} name name of the sprite
         * @return {Object}
         */
getRegion:function(a){return this.atlas[a]},/**
         * Create a sprite object using the first region found using the specified name
         * @name createSpriteFromName
         * @memberOf me.CanvasRenderer.Texture
         * @function
         * @param {String} name name of the sprite
         * @return {me.Sprite}
         * @example
         * // create a new texture atlas object under the `game` namespace
         * game.texture = new me.video.renderer.Texture(
         *    me.loader.getJSON("texture"),
         *    me.loader.getImage("texture")
         * );
         * ...
         * ...
         * // add the coin sprite as renderable for the entity
         * this.renderable = game.texture.createSpriteFromName("coin.png");
         * // set the renderable position to bottom center
         * this.anchorPoint.set(0.5, 1.0);
         */
createSpriteFromName:function(a){var b=this.getRegion(a);if(b){
// instantiate a new sprite object
var c=me.pool.pull("me.Sprite",0,0,{image:this.getTexture(),framewidth:b.width,frameheight:b.height});
// return our object
// set the sprite offset within the texture
// set angle if defined
return c.offset.setV(b.offset),c._sourceAngle=b.angle,c}
// throw an error
throw new me.video.renderer.Texture.Error("Texture - region for "+a+" not found")},/**
         * Create an animation object using the first region found using all specified names
         * @name createAnimationFromName
         * @memberOf me.CanvasRenderer.Texture
         * @function
         * @param {String[]|Number[]} names list of names for each sprite
         * (when manually creating a Texture out of a spritesheet, only numeric values are authorized)
         * @return {me.AnimationSheet}
         * @example
         * // create a new texture atlas object under the `game` namespace
         * game.texture = new me.video.renderer.Texture(
         *     me.loader.getJSON("texture"),
         *     me.loader.getImage("texture")
         * );
         *
         * // create a new animationSheet as renderable for the entity
         * this.renderable = game.texture.createAnimationFromName([
         *     "walk0001.png", "walk0002.png", "walk0003.png",
         *     "walk0004.png", "walk0005.png", "walk0006.png",
         *     "walk0007.png", "walk0008.png", "walk0009.png",
         *     "walk0010.png", "walk0011.png"
         * ]);
         *
         * // define an additional basic walking animation
         * this.renderable.addAnimation ("simple_walk", [0,2,1]);
         * // you can also use frame name to define your animation
         * this.renderable.addAnimation ("speed_walk", ["walk0007.png", "walk0008.png", "walk0009.png", "walk0010.png"]);
         * // set the default animation
         * this.renderable.setCurrentAnimation("simple_walk");
         * // set the renderable position to bottom center
         * this.anchorPoint.set(0.5, 1.0);
         */
createAnimationFromName:function(a){
// iterate through the given names
// and create a "normalized" atlas
for(var b=[],c={},d=0;d<a.length;++d)if(b[d]=this.getRegion(a[d]),c[a[d]]=d,null==b[d])
// throw an error
throw new me.video.renderer.Texture.Error("Texture - region for "+a[d]+" not found");
// instantiate a new animation sheet object
return new me.AnimationSheet(0,0,{image:this.texture,framewidth:0,frameheight:0,margin:0,spacing:0,atlas:b,atlasIndices:c})}}),/**
     * Base class for Texture exception handling.
     * @name Error
     * @class
     * @memberOf me.CanvasRenderer.Texture
     * @constructor
     * @param {String} msg Error message.
     */
me.CanvasRenderer.prototype.Texture.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.CanvasRenderer.Texture.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015 Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * The WebGL Shader singleton <br>
     * There is no constructor function for me.video.shader
     * @namespace me.video.shader
     * @memberOf me.video
     */
me.video.shader=function(){/**
         * Compile GLSL into a shader object
         * @private
         */
function a(a,b,c){var d=a.createShader(b);if(a.shaderSource(d,c),a.compileShader(d),!a.getShaderParameter(d,a.COMPILE_STATUS))throw new me.video.Error(a.getShaderInfoLog(d));return d}/**
         * Public API
         * @ignore
         */
var b={},c={bool:"1i","int":"1i","float":"1f",vec2:"2fv",vec3:"3fv",vec4:"4fv",bvec2:"2iv",bvec3:"3iv",bvec4:"4iv",ivec2:"2iv",ivec3:"3iv",ivec4:"4iv",mat2:"Matrix2fv",mat3:"Matrix3fv",mat4:"Matrix4fv",sampler2D:"1i"};/**
         * Create a shader program (with bindings) using the given GLSL sources
         * @name createShader
         * @memberOf me.video.shader
         * @function
         * @param {WebGLContext} gl WebGL Context
         * @param {String} vertex Vertex shader source
         * @param {String} fragment Fragment shader source
         * @return {Object} A reference to the WebGL Shader Program
         */
/**
         * Create a texture from an image
         * @name createTexture
         * @memberOf me.video.shader
         * @function
         * @param {WebGLContext} gl WebGL Context
         * @param {Number} unit Destination texture unit
         * @param {Image|Canvas|ImageData|UInt8Array[]|Float32Array[]} image Source image
         * @param {Number} [w] Source image width (Only use with UInt8Array[] or Float32Array[] source image)
         * @param {Number} [h] Source image height (Only use with UInt8Array[] or Float32Array[] source image)
         * @param {Number} [b] Source image border (Only use with UInt8Array[] or Float32Array[] source image)
         * @return {WebGLTexture} A texture object
         */
return b.createShader=function(b,d,e){var f,g={attributes:{},uniforms:{},handle:null},h=g.handle=b.createProgram(),i=/attribute\s+\w+\s+(\w+)/g,j=/uniform\s+(\w+)\s+(\w+)/g,k=[],l={},m={},n={};if(b.attachShader(h,a(b,b.VERTEX_SHADER,d)),b.attachShader(h,a(b,b.FRAGMENT_SHADER,e)),b.linkProgram(h),!b.getProgramParameter(h,b.LINK_STATUS))throw new me.video.Error(b.getProgramInfoLog(h));
// Detect all attribute names
for(b.useProgram(h);f=i.exec(d);)k.push(f[1]);
// Detect all uniform names and types
// Get attribute references
// Get uniform references
return[d,e].forEach(function(a){for(;f=j.exec(a);)l[f[2]]=f[1]}),k.forEach(function(a){g.attributes[a]=b.getAttribLocation(h,a),b.enableVertexAttribArray(g.attributes[a])}),Object.keys(l).forEach(function(a){var d=l[a];n[a]=b.getUniformLocation(h,a),m[a]={get:function(a){/**
                         * A getter for the uniform location
                         * @ignore
                         */
return function(){return n[a]}}(a),set:function(a,c,d){return 0===c.indexOf("mat")?function(c){b[d](n[a],!1,c)}:function(c){var e=d;c.length&&"v"!==d.substr(-1)&&(e+="v"),b[e](n[a],c)}}(a,d,"uniform"+c[d])}}),Object.defineProperties(g.uniforms,m),g},b.createTexture=function(a,b,c,d,e,f){var g=a.createTexture(),h=me.video.renderer.antiAlias?a.LINEAR:a.NEAREST;return a.activeTexture(a.TEXTURE0+b),a.bindTexture(a.TEXTURE_2D,g),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_S,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_WRAP_T,a.CLAMP_TO_EDGE),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MAG_FILTER,h),a.texParameteri(a.TEXTURE_2D,a.TEXTURE_MIN_FILTER,h),d||e||f?a.texImage2D(a.TEXTURE_2D,0,a.RGBA,d,e,f,a.RGBA,a.UNSIGNED_BYTE,c):a.texImage2D(a.TEXTURE_2D,0,a.RGBA,a.RGBA,a.UNSIGNED_BYTE,c),g},b}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015 Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a WebGL renderer object
     * @extends me.Renderer
     * @namespace me.WebGLRenderer
     * @memberOf me
     * @constructor
     * @param {Canvas} canvas The html canvas tag to draw to on screen.
     * @param {Number} width The width of the canvas without scaling
     * @param {Number} height The height of the canvas without scaling
     * @param {Object} [options] The renderer parameters
     * @param {Boolean} [options.doubleBuffering=false] Whether to enable double buffering
     * @param {Boolean} [options.antiAlias=false] Whether to enable anti-aliasing
     * @param {Boolean} [options.transparent=false] Whether to enable transparency on the canvas (performance hit when enabled)
     * @param {Number} [options.zoomX=width] The actual width of the canvas with scaling applied
     * @param {Number} [options.zoomY=height] The actual height of the canvas with scaling applied
     * @param {me.WebGLRenderer.Compositor} [options.compositor] A class that implements the compositor API
     */
me.WebGLRenderer=me.Renderer.extend(/** @scope me.WebGLRenderer.prototype */
{/**
         * @ignore
         */
init:function(a,b,c,d){me.Renderer.prototype.init.apply(this,[a,b,c,d]),/**
             * The WebGL context
             * @name gl
             * @memberOf me.WebGLRenderer
             */
this.gl=this.getContextGL(a,!this.transparent);var e=this.gl;/**
             * @ignore
             */
this.colorStack=[],/**
             * @ignore
             */
this._matrixStack=[],/**
             * @ignore
             */
this._linePoints=[new me.Vector2d,new me.Vector2d,new me.Vector2d,new me.Vector2d],/**
             * The global matrix. Used for transformations on the overall scene
             * @name globalMatrix
             * @type me.Matrix3d
             * @memberOf me.WebGLRenderer
             */
this.globalMatrix=new me.Matrix2d;
// Create a compositor
var f=d.compositor||me.WebGLRenderer.Compositor;
// Create a texture cache
// FIXME: Cannot reference me.video.renderer yet
// Configure the WebGL viewport
return this.compositor=new f(e,this.globalMatrix,this.globalColor),this.cache=new me.Renderer.TextureCache(this.compositor.maxTextures),me.video.renderer=this,this.createFillTexture(),this.createFontTexture(),this.scaleCanvas(1,1),this},/**
         * @ignore
         */
createFillTexture:function(){
// Create a 1x1 white texture for fill operations
var a=new Uint8Array([255,255,255,255]);/**
             * @ignore
             */
this.fillTexture=new this.Texture({
// FIXME: Create a texture atlas helper function
meta:{app:"melonJS",size:{w:1,h:1}},frames:[{filename:"default",frame:{x:0,y:0,w:1,h:1}}]},a),this.cache.put(a,this.fillTexture),this.compositor.uploadTexture(this.fillTexture,1,1,0)},/**
         * @ignore
         */
createFontTexture:function(){var a=me.video.createCanvas(this.backBufferCanvas.width,this.backBufferCanvas.height);/**
             * @ignore
             */
this.fontContext2D=this.getContext2d(a),/**
             * @ignore
             */
this.fontTexture=new this.Texture({
// FIXME: Create a texture atlas helper function
meta:{app:"melonJS",size:{w:this.backBufferCanvas.width,h:this.backBufferCanvas.height}},frames:[{filename:"default",frame:{x:0,y:0,w:this.backBufferCanvas.width,h:this.backBufferCanvas.height}}]},a),this.cache.put(a,this.fontTexture),this.compositor.uploadTexture(this.fontTexture)},/**
         * Flush the compositor to the frame buffer
         * @name blitSurface
         * @memberOf me.WebGLRenderer
         * @function
         */
blitSurface:function(){this.compositor.flush()},/**
         * Clears the gl context. Accepts a gl context or defaults to stored gl renderer.
         * @name clearSurface
         * @memberOf me.WebGLRenderer
         * @function
         * @param {WebGLContext} [ctx=null] For compatibility only.
         * @param {me.Color|String} color CSS color.
         * @param {Boolean} [opaque=false] Allow transparency [default] or clear the surface completely [true]
         */
clearSurface:function(a,b,c){var d=this.globalColor.clone(),e=this.globalMatrix.clone();this.globalColor.copy(b),this.globalMatrix.identity(),c?this.compositor.clear():this.fillRect(0,0,this.canvas.width,this.canvas.height),this.globalMatrix.copy(e),this.globalColor.copy(d),me.pool.push(d)},/**
         * @ignore
         */
drawFont:function(a){
// Flush the compositor so we can upload a new texture
this.compositor.flush(),
// Force-upload the new texture
this.compositor.uploadTexture(this.fontTexture,0,0,0,!0);
// Add the new quad
var b=a.x+","+a.y+","+a.w+","+a.h;this.compositor.addQuad(this.fontTexture,b,a.x,a.y,a.w,a.h),
// Clear font context2D
this.fontContext2D.clearRect(0,0,this.backBufferCanvas.width,this.backBufferCanvas.height)},/**
         * Draw an image to the gl context
         * @name drawImage
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Image} image Source image
         * @param {Number} sx Source x-coordinate
         * @param {Number} sy Source y-coordinate
         * @param {Number} sw Source width
         * @param {Number} sh Source height
         * @param {Number} dx Destination x-coordinate
         * @param {Number} dy Destination y-coordinate
         * @param {Number} dw Destination width
         * @param {Number} dh Destination height
         * @example
         * // Can be used in three ways:
         * renderer.drawImage(image, dx, dy);
         * renderer.drawImage(image, dx, dy, dw, dh);
         * renderer.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
         * // dx, dy, dw, dh being the destination target & dimensions. sx, sy, sw, sh being the position & dimensions to take from the image
         */
drawImage:function(a,b,c,d,e,f,g,h,i){
// TODO: Replace the function signature with:
// drawImage(Image|Object, sx, sy, sw, sh, dx, dy, dw, dh)
"undefined"==typeof d?(d=h=a.width,e=i=a.height,f=b,g=c,b=0,c=0):"undefined"==typeof f&&(f=b,g=c,h=d,i=e,d=a.width,e=a.height,b=0,c=0);var j=b+","+c+","+d+","+e;this.compositor.addQuad(this.cache.get(a),j,f,g,h,i)},/**
         * Draw a filled rectangle at the specified coordinates
         * @name fillRect
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         * @param {Number} width
         * @param {Number} height
         */
fillRect:function(a,b,c,d){this.compositor.addQuad(this.fillTexture,"default",a,b,c,d)},/**
         * return a reference to the screen canvas corresponding WebGL Context<br>
         * @name getScreenContext
         * @memberOf me.WebGLRenderer
         * @function
         * @return {WebGLContext}
         */
getScreenContext:function(){return this.gl},/**
         * Returns the WebGL Context object of the given Canvas
         * @name getContextGL
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Canvas} canvas
         * @param {Boolean} [opaque=false] Use true to disable transparency
         * @return {WebGLContext}
         */
getContextGL:function(a,b){if("undefined"==typeof a||null===a)throw new me.video.Error("You must pass a canvas element in order to create a GL context");if("undefined"==typeof a.getContext)throw new me.video.Error("Your browser does not support WebGL.");var c={antialias:this.antiAlias,alpha:!b};return a.getContext("webgl",c)||a.getContext("experimental-webgl",c)},/**
         * Returns the WebGLContext instance for the renderer
         * return a reference to the system 2d Context
         * @name getContext
         * @memberOf me.WebGLRenderer
         * @function
         * @return {WebGLContext}
         */
getContext:function(){return this.gl},/**
         * resets the gl transform to identity
         * @name resetTransform
         * @memberOf me.WebGLRenderer
         * @function
         */
resetTransform:function(){this.globalMatrix.identity()},/**
         * Reset context state
         * @name reset
         * @memberOf me.WebGLRenderer
         * @function
         */
reset:function(){this.globalMatrix.identity(),this.cache.reset(),this.compositor.reset(),this.createFillTexture(),this.createFontTexture()},/**
         * scales the canvas & GL Context
         * @name scaleCanvas
         * @memberOf me.WebGLRenderer
         * @function
         */
scaleCanvas:function(a,b){var c=this.canvas.width*a,d=this.canvas.height*b;
// adjust CSS style for High-DPI devices
me.device.getPixelRatio()>1?(this.canvas.style.width=c/me.device.getPixelRatio()+"px",this.canvas.style.height=d/me.device.getPixelRatio()+"px"):(this.canvas.style.width=c+"px",this.canvas.style.height=d+"px"),this.compositor.setProjection(this.canvas.width,this.canvas.height)},/**
         * restores the canvas context
         * @name restore
         * @memberOf me.WebGLRenderer
         * @function
         */
restore:function(){var a=this.colorStack.pop();me.pool.push(a),this.globalColor.copy(a),this.globalMatrix.copy(this._matrixStack.pop())},/**
         * rotates the uniform matrix
         * @name rotate
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} angle in radians
         */
rotate:function(a){this.globalMatrix.rotate(a)},/**
         * save the canvas context
         * @name save
         * @memberOf me.WebGLRenderer
         * @function
         */
save:function(){this.colorStack.push(this.globalColor.clone()),this._matrixStack.push(this.globalMatrix.clone())},/**
         * scales the uniform matrix
         * @name scale
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         */
scale:function(a,b){this.globalMatrix.scale(a,b)},/**
         * not used by this renderer?
         * @ignore
         */
setAntiAlias:function(a,b){me.Renderer.prototype.setAntiAlias.apply(this,[a,b])},/**
         * return the current global alpha
         * @name globalAlpha
         * @memberOf me.WebGLRenderer
         * @function
         * @return {Number}
         */
setGlobalAlpha:function(a){this.globalColor.glArray[3]=a},/**
         * Sets the color for further draw calls
         * @name setColor
         * @memberOf me.WebGLRenderer
         * @function
         * @param {me.Color|String} color css color string.
         */
setColor:function(a){this.globalColor.copy(a)},/**
         * Set the line width
         * @name setLineWidth
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} width Line width
         */
setLineWidth:function(a){this.compositor.lineWidth(a)},/**
         * Stroke an arc at the specified coordinates with given radius, start and end points
         * @name strokeArc
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} x arc center point x-axis
         * @param {Number} y arc center point y-axis
         * @param {Number} radius
         * @param {Number} start start angle in radians
         * @param {Number} end end angle in radians
         * @param {Boolean} [antiClockwise=false] draw arc anti-clockwise
         */
strokeArc:function(){},/**
         * Stroke an ellipse at the specified coordinates with given radius, start and end points
         * @name strokeEllipse
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} x arc center point x-axis
         * @param {Number} y arc center point y-axis
         * @param {Number} w horizontal radius of the ellipse
         * @param {Number} h vertical radius of the ellipse
         */
strokeEllipse:function(){},/**
         * Stroke a line of the given two points
         * @name strokeLine
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} startX the start x coordinate
         * @param {Number} startY the start y coordinate
         * @param {Number} endX the end x coordinate
         * @param {Number} endY the end y coordinate
         */
strokeLine:function(a,b,c,d){var e=this._linePoints.slice(0,2);e[0].x=a,e[0].y=b,e[1].x=c,e[1].y=d,this.compositor.drawLine(e,!0)},/**
         * Strokes a me.Polygon on the screen with a specified color
         * @name strokePolygon
         * @memberOf me.WebGLRenderer
         * @function
         * @param {me.Polygon} poly the shape to draw
         */
strokePolygon:function(a){var b,c,d=a.points.length;
// Grow internal points buffer if necessary
for(c=this._linePoints.length;d>c;c++)this._linePoints.push(new me.Vector2d);for(b=this._linePoints.slice(0,d),c=0;d>c;c++)b[c].x=a.pos.x+a.points[c].x,b[c].y=a.pos.y+a.points[c].y;this.compositor.drawLine(b)},/**
         * Draw a stroke rectangle at the specified coordinates
         * @name strokeRect
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         * @param {Number} width
         * @param {Number} height
         */
strokeRect:function(a,b,c,d){var e=this._linePoints.slice(0,4);e[0].x=a,e[0].y=b,e[1].x=a+c,e[1].y=b,e[2].x=a+c,e[2].y=b+d,e[3].x=a,e[3].y=b+d,this.compositor.drawLine(e)},/**
         * draw the given shape
         * @name drawShape
         * @memberOf me.WebGLRenderer
         * @function
         * @param {me.Rect|me.Polygon|me.Line|me.Ellipse} shape a shape object
         */
drawShape:function(a){a instanceof me.Rect?this.strokeRect(a.left,a.top,a.width,a.height):a instanceof me.Line||a instanceof me.Polygon?(this.save(),this.strokePolygon(a),this.restore()):a instanceof me.Ellipse&&(this.save(),a.radiusV.x===a.radiusV.y?
// it's a circle
this.strokeArc(a.pos.x-a.radius,a.pos.y-a.radius,a.radius,0,2*Math.PI):
// it's an ellipse
this.strokeEllipse(a.pos.x,a.pos.y,a.radiusV.x,a.radiusV.y),this.restore())},/**
         * Multiply given matrix into the renderer tranformation matrix
         * @name multiplyMatrix
         * @memberOf me.WebGLRenderer
         * @function
         * @param {me.Matrix2d} mat2d Matrix to transform by
         */
transform:function(a){this.globalMatrix.multiply(a)},/**
         * Translates the uniform matrix by the given coordinates
         * @name translate
         * @memberOf me.WebGLRenderer
         * @function
         * @param {Number} x
         * @param {Number} y
         */
translate:function(a,b){this.globalMatrix.translate(a,b)}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * A Texture atlas object for WebGL <br>
     * For portability, a global reference to this class is available through the default renderer: {@link me.video.renderer}.Texture <br>
     * <br>
     * Currently supports : <br>
     * - [TexturePacker]{@link http://www.codeandweb.com/texturepacker/} : through JSON export <br>
     * - [ShoeBox]{@link http://renderhjs.net/shoebox/} : through JSON export using the
     * melonJS setting [file]{@link https://github.com/melonjs/melonJS/raw/master/media/shoebox_JSON_export.sbx} <br>
     * - Standard (fixed cell size) spritesheet : through a {framewidth:xx, frameheight:xx} object
     * @class
     * @extends me.CanvasRenderer
     * @memberOf me.WebGLRenderer
     * @name Texture
     * @constructor
     * @param {Object} atlas atlas information. See {@link me.loader.getJSON}
     * @param {Image} [texture=atlas.meta.image] texture name
     * @param {Boolean} [cached=false] Use true to skip caching this Texture
     * @example
     * // create a texture atlas from a JSON Object
     * texture = new me.video.renderer.Texture(
     *     me.loader.getJSON("texture"),
     *     me.loader.getImage("texture")
     * );
     *
     * // create a texture atlas for a spritesheet
     * texture = new me.video.renderer.Texture(
     *     { framewidth : 32, frameheight : 32 },
     *     me.loader.getImage("spritesheet")
     * );
     */
me.WebGLRenderer.prototype.Texture=me.CanvasRenderer.prototype.Texture.extend(/** @scope me.video.renderer.Texture.prototype */
{/**
         * @ignore
         */
build:function(a){var b=a.meta.size.w,c=a.meta.size.h,d=me.CanvasRenderer.prototype.Texture.prototype.build.apply(this,[a]);return this._addStMap(d,b,c)},/**
         * @ignore
         */
buildFromSpriteSheet:function(a){var b=a.image.width,c=a.image.height,d=me.CanvasRenderer.prototype.Texture.prototype.buildFromSpriteSheet.apply(this,[a]);return this._addStMap(d,b,c)},/**
         * @ignore
         */
_addStMap:function(a,b,c){return Object.keys(a).forEach(function(d){
// Source coordinates
var e=a[d].offset,f=a[d].width,g=a[d].height;
// ST texture coordinates
a[d].stMap=new Float32Array([e.x/b,// Left
e.y/c,// Top
(e.x+f)/b,// Right
(e.y+g)/c]);
// Cache source coordinates
// TODO: Remove this when the Batcher only accepts a region name
var h=e.x+","+e.y+","+b+","+c;a[h]=a[d]}),a},/**
         * @ignore
         */
_insertRegion:function(a,b,c,d,e){var f=this.texture.width,g=this.texture.height;return this.atlas[a]={name:a,offset:new me.Vector2d(b,c),width:d,height:e,angle:0,stMap:new Float32Array([b/f,// Left
c/g,// Top
(b+d)/f,// Right
(c+e)/g])},this.atlas[a]}}),/**
    * Base class for Texture exception handling.
    * @ignore
    */
me.WebGLRenderer.prototype.Texture.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.WebGLRenderer.Texture.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015 Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
function(){
// Handy constants
var a=2,b=4,c=1,d=2,e=a+b+c+d,f=e*Float32Array.BYTES_PER_ELEMENT,g=0,h=g+a,i=h+b,j=i+c,k=g*Float32Array.BYTES_PER_ELEMENT,l=h*Float32Array.BYTES_PER_ELEMENT,m=i*Float32Array.BYTES_PER_ELEMENT,n=j*Float32Array.BYTES_PER_ELEMENT,o=4,p=6,q=16e3;/**
     * A WebGL texture Compositor object. This class handles all of the WebGL state<br>
     * Pushes texture regions into WebGL buffers, automatically flushes to GPU
     * @extends Object
     * @namespace me.WebGLRenderer.Compositor
     * @memberOf me
     * @constructor
     * @param {WebGLContext} gl Destination WebGL Context
     * @param {me.Matrix2d} matrix Global transformation matrix
     * @param {me.Color} color Global color
     */
me.WebGLRenderer.Compositor=Object.extend(/** @scope me.WebGLRenderer.Compositor.prototype */
{/**
         * @ignore
         */
init:function(g,h,i){/**
             * The number of quads held in the batch
             * @name length
             * @memberOf me.WebGLRenderer.Compositor
             * @type Number
             * @readonly
             */
this.length=0,
// Hash map of texture units
this.units=[],/*
             * XXX: The GLSL compiler pukes with "memory exhausted" when it is
             * given long if-then-else chains.
             *
             * See: http://stackoverflow.com/questions/15828966/glsl-compile-error-memory-exhausted
             *
             * Workaround the problem by limiting the max texture support to 24.
             * The magic number was determined by testing under different UAs.
             * All Desktop UAs were capable of compiling with 27 fragment shader
             * samplers. Using 24 seems like a reasonable compromise;
             *
             * 24 = 2^4 + 2^3
             *
             * As of July 2015, approximately 1.5% of all WebGL-enabled UAs
             * support more than 24 max textures, according to
             * http://webglstats.com/
             */
this.maxTextures=Math.min(24,g.getParameter(g.MAX_TEXTURE_IMAGE_UNITS)),
// Vector pool
this.v=[new me.Vector2d,new me.Vector2d,new me.Vector2d,new me.Vector2d],
// WebGL context
this.gl=g,
// Global transformation matrix
this.matrix=h,
// Global color
this.color=i,
// Uniform projection matrix
this.uMatrix=new me.Matrix2d;
// Detect GPU capabilities
var j=g.getShaderPrecisionFormat(g.FRAGMENT_SHADER,g.HIGH_FLOAT).precision<16?"mediump":"highp";
// Load and create shader programs
this.lineShader=me.video.shader.createShader(this.gl,function(a){var b="precision highp float;attribute vec2 aVertex;uniform mat3 uMatrix;void main(void){gl_Position=vec4((uMatrix*vec3(aVertex,1)).xy,0,1);}";return b}(),function(a){var b="precision "+a.precision+" float;uniform vec4 uColor;void main(void){gl_FragColor=uColor;}";return b}({precision:j})),this.quadShader=me.video.shader.createShader(this.gl,function(a){var b="precision highp float;attribute vec2 aVertex;attribute vec4 aColor;attribute float aTexture;attribute vec2 aRegion;uniform mat3 uMatrix;varying vec4 vColor;varying float vTexture;varying vec2 vRegion;void main(void){gl_Position=vec4((uMatrix*vec3(aVertex,1)).xy,0,1);vColor=aColor;vTexture=aTexture;vRegion=aRegion;}";return b}(),function(a){for(var b="precision "+a.precision+" float;uniform sampler2D uSampler["+a.maxTextures+"];varying vec4 vColor;varying float vTexture;varying vec2 vRegion;void main(void){int texture=int(vTexture);if(texture==0){gl_FragColor=texture2D(uSampler[0],vRegion)*vColor;}",c=1;c<a.maxTextures-1;c++)b+="else if(texture=="+c+"){gl_FragColor=texture2D(uSampler["+c+"],vRegion)*vColor;}";return b+="else{gl_FragColor=texture2D(uSampler["+(a.maxTextures-1)+"],vRegion)*vColor;}}"}({precision:j,maxTextures:this.maxTextures})),this.shader=this.quadShader.handle,
// Stream buffer
this.sb=g.createBuffer(),g.bindBuffer(g.ARRAY_BUFFER,this.sb),g.bufferData(g.ARRAY_BUFFER,q*f*o,g.STREAM_DRAW),this.sbSize=256,this.sbIndex=0,
// Quad stream buffer
this.stream=new Float32Array(this.sbSize*e*o),
// Index buffer
this.ib=g.createBuffer(),g.bindBuffer(g.ELEMENT_ARRAY_BUFFER,this.ib),g.bufferData(g.ELEMENT_ARRAY_BUFFER,this.createIB(),g.STATIC_DRAW),
// Bind attribute pointers for quad shader
g.vertexAttribPointer(this.quadShader.attributes.aVertex,a,g.FLOAT,!1,f,k),g.vertexAttribPointer(this.quadShader.attributes.aColor,b,g.FLOAT,!1,f,l),g.vertexAttribPointer(this.quadShader.attributes.aTexture,c,g.FLOAT,!1,f,m),g.vertexAttribPointer(this.quadShader.attributes.aRegion,d,g.FLOAT,!1,f,n),this.reset(),this.setProjection(g.canvas.width,g.canvas.height),
// Initialize clear color and blend function
g.clearColor(0,0,0,1),g.enable(g.BLEND),g.blendFunc(g.SRC_ALPHA,g.ONE_MINUS_SRC_ALPHA)},/**
         * Sets the projection matrix with the given size
         * @name setProjection
         * @memberOf me.WebGLRenderer.Compositor
         * @function
         * @param {Number} w WebGL Canvas width
         * @param {Number} h WebGL Canvas height
         */
setProjection:function(a,b){this.flush(),this.gl.viewport(0,0,a,b),this.uMatrix.set(2/a,0,0,0,-2/b,0,-1,1,1),
// FIXME: Configure the projection matrix in `useShader`
this.quadShader.uniforms.uMatrix=this.uMatrix.val},/**
         * @ignore
         */
uploadTexture:function(a,b,c,d,e){var f=me.video.renderer.cache.getUnit(a);return(!this.units[f]||e)&&(this.units[f]=!0,me.video.shader.createTexture(this.gl,f,a.texture,b,c,d)),f},/**
         * Reset compositor internal state
         * @ignore
         */
reset:function(){this.sbIndex=0,this.length=0;for(var a=[],b=0;b<this.maxTextures;b++)this.units[b]=!1,a[b]=b;this.quadShader.uniforms.uSampler=a},/**
         * Create a full index buffer for the element array
         * @ignore
         */
createIB:function(){for(var a=[0,1,2,2,1,3],b=new Array(q*p),c=0;c<b.length;c++)b[c]=a[c%p]+~~(c/p)*o;return new Uint16Array(b)},/**
         * Resize the stream buffer, retaining its original contents
         * @ignore
         */
resizeSB:function(){this.sbSize<<=1;var a=new Float32Array(this.sbSize*e*o);a.set(this.stream),this.stream=a},/**
         * Select the shader to use for compositing
         * @name useShader
         * @memberOf me.WebGLRenderer.Compositor
         * @function
         * @param {WebGLProgram} shader The shader program to use
         */
useShader:function(a){this.shader!==a&&(this.flush(),this.shader=a,this.gl.useProgram(this.shader))},/**
         * Add a textured quad
         * @name addQuad
         * @memberOf me.WebGLRenderer.Compositor
         * @function
         * @param {me.video.renderer.Texture} texture Source texture
         * @param {String} key Source texture region name
         * @param {Number} x Destination x-coordinate
         * @param {Number} y Destination y-coordinate
         * @param {Number} w Destination width
         * @param {Number} h Destination height
         */
addQuad:function(a,b,c,d,f,k){this.useShader(this.quadShader.handle),this.length>=q&&this.flush(),this.length>=this.sbSize&&this.resizeSB();
// Transform vertices
var l=this.matrix,m=this.v[0].set(c,d),n=this.v[1].set(c+f,d),p=this.v[2].set(c,d+k),r=this.v[3].set(c+f,d+k);l.isIdentity()||(l.vectorMultiply(m),l.vectorMultiply(n),l.vectorMultiply(p),l.vectorMultiply(r));
// Array index computation
var s=this.sbIndex,t=s+e,u=t+e,v=u+e;
// Fill vertex buffer
// FIXME: Pack each vertex vector into single float
this.stream[s+g+0]=m.x,this.stream[s+g+1]=m.y,this.stream[t+g+0]=n.x,this.stream[t+g+1]=n.y,this.stream[u+g+0]=p.x,this.stream[u+g+1]=p.y,this.stream[v+g+0]=r.x,this.stream[v+g+1]=r.y;
// Fill color buffer
// FIXME: Pack color vector into single float
var w=this.color.toGL();this.stream.set(w,s+h),this.stream.set(w,t+h),this.stream.set(w,u+h),this.stream.set(w,v+h);
// Fill texture index buffer
// FIXME: Can the texture index be packed into another element?
var x=this.uploadTexture(a);this.stream[s+i]=this.stream[t+i]=this.stream[u+i]=this.stream[v+i]=x;
// Get the source texture region
var y=a.getRegion(b);if("undefined"==typeof y){
// TODO: Require proper atlas regions instead of caching arbitrary region keys
console.warn("Adding texture region",b,"for texture",a);var z=b.split(","),A=+z[0],B=+z[1],C=+z[2],D=+z[3];y=a._insertRegion(b,A,B,C,D)}
// Fill texture coordinates buffer
// FIXME: Pack each texture coordinate into single floats
var E=y.stMap;this.stream[s+j+0]=E[0],this.stream[s+j+1]=E[1],this.stream[t+j+0]=E[2],this.stream[t+j+1]=E[1],this.stream[u+j+0]=E[0],this.stream[u+j+1]=E[3],this.stream[v+j+0]=E[2],this.stream[v+j+1]=E[3],this.sbIndex+=e*o,this.length++},/**
         * Flush batched texture operations to the GPU
         * @name flush
         * @memberOf me.WebGLRenderer.Compositor
         * @function
         */
flush:function(){if(this.length){var a=this.gl,b=this.length*e*o;a.bufferData(a.ARRAY_BUFFER,this.stream.subarray(0,b),a.STREAM_DRAW),
// Draw the stream buffer
a.drawElements(a.TRIANGLES,this.length*p,a.UNSIGNED_SHORT,0),this.sbIndex=0,this.length=0}},/**
         * Draw a line
         * @name drawLine
         * @memberOf me.WebGLRenderer.Compositor
         * @param {me.Vector2d[]} points Line vertices
         * @param {Boolean} [open=false] Whether the line is open (true) or closed (false)
         */
drawLine:function(b,c){this.useShader(this.lineShader.handle);for(var d=0,e=0;e<b.length;e++)this.matrix.isIdentity()||this.matrix.vectorMultiply(b[e]),this.stream[d++]=b[e].x,this.stream[d++]=b[e].y;var g=this.gl;
// FIXME
this.lineShader.uniforms.uMatrix=this.uMatrix.val,
// Set the line color
this.lineShader.uniforms.uColor=this.color.glArray,
// Copy data into the stream buffer
g.bufferData(g.ARRAY_BUFFER,this.stream.subarray(0,2*b.length),g.STREAM_DRAW),
// FIXME: Configure vertex attrib pointers in `useShader`
g.vertexAttribPointer(this.lineShader.attributes.aVertex,a,g.FLOAT,!1,0,0),
// Draw the stream buffer
g.drawArrays(c?g.LINE_STRIP:g.LINE_LOOP,0,b.length),
// FIXME: Configure vertex attrib pointers in `useShader`
g.vertexAttribPointer(this.quadShader.attributes.aVertex,a,g.FLOAT,!1,f,k)},/**
         * Set the line width
         * @name lineWidth
         * @memberOf me.WebGLRenderer.Compositor
         * @function
         * @param {Number} width Line width
         */
lineWidth:function(a){this.gl.lineWidth(a)},/**
         * Clear the frame buffer, flushes the composite operations and calls
         * gl.clear()
         * @name clear
         * @memberOf me.WebGLRenderer.Compositor
         * @function
         */
clear:function(){this.flush(),this.gl.clear(this.gl.COLOR_BUFFER_BIT)}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org/
 *
 */
function(){/**
     * @namespace me.input
     * @memberOf me
     */
me.input=function(){
// hold public stuff in our singleton
var a={};
// return our object
/*
         * PRIVATE STUFF
         */
/**
         * prevent event propagation
         * @ignore
         */
/*
         * PUBLIC STUFF
         */
/**
         * Global flag to specify if melonJS should prevent default browser action on registered key events <br>
         * This is also configurable per key through the bindKey function
         * default : true
         * @public
         * @type Boolean
         * @name preventDefault
         * @memberOf me.input
         */
return a._preventDefault=function(a){
// stop event propagation
// stop event default processing
return a.stopPropagation?a.stopPropagation():a.cancelBubble=!0,a.preventDefault?a.preventDefault():a.returnValue=!1,!1},a.preventDefault=!0,a}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org/
 *
 */
function(){/*
     * PRIVATE STUFF
     */
// Reference to base class
var a=me.input;
// list of binded keys
a._KeyBinding={};
// corresponding actions
var b={},c={},d={},e={},f={},g=!1;/**
     * enable keyboard event
     * @ignore
     */
a._enableKeyboardEvent=function(){g||(window.addEventListener("keydown",a._keydown,!1),window.addEventListener("keyup",a._keyup,!1),g=!0)},/**
     * key down event
     * @ignore
     */
a._keydown=function(c,g,h){g=g||c.keyCode||c.which;var i=a._KeyBinding[g];if(
// publish a message for keydown event
me.event.publish(me.event.KEYDOWN,[i,g,i?!d[i]:!0]),i){if(!d[i]){var j=h?h:g;e[i][j]||(b[i]++,e[i][j]=!0)}
// prevent event propagation
// prevent event propagation
return f[g]?a._preventDefault(c):!0}return!0},/**
     * key up event
     * @ignore
     */
a._keyup=function(c,g,h){g=g||c.keyCode||c.which;var i=a._KeyBinding[g];if(
// publish a message for keydown event
me.event.publish(me.event.KEYUP,[i,g]),i){var j=h?h:g;
// prevent event propagation
// prevent event propagation
return e[i][j]=void 0,b[i]>0&&b[i]--,d[i]=!1,f[g]?a._preventDefault(c):!0}return!0},/*
     * PUBLIC STUFF
     */
/**
     * Almost all keyboard keys that have ASCII code, like:
     * LEFT, UP, RIGHT, DOWN, ENTER, SHIFT, CTRL, ALT, ESC, SPACE, TAB, BACKSPACE, PAUSE,
     * PAGE_UP, PAGE_DOWN, INSERT, DELETE, CAPS_LOCK, NUM_LOCK, SCROLL_LOCK, PRINT_SCREEN,
     * Keys [0..9], [A..Z], [NUMPAD0..NUMPAD9], [F1..F12]
     * @public
     * @enum {number}
     * @name KEY
     * @memberOf me.input
     */
a.KEY={BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINT_SCREEN:42,INSERT:45,DELETE:46,NUM0:48,NUM1:49,NUM2:50,NUM3:51,NUM4:52,NUM5:53,NUM6:54,NUM7:55,NUM8:56,NUM9:57,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,WINDOW_KEY:91,NUMPAD0:96,NUMPAD1:97,NUMPAD2:98,NUMPAD3:99,NUMPAD4:100,NUMPAD5:101,NUMPAD6:102,NUMPAD7:103,NUMPAD8:104,NUMPAD9:105,MULTIPLY:106,ADD:107,SUBSTRACT:109,DECIMAL:110,DIVIDE:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,NUM_LOCK:144,SCROLL_LOCK:145,SEMICOLON:186,PLUS:187,COMMA:188,MINUS:189,PERIOD:190,FORWAND_SLASH:191,GRAVE_ACCENT:192,OPEN_BRACKET:219,BACK_SLASH:220,CLOSE_BRACKET:221,SINGLE_QUOTE:222},/**
     * return the key press status of the specified action
     * @name isKeyPressed
     * @memberOf me.input
     * @public
     * @function
     * @param {String} action user defined corresponding action
     * @return {Boolean} true if pressed
     * @example
     * if (me.input.isKeyPressed('left'))
     * {
     *    //do something
     * }
     * else if (me.input.isKeyPressed('right'))
     * {
     *    //do something else...
     * }
     *
     */
a.isKeyPressed=function(a){return b[a]&&!d[a]?(c[a]&&(d[a]=!0),!0):!1},/**
     * return the key status of the specified action
     * @name keyStatus
     * @memberOf me.input
     * @public
     * @function
     * @param {String} action user defined corresponding action
     * @return {Boolean} down (true) or up(false)
     */
a.keyStatus=function(a){return b[a]>0},/**
     * trigger the specified key (simulated) event <br>
     * @name triggerKeyEvent
     * @memberOf me.input
     * @public
     * @function
     * @param {me.input#KEY} keycode
     * @param {Boolean} true to trigger a key press, or false for key release
     * @example
     * // trigger a key press
     * me.input.triggerKeyEvent(me.input.KEY.LEFT, true);
     */
a.triggerKeyEvent=function(b,c){c?a._keydown({},b):a._keyup({},b)},/**
     * associate a user defined action to a keycode
     * @name bindKey
     * @memberOf me.input
     * @public
     * @function
     * @param {me.input#KEY} keycode
     * @param {String} action user defined corresponding action
     * @param {Boolean} [lock=false] cancel the keypress event once read
     * @param {Boolean} [preventDefault=me.input.preventDefault] prevent default browser action
     * @example
     * // enable the keyboard
     * me.input.bindKey(me.input.KEY.LEFT,  "left");
     * me.input.bindKey(me.input.KEY.RIGHT, "right");
     * me.input.bindKey(me.input.KEY.X,     "jump", true);
     * me.input.bindKey(me.input.KEY.F1,    "options", true, true);
     */
a.bindKey=function(g,h,i,j){
// make sure the keyboard is enable
a._enableKeyboardEvent(),"boolean"!=typeof j&&(j=a.preventDefault),a._KeyBinding[g]=h,f[g]=j,b[h]=0,c[h]=i?i:!1,d[h]=!1,e[h]={}},/**
     * unlock a key manually
     * @name unlockKey
     * @memberOf me.input
     * @public
     * @function
     * @param {String} action user defined corresponding action
     * @example
     * // Unlock jump when touching the ground
     * if (!this.falling && !this.jumping) {
     *     me.input.unlockKey("jump");
     * }
     */
a.unlockKey=function(a){d[a]=!1},/**
     * unbind the defined keycode
     * @name unbindKey
     * @memberOf me.input
     * @public
     * @function
     * @param {me.input#KEY} keycode
     * @example
     * me.input.unbindKey(me.input.KEY.LEFT);
     */
a.unbindKey=function(d){
// clear the event status
var g=a._KeyBinding[d];b[g]=0,c[g]=!1,e[g]={},
// remove the key binding
a._KeyBinding[d]=null,f[d]=null}}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org/
 *
 */
function(){/**
     * addEventListerner for the specified event list and callback
     * @ignore
     */
function a(a,b){for(var c=2;c<a.length;++c)"undefined"!=typeof a[c]&&me.video.renderer.getScreenCanvas().addEventListener(a[c],b,!1)}/**
     * enable pointer event (MSPointer/Mouse/Touch)
     * @ignore
     */
function b(){k||(
// initialize mouse pos (0,0)
z.push({x:0,y:0}),i.mouse.pos=new me.Vector2d(0,0),
// get relative canvas position in the page
i._offset=me.video.getPos(),
// Automatically update relative canvas position on scroll
window.addEventListener("scroll",throttle(100,!1,function(a){i._offset=me.video.getPos(),me.event.publish(me.event.WINDOW_ONSCROLL,[a])}),!1),
// check standard
n=navigator.pointerEnabled?o:navigator.msPointerEnabled?p:me.device.touch?r:q,a(n,h),l="onwheel"in document.createElement("div")?"wheel":"mousewheel",window.addEventListener(l,f,!1),"undefined"==typeof i.throttlingInterval&&(i.throttlingInterval=~~(1e3/me.sys.fps)),i.throttlingInterval<17?me.video.renderer.getScreenCanvas().addEventListener(n[s],g,!1):me.video.renderer.getScreenCanvas().addEventListener(n[s],throttle(i.throttlingInterval,!1,function(a){g(a)}),!1),k=!0)}/**
     * @ignore
     */
function c(a,b,c,d){var e;if(a.callbacks[b]){a.pointerId=d;for(var f=a.callbacks[b].length-1;e=a.callbacks[b][f];f--)if(e(c)===!1)
// stop propagating the event if return false
return!0}return!1}/**
     * propagate events to registered objects
     * @ignore
     */
function d(a){var b=!1;return j.forEach(function(d){
// get the current screen to world offset
me.game.viewport.localToWorld(0,0,y);for(var e=0,f=z.length;f>e;e++){
// Do not fire older events
if("undefined"!=typeof a.timeStamp){if(a.timeStamp<m)continue;m=a.timeStamp}
// if PointerEvent is not supported
me.device.pointerEnabled||(
// -> define pointerId to simulate the PointerEvent standard
a.pointerId=z[e].id),/* Initialize the two coordinate space properties. */
a.gameScreenX=z[e].x,a.gameScreenY=z[e].y,a.gameWorldX=a.gameScreenX+y.x,a.gameWorldY=a.gameScreenY+y.y,d.region.floating===!0?(a.gameX=a.gameScreenX,a.gameY=a.gameScreenY):(a.gameX=a.gameWorldX,a.gameY=a.gameWorldY);var g=d.region,h=g.getBounds().containsPoint(a.gameX,a.gameY)&&("Rectangle"===g.shapeType||g.containsPoint(a.gameX,a.gameY));switch(n.indexOf(a.type)){case s:
// moved out of bounds: trigger the POINTER_LEAVE callbacks
if(d.pointerId!==a.pointerId||h){if(null===d.pointerId&&h&&c(d,n[w],a,a.pointerId)){b=!0;break}}else if(c(d,n[x],a,null)){b=!0;break}
// trigger the POINTER_MOVE callbacks
if(h&&c(d,a.type,a,a.pointerId)){b=!0;break}break;case u:
// pointer defined & inside of bounds: trigger the POINTER_UP callback
if(d.pointerId===a.pointerId&&h&&c(d,a.type,a,null)){b=!0;break}break;case v:
// pointer defined: trigger the POINTER_CANCEL callback
if(d.pointerId===a.pointerId&&c(d,a.type,a,null)){b=!0;break}break;default:
// event inside of bounds: trigger the POINTER_DOWN or MOUSE_WHEEL callback
if(h&&c(d,a.type,a,a.pointerId)){b=!0;break}}}}),b}/**
     * translate event coordinates
     * @ignore
     */
function e(a){var b;
// PointerEvent or standard Mouse event
if(
// reset the touch array cache
z.length=0,a.touches)for(var c=0,d=a.changedTouches.length;d>c;c++){var e=a.changedTouches[c];b=i.globalToLocal(e.clientX,e.clientY),b.id=e.identifier,z.push(b)}else b=i.globalToLocal(a.clientX,a.clientY),b.id=a.pointerId||1,z.push(b);
// if event.isPrimary is defined and false, return
a.isPrimary!==!1&&
// Else use the first entry to simulate mouse event
i.mouse.pos.set(z[0].x,z[0].y)}/**
     * mouse event management (mousewheel)
     * @ignore
     */
function f(a){/* jshint expr:true */
if(a.target===me.video.renderer.getScreenCanvas()){
// create a (fake) normalized event object
var b={deltaMode:1,type:"mousewheel",deltaX:a.deltaX,deltaY:a.deltaY,deltaZ:a.deltaZ};
// dispatch mouse event to registered object
if("mousewheel"===l&&(b.deltaY=-1/40*a.wheelDelta,
// Webkit also support wheelDeltaX
a.wheelDeltaX&&(b.deltaX=-1/40*a.wheelDeltaX)),d(b))
// prevent default action
return i._preventDefault(a)}return!0}/**
     * mouse/touch/pointer event management (move)
     * @ignore
     */
function g(a){
// dispatch mouse event to registered object
// update position
// dispatch mouse event to registered object
return e(a),d(a)?i._preventDefault(a):!0}/**
     * mouse/touch/pointer event management (start/down, end/up)
     * @ignore
     */
function h(a){
// dispatch event to registered objects
if(
// update the pointer position
e(a),d(a))
// prevent default action
return i._preventDefault(a);
// in case of touch event button is undefined
var b=a.button||0,c=i.mouse.bind[b];
// check if mapped to a key
// check if mapped to a key
return c?a.type===n[t]?i._keydown(a,c,b+1):i._keyup(a,c,b+1):!0}/**
     * The built in Event Object
     * @external Event
     * @see {@link https://developer.mozilla.org/en/docs/Web/API/Event|Event}
     */
/**
     * Event normalized X coordinate within the game canvas itself<br>
     * <img src="images/event_coord.png"/>
     * @memberof! external:Event#
     * @name external:Event#gameX
     * @type {Number}
     */
/**
     * Event normalized Y coordinate within the game canvas itself<br>
     * <img src="images/event_coord.png"/>
     * @memberof! external:Event#
     * @name external:Event#gameY
     * @type {Number}
     */
/**
     * Event X coordinate relative to the viewport<br>
     * @memberof! external:Event#
     * @name external:Event#gameScreenX
     * @type {Number}
     */
/**
     * Event Y coordinate relative to the viewport<br>
     * @memberof! external:Event#
     * @name external:Event#gameScreenY
     * @type {Number}
     */
/**
     * Event X coordinate relative to the map<br>
     * @memberof! external:Event#
     * @name external:Event#gameWorldX
     * @type {Number}
     */
/**
     * Event Y coordinate relative to the map<br>
     * @memberof! external:Event#
     * @name external:Event#gameWorldY
     * @type {Number}
     */
/**
     * The unique identifier of the contact for a touch, mouse or pen <br>
     * (This id is also defined on non Pointer Event Compatible platform like pure mouse or iOS-like touch event)
     * @memberof! external:Event#
     * @name external:Event#pointerId
     * @type {Number}
     * @see http://msdn.microsoft.com/en-us/library/windows/apps/hh466123.aspx
     */
/*
     * PRIVATE STUFF
     */
// Reference to base class
var i=me.input,j=new Map,k=!1,l="mousewheel",m=0,n=null,o=["mousewheel","pointermove","pointerdown","pointerup","pointercancel","pointerenter","pointerleave"],p=["mousewheel","MSPointerMove","MSPointerDown","MSPointerUp","MSPointerCancel","MSPointerEnter","MSPointerLeave"],q=["mousewheel","mousemove","mousedown","mouseup","mousecancel","mouseenter","mouseleave"],r=[void 0,"touchmove","touchstart","touchend","touchcancel","touchenter","touchleave"],s=1,t=2,u=3,v=4,w=5,x=6,y=new me.Vector2d,z=[];/**
     * cache value for the offset of the canvas position within the page
     * @ignore
     */
i._offset=null,/*
     * PUBLIC STUFF
     */
/**
     * Mouse information<br>
     * properties : <br>
     * pos (me.Vector2d) : pointer position (in screen coordinates) <br>
     * LEFT : constant for left button <br>
     * MIDDLE : constant for middle button <br>
     * RIGHT : constant for right button <br>
     * @public
     * @enum {Object}
     * @name mouse
     * @memberOf me.input
     */
i.mouse={
// mouse position
pos:null,
// button constants (W3C)
LEFT:0,MIDDLE:1,RIGHT:2,
// bind list for mouse buttons
bind:[0,0,0]},/**
     * time interval for event throttling in milliseconds<br>
     * default value : "1000/me.sys.fps" ms<br>
     * set to 0 ms to disable the feature
     * @public
     * @type Number
     * @name throttlingInterval
     * @memberOf me.input
     */
i.throttlingInterval=void 0,/**
     * Translate the specified x and y values from the global (absolute)
     * coordinate to local (viewport) relative coordinate.
     * @name globalToLocal
     * @memberOf me.input
     * @public
     * @function
     * @param {Number} x the global x coordinate to be translated.
     * @param {Number} y the global y coordinate to be translated.
     * @return {me.Vector2d} A vector object with the corresponding translated coordinates.
     * @example
     * onMouseEvent : function (e) {
     *    // convert the given into local (viewport) relative coordinates
     *    var pos = me.input.globalToLocal(e.clientX, e,clientY);
     *    // do something with pos !
     * };
     */
i.globalToLocal=function(a,b){var c=i._offset,d=me.device.getPixelRatio();a-=c.left,b-=c.top;var e=me.sys.scale;return(1!==e.x||1!==e.y)&&(a/=e.x,b/=e.y),new me.Vector2d(a*d,b*d)},/**
     * Associate a pointer event to a keycode<br>
     * Left button – 0
     * Middle button – 1
     * Right button – 2
     * @name bindPointer
     * @memberOf me.input
     * @public
     * @function
     * @param {Number} [button=me.input.mouse.LEFT] (accordingly to W3C values : 0,1,2 for left, middle and right buttons)
     * @param {me.input#KEY} keyCode
     * @example
     * // enable the keyboard
     * me.input.bindKey(me.input.KEY.X, "shoot");
     * // map the left button click on the X key (default if the button is not specified)
     * me.input.bindPointer(me.input.KEY.X);
     * // map the right button click on the X key
     * me.input.bindPointer(me.input.mouse.RIGHT, me.input.KEY.X);
     */
i.bindPointer=function(){var a=arguments.length<2?i.mouse.LEFT:arguments[0],c=arguments.length<2?arguments[0]:arguments[1];
// throw an exception if no action is defined for the specified keycode
if(
// make sure the mouse is initialized
b(),!i._KeyBinding[c])throw new me.Error("no action defined for keycode "+c);
// map the mouse button to the keycode
i.mouse.bind[a]=c},/**
     * unbind the defined keycode
     * @name unbindPointer
     * @memberOf me.input
     * @public
     * @function
     * @param {Number} [button=me.input.mouse.LEFT] (accordingly to W3C values : 0,1,2 for left, middle and right buttons)
     * @example
     * me.input.unbindPointer(me.input.mouse.LEFT);
     */
i.unbindPointer=function(a){
// clear the event status
i.mouse.bind["undefined"==typeof a?me.input.mouse.LEFT:a]=null},/**
     * allows registration of event listeners on the object target. <br>
     * melonJS defines the additional `gameX` and `gameY` properties when passing the Event object to the defined callback (see below)<br>
     * @see external:Event
     * @see {@link http://www.w3.org/TR/pointerevents/#list-of-pointer-events|W3C Pointer Event list}
     * @name registerPointerEvent
     * @memberOf me.input
     * @public
     * @function
     * @param {String} eventType The event type for which the object is registering <br>
     * melonJS currently supports: <br>
     * <ul>
     *   <li><code>"pointermove"</code></li>
     *   <li><code>"pointerdown"</code></li>
     *   <li><code>"pointerup"</code></li>
     *   <li><code>"pointerenter"</code></li>
     *   <li><code>"pointerleave"</code></li>
     *   <li><code>"pointercancel"</code></li>
     *   <li><code>"mousewheel"</code></li>
     * </ul>
     * @param {me.Rect|me.Polygon|me.Line|me.Ellipse} region a shape representing the region to register on
     * @param {Function} callback methods to be called when the event occurs.
     * @example
     * // register on the 'pointerdown' event
     * me.input.registerPointerEvent('pointerdown', this, this.pointerDown.bind(this));
     */
i.registerPointerEvent=function(a,c,d){if(
// make sure the mouse/touch events are initialized
b(),-1===o.indexOf(a))throw new me.Error("invalid event type : "+a);
// convert to supported event type if pointerEvent not natively supported
o!==n&&(a=n[o.indexOf(a)]),
// register the event
j.has(c)||j.set(c,{region:c,callbacks:{},pointerId:null});
// allocate array if not defined
var e=j.get(c);e.callbacks[a]||(e.callbacks[a]=[]),
// initialize the handler
e.callbacks[a].push(d)},/**
     * allows the removal of event listeners from the object target.
     * @see {@link http://www.w3.org/TR/pointerevents/#list-of-pointer-events|W3C Pointer Event list}
     * @name releasePointerEvent
     * @memberOf me.input
     * @public
     * @function
     * @param {String} eventType The event type for which the object was registered. See {@link me.input.registerPointerEvent}
     * @param {me.Rect|me.Polygon|me.Line|me.Ellipse} region the registered region to release for this event
     * @param {Function} [callback="all"] if specified unregister the event only for the specific callback
     * @example
     * // release the registered region on the 'pointerdown' event
     * me.input.releasePointerEvent('pointerdown', this);
     */
i.releasePointerEvent=function(a,b,c){if(-1===o.indexOf(a))throw new me.Error("invalid event type : "+a);
// convert to supported event type if pointerEvent not natively supported
o!==n&&(a=n[o.indexOf(a)]);var d=j.get(b);if("undefined"==typeof c)
// unregister all callbacks of "eventType" for the given region
for(;d.callbacks[a].length>0;)d.callbacks[a].pop();else d.callbacks[a].remove(c)},/**
     * Will translate global (frequently used) pointer events
     * which should be catched at root level, into minipubsub system events
     * @name _translatePointerEvents
     * @memberOf me.input
     * @ignore
     * @function
     */
i._translatePointerEvents=function(){
// listen to mouse move (and touch move) events on the viewport
// and convert them to a system event by default
i.registerPointerEvent("pointermove",me.game.viewport,function(a){return me.event.publish(me.event.MOUSEMOVE,[a]),!1})}}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * Base64 decoding
     * @see <a href="http://www.webtoolkit.info/">http://www.webtoolkit.info/</A>
     * @ignore
     */
var a=function(){
// hold public stuff in our singleton
var a={},b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
// public method for decoding
// public method for encoding
return a.decode=function(a){if(a=a.replace(/[^A-Za-z0-9\+\/\=]/g,""),me.device.nativeBase64)
// use native decoder
return window.atob(a);for(
// use cross-browser decoding
var c,d,e,f,g,h,i,j=[],k=0;k<a.length;)f=b.indexOf(a.charAt(k++)),g=b.indexOf(a.charAt(k++)),h=b.indexOf(a.charAt(k++)),i=b.indexOf(a.charAt(k++)),c=f<<2|g>>4,d=(15&g)<<4|h>>2,e=(3&h)<<6|i,j.push(String.fromCharCode(c)),64!==h&&j.push(String.fromCharCode(d)),64!==i&&j.push(String.fromCharCode(e));return j=j.join("")},a.encode=function(a){if(a=a.replace(/\r\n/g,"\n"),me.device.nativeBase64)
// use native encoder
return window.btoa(a);for(
// use cross-browser encoding
var c,d,e,f,g,h,i,j=[],k=0;k<a.length;)c=a.charCodeAt(k++),d=a.charCodeAt(k++),e=a.charCodeAt(k++),f=c>>2,g=(3&c)<<4|d>>4,h=(15&d)<<2|e>>6,i=63&e,isNaN(d)?h=i=64:isNaN(e)&&(i=64),j.push(b.charAt(f)),j.push(b.charAt(g)),j.push(b.charAt(h)),j.push(b.charAt(i));return j=j.join("")},a}();/**
     * a collection of utility functions<br>
     * there is no constructor function for me.utils
     * @namespace me.utils
     * @memberOf me
     */
me.utils=function(){
// hold public stuff in our singleton
var b={},c="",d=0,e=/^.*(\\|\/|\:)/,f=/\.[^\.]*$/;
// return our object
/*
         * PUBLIC STUFF
         */
/**
         * Decode a base64 encoded string into a binary string
         * @public
         * @function
         * @memberOf me.utils
         * @name decodeBase64
         * @param {String} input Base64 encoded data
         * @return {String} Binary string
         */
/**
         * Encode binary string into a base64 string
         * @public
         * @function
         * @memberOf me.utils
         * @name encodeBase64
         * @param {String} input Binary string
         * @return {String} Base64 encoded data
         */
/**
         * Decode a base64 encoded string into a byte array
         * @public
         * @function
         * @memberOf me.utils
         * @name decodeBase64AsArray
         * @param {String} input Base64 encoded data
         * @param {Number} [bytes] number of bytes per array entry
         * @return {Number[]} Array of bytes
         */
/**
         * decompress zlib/gzip data (NOT IMPLEMENTED)
         * @public
         * @function
         * @memberOf me.utils
         * @name decompress
         * @param  {Number[]} data Array of bytes
         * @param  {String} format compressed data format ("gzip","zlib")
         * @return {Number[]} Array of bytes
         */
/**
         * Decode a CSV encoded array into a binary array
         * @public
         * @function
         * @memberOf me.utils
         * @name decodeCSV
         * @param  {String} input CSV formatted data
         * @param  {Number} limit row split limit
         * @return {Number[]} Int Array
         */
/**
         * return the base name of the file without path info.<br>
         * @public
         * @function
         * @memberOf me.utils
         * @name getBasename
         * @param  {String} path path containing the filename
         * @return {String} the base name without path information.
         */
/**
         * return the extension of the file in the given path <br>
         * @public
         * @function
         * @memberOf me.utils
         * @name getFileExtension
         * @param  {String} path path containing the filename
         * @return {String} filename extension.
         */
/**
         * Get image pixels
         * @public
         * @function
         * @memberOf me.utils
         * @name getPixels
         * @param {Image|Canvas} image Image to read
         * @return {ImageData} Canvas ImageData object
         */
/**
         * Normalize a String or Image to an Image reference
         * @public
         * @function
         * @memberOf me.utils
         * @name getImage
         * @param {Image|String} image Image name or Image reference
         * @return {Image} Image reference
         */
/**
         * reset the GUID Base Name
         * the idea here being to have a unique ID
         * per level / object
         * @ignore
         */
/**
         * create and return a very simple GUID
         * Game Unique ID
         * @ignore
         */
/**
         * apply friction to a force
         * @ignore
         * @TODO Move this somewhere else
         */
return b.decodeBase64=function(b){return a.decode(b)},b.encodeBase64=function(b){return a.encode(b)},b.decodeBase64AsArray=function(b,c){c=c||1;var d,e,f,g=a.decode(b),h=new Uint32Array(g.length/c);for(d=0,f=g.length/c;f>d;d++)for(h[d]=0,e=c-1;e>=0;--e)h[d]+=g.charCodeAt(d*c+e)<<(e<<3);return h},b.decompress=function(){throw new me.Error("GZIP/ZLIB compressed TMX Tile Map not supported!")},b.decodeCSV=function(a,b){a=a.trim().split("\n");for(var c=[],d=0;d<a.length;d++)for(var e=a[d].split(",",b),f=0;f<e.length;f++)c.push(+e[f]);return c},b.getBasename=function(a){return a.replace(e,"").replace(f,"")},b.getFileExtension=function(a){return a.substring(a.lastIndexOf(".")+1,a.length)},b.getPixels=function(a){if(a instanceof HTMLImageElement){var b=me.CanvasRenderer.getContext2d(me.video.createCanvas(a.width,a.height));return b.drawImage(a,0,0),b.getImageData(0,0,a.width,a.height)}
// canvas !
return a.getContext("2d").getImageData(0,0,a.width,a.height)},b.getImage=function(a){return"string"==typeof a?me.loader.getImage(me.utils.getBasename(a)):a},b.resetGUID=function(a,b){c=a.toString().toUpperCase().toHex(),d=b||0},b.createGUID=function(a){
// to cover the case of undefined id for groups
return d+=a||1,c+"-"+(a||d)},b.applyFriction=function(a,b){return 0>a+b?a+b*me.timer.tick:a-b>0?a-b*me.timer.tick:0},b}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
function(){var a=/^rgba?\((\d+), ?(\d+), ?(\d+)(, ?([\d\.]+))?\)$/,b=/^#([\da-fA-F])([\da-fA-F])([\da-fA-F])$/,c=/^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})$/,d=new Map;[
// CSS1
["black",[0,0,0]],["silver",[192,192,129]],["gray",[128,128,128]],["white",[255,255,255]],["maroon",[128,0,0]],["red",[255,0,0]],["purple",[128,0,128]],["fuchsia",[255,0,255]],["green",[0,128,0]],["lime",[0,255,0]],["olive",[128,128,0]],["yellow",[255,255,0]],["navy",[0,0,128]],["blue",[0,0,255]],["teal",[0,128,128]],["aqua",[0,255,255]],
// CSS2
["orange",[255,165,0]],
// CSS3
["aliceblue",[240,248,245]],["antiquewhite",[250,235,215]],["aquamarine",[127,255,212]],["azure",[240,255,255]],["beige",[245,245,220]],["bisque",[255,228,196]],["blanchedalmond",[255,235,205]],["blueviolet",[138,43,226]],["brown",[165,42,42]],["burlywood",[222,184,35]],["cadetblue",[95,158,160]],["chartreuse",[127,255,0]],["chocolate",[210,105,30]],["coral",[255,127,80]],["cornflowerblue",[100,149,237]],["cornsilk",[255,248,220]],["crimson",[220,20,60]],["darkblue",[0,0,139]],["darkcyan",[0,139,139]],["darkgoldenrod",[184,134,11]],["darkgray[*]",[169,169,169]],["darkgreen",[0,100,0]],["darkgrey[*]",[169,169,169]],["darkkhaki",[189,183,107]],["darkmagenta",[139,0,139]],["darkolivegreen",[85,107,47]],["darkorange",[255,140,0]],["darkorchid",[153,50,204]],["darkred",[139,0,0]],["darksalmon",[233,150,122]],["darkseagreen",[143,188,143]],["darkslateblue",[72,61,139]],["darkslategray",[47,79,79]],["darkslategrey",[47,79,79]],["darkturquoise",[0,206,209]],["darkviolet",[148,0,211]],["deeppink",[255,20,147]],["deepskyblue",[0,191,255]],["dimgray",[105,105,105]],["dimgrey",[105,105,105]],["dodgerblue",[30,144,255]],["firebrick",[178,34,34]],["floralwhite",[255,250,240]],["forestgreen",[34,139,34]],["gainsboro",[220,220,220]],["ghostwhite",[248,248,255]],["gold",[255,215,0]],["goldenrod",[218,165,32]],["greenyellow",[173,255,47]],["grey",[128,128,128]],["honeydew",[240,255,240]],["hotpink",[255,105,180]],["indianred",[205,92,92]],["indigo",[75,0,130]],["ivory",[255,255,240]],["khaki",[240,230,140]],["lavender",[230,230,250]],["lavenderblush",[255,240,245]],["lawngreen",[124,252,0]],["lemonchiffon",[255,250,205]],["lightblue",[173,216,230]],["lightcoral",[240,128,128]],["lightcyan",[224,255,255]],["lightgoldenrodyellow",[250,250,210]],["lightgray",[211,211,211]],["lightgreen",[144,238,144]],["lightgrey",[211,211,211]],["lightpink",[255,182,193]],["lightsalmon",[255,160,122]],["lightseagreen",[32,178,170]],["lightskyblue",[135,206,250]],["lightslategray",[119,136,153]],["lightslategrey",[119,136,153]],["lightsteelblue",[176,196,222]],["lightyellow",[255,255,224]],["limegreen",[50,205,50]],["linen",[250,240,230]],["mediumaquamarine",[102,205,170]],["mediumblue",[0,0,205]],["mediumorchid",[186,85,211]],["mediumpurple",[147,112,219]],["mediumseagreen",[60,179,113]],["mediumslateblue",[123,104,238]],["mediumspringgreen",[0,250,154]],["mediumturquoise",[72,209,204]],["mediumvioletred",[199,21,133]],["midnightblue",[25,25,112]],["mintcream",[245,255,250]],["mistyrose",[255,228,225]],["moccasin",[255,228,181]],["navajowhite",[255,222,173]],["oldlace",[253,245,230]],["olivedrab",[107,142,35]],["orangered",[255,69,0]],["orchid",[218,112,214]],["palegoldenrod",[238,232,170]],["palegreen",[152,251,152]],["paleturquoise",[175,238,238]],["palevioletred",[219,112,147]],["papayawhip",[255,239,213]],["peachpuff",[255,218,185]],["peru",[205,133,63]],["pink",[255,192,203]],["plum",[221,160,221]],["powderblue",[176,224,230]],["rosybrown",[188,143,143]],["royalblue",[65,105,225]],["saddlebrown",[139,69,19]],["salmon",[250,128,114]],["sandybrown",[244,164,96]],["seagreen",[46,139,87]],["seashell",[255,245,238]],["sienna",[160,82,45]],["skyblue",[135,206,235]],["slateblue",[106,90,205]],["slategray",[112,128,144]],["slategrey",[112,128,144]],["snow",[255,250,250]],["springgreen",[0,255,127]],["steelblue",[70,130,180]],["tan",[210,180,140]],["thistle",[216,191,216]],["tomato",[255,99,71]],["turquoise",[64,224,208]],["violet",[238,130,238]],["wheat",[245,222,179]],["whitesmoke",[245,245,245]],["yellowgreen",[154,205,50]]].forEach(function(a){d.set(a[0],a[1])}),/**
     * A color manipulation object.
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     * @param {Float32Array|Number} [r=0] red component or array of color components
     * @param {Number} [g=0] green component
     * @param {Number} [b=0] blue component
     * @param {Number} [alpha=1.0] alpha value
     */
me.Color=Object.extend(/** @scope me.Color.prototype */
{/** @ignore */
init:function(a,b,c,d){/**
             * Color components in a Float32Array suitable for WebGL
             * @name glArray
             * @memberOf me.Color
             * @type {Float32Array}
             * @readonly
             */
return"undefined"==typeof this.glArray&&(this.glArray=new Float32Array([0,0,0,1])),this.setColor(a,b,c,d)},/**
         * Set this color to the specified value.
         * @name setColor
         * @memberOf me.Color
         * @function
         * @param {Number} r red component [0 .. 255]
         * @param {Number} g green component [0 .. 255]
         * @param {Number} b blue component [0 .. 255]
         * @param {Number} [alpha=1.0] alpha value [0.0 .. 1.0]
         * @return {me.Color} Reference to this object for method chaining
         */
setColor:function(a,b,c,d){
// Private initialization: copy Color value directly
// Private initialization: copy Color value directly
return a instanceof me.Color?(this.glArray.set(a.glArray),a):(this.r=a,this.g=b,this.b=c,this.alpha=d,this)},/**
         * Create a new copy of this color object.
         * @name clone
         * @memberOf me.Color
         * @function
         * @return {me.Color} Reference to the newly cloned object
         */
clone:function(){return me.pool.pull("me.Color",this)},/**
         * Copy a color object or CSS color into this one.
         * @name copy
         * @memberOf me.Color
         * @function
         * @param {me.Color|String} color
         * @return {me.Color} Reference to this object for method chaining
         */
copy:function(a){return a instanceof me.Color?(this.glArray.set(a.glArray),this):this.parseCSS(a)},/**
         * Blend this color with the given one using addition.
         * @name add
         * @memberOf me.Color
         * @function
         * @param {me.Color} color
         * @return {me.Color} Reference to this object for method chaining
         */
add:function(a){return this.glArray[0]=(this.glArray[0]+a.glArray[0]).clamp(0,1),this.glArray[1]=(this.glArray[1]+a.glArray[1]).clamp(0,1),this.glArray[2]=(this.glArray[2]+a.glArray[2]).clamp(0,1),this.glArray[3]=(this.glArray[3]+a.glArray[3])/2,this},/**
         * Darken this color value by 0..1
         * @name darken
         * @memberOf me.Color
         * @function
         * @param {Number} scale
         * @return {me.Color} Reference to this object for method chaining
         */
darken:function(a){return a=a.clamp(0,1),this.glArray[0]*=a,this.glArray[1]*=a,this.glArray[2]*=a,this},/**
         * Lighten this color value by 0..1
         * @name lighten
         * @memberOf me.Color
         * @function
         * @param {Number} scale
         * @return {me.Color} Reference to this object for method chaining
         */
lighten:function(a){return a=a.clamp(0,1),this.glArray[0]=(this.glArray[0]+(1-this.glArray[0])*a).clamp(0,1),this.glArray[1]=(this.glArray[1]+(1-this.glArray[1])*a).clamp(0,1),this.glArray[2]=(this.glArray[2]+(1-this.glArray[2])*a).clamp(0,1),this},/**
         * Generate random r,g,b values for this color object
         * @name random
         * @memberOf me.Color
         * @function
         * @return {me.Color} Reference to this object for method chaining
         */
random:function(){return this.setColor(256*Math.random(),256*Math.random(),256*Math.random(),this.alpha)},/**
         * Return true if the r,g,b,a values of this color are equal with the
         * given one.
         * @name equals
         * @memberOf me.Color
         * @function
         * @param {me.Color} color
         * @return {Boolean}
         */
equals:function(a){return this.glArray[0]===a.glArray[0]&&this.glArray[1]===a.glArray[1]&&this.glArray[2]===a.glArray[2]&&this.glArray[3]===a.glArray[3]},/**
         * Parse a CSS color string and set this color to the corresponding
         * r,g,b values
         * @name parseCSS
         * @memberOf me.Color
         * @function
         * @param {String} color
         * @return {me.Color} Reference to this object for method chaining
         */
parseCSS:function(a){
// TODO : Memoize this function by caching its input
// TODO : Memoize this function by caching its input
return d.has(a)?this.setColor.apply(this,d.get(a)):this.parseRGB(a)},/**
         * Parse an RGB or RGBA CSS color string
         * @name parseRGB
         * @memberOf me.Color
         * @function
         * @param {String} color
         * @return {me.Color} Reference to this object for method chaining
         */
parseRGB:function(b){
// TODO : Memoize this function by caching its input
var c=a.exec(b);return c?this.setColor(+c[1],+c[2],+c[3],+c[5]):this.parseHex(b)},/**
         * Parse a Hex color ("#RGB" or "#RRGGBB" format) and set this color to
         * the corresponding r,g,b values
         * @name parseHex
         * @memberOf me.Color
         * @function
         * @param {String} color
         * @return {me.Color} Reference to this object for method chaining
         */
parseHex:function(a){
// TODO : Memoize this function by caching its input
var d;if(d=c.exec(a))return this.setColor(parseInt(d[1],16),parseInt(d[2],16),parseInt(d[3],16));if(d=b.exec(a))return this.setColor(parseInt(d[1]+d[1],16),parseInt(d[2]+d[2],16),parseInt(d[3]+d[3],16));throw new me.Color.Error("invalid parameter: "+a)},/**
         * Returns the private glArray
         * @ignore
         */
toGL:function(){return this.glArray},/**
         * Get the color in "#RRGGBB" format
         * @name toHex
         * @memberOf me.Color
         * @function
         * @return {String}
         */
toHex:function(){
// TODO : Memoize this function by caching its result until any of
// the r,g,b,a values are changed
return"#"+this.r.toHex()+this.g.toHex()+this.b.toHex()},/**
         * Get the color in "rgb(R,G,B)" format
         * @name toRGB
         * @memberOf me.Color
         * @function
         * @return {String}
         */
toRGB:function(){
// TODO : Memoize this function by caching its result until any of
// the r,g,b,a values are changed
return"rgb("+this.r+","+this.g+","+this.b+")"},/**
         * Get the color in "rgba(R,G,B,A)" format
         * @name toRGBA
         * @memberOf me.Color
         * @function
         * @return {String}
         */
toRGBA:function(){
// TODO : Memoize this function by caching its result until any of
// the r,g,b,a values are changed
return"rgba("+this.r+","+this.g+","+this.b+","+this.alpha+")"}}),/**
     * Color Red Component
     * @type Number
     * @name r
     * @readonly
     * @memberOf me.Color
     */
Object.defineProperty(me.Color.prototype,"r",{get:function(){return~~(255*this.glArray[0])},set:function(a){this.glArray[0]=(~~a||0).clamp(0,255)/255},enumerable:!0,configurable:!0}),/**
     * Color Green Component
     * @type Number
     * @name g
     * @readonly
     * @memberOf me.Color
     */
Object.defineProperty(me.Color.prototype,"g",{get:function(){return~~(255*this.glArray[1])},set:function(a){this.glArray[1]=(~~a||0).clamp(0,255)/255},enumerable:!0,configurable:!0}),/**
     * Color Blue Component
     * @type Number
     * @name b
     * @readonly
     * @memberOf me.Color
     */
Object.defineProperty(me.Color.prototype,"b",{get:function(){return~~(255*this.glArray[2])},set:function(a){this.glArray[2]=(~~a||0).clamp(0,255)/255},enumerable:!0,configurable:!0}),/**
     * Color Alpha Component
     * @type Number
     * @name alpha
     * @readonly
     * @memberOf me.Color
     */
Object.defineProperty(me.Color.prototype,"alpha",{get:function(){return this.glArray[3]},set:function(a){this.glArray[3]="undefined"==typeof a?1:(+a).clamp(0,1)},enumerable:!0,configurable:!0}),/**
     * Base class for me.Color exception handling.
     * @name Error
     * @class
     * @memberOf me.Color
     * @constructor
     * @param {String} msg Error message.
     */
me.Color.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.Color.Error"}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * A singleton object to access the device localStorage area
     * @example
     * // Initialize "score" and "lives" with default values
     * // This loads the properties from localStorage if they exist, else it sets the given defaults
     * me.save.add({ score : 0, lives : 3 });
     *
     * // Print all
     * // On first load, this prints { score : 0, lives : 3 }
     * // On further reloads, it prints { score : 31337, lives : 3, complexObject : ... }
     * // Because the following changes will be saved to localStorage
     * console.log(JSON.stringify(me.save));
     *
     * // Save score
     * me.save.score = 31337;
     *
     * // Also supports complex objects thanks to the JSON backend
     * me.save.add({ complexObject : {} })
     * me.save.complexObject = { a : "b", c : [ 1, 2, 3, "d" ], e : { f : [{}] } };
     *
     * // WARNING: Do not set any child properties of complex objects directly!
     * // Changes made that way will not save. Always set the entire object value at once.
     * // If you cannot live with this limitation, there's a workaround:
     * me.save.complexObject.c.push("foo"); // Modify a child property
     * me.save.complexObject = me.save.complexObject; // Save the entire object!
     *
     * // Remove "lives" from localStorage
     * me.save.remove("lives");
     * @namespace me.save
     * @memberOf me
     */
me.save=function(){
// a function to check if the given key is a reserved word
function a(a){return"add"===a||"remove"===a}
// Variable to hold the object data
var b={},c={/**
             * @ignore
             */
_init:function(){
// Load previous data if local Storage is supported
if(me.device.localStorage===!0){var a=JSON.parse(localStorage.getItem("me.save"))||[];a.forEach(function(a){b[a]=JSON.parse(localStorage.getItem("me.save."+a))})}},/**
             * Add new keys to localStorage and set them to the given default values if they do not exist
             * @name add
             * @memberOf me.save
             * @function
             * @param {Object} props key and corresponding values
             * @example
             * // Initialize "score" and "lives" with default values
             * me.save.add({ score : 0, lives : 3 });
             */
add:function(d){Object.keys(d).forEach(function(e){a(e)||(!function(a){Object.defineProperty(c,a,{configurable:!0,enumerable:!0,get:function(){return b[a]},set:function(c){b[a]=c,me.device.localStorage===!0&&localStorage.setItem("me.save."+a,JSON.stringify(c))}})}(e),
// Set default value for key
e in b||(c[e]=d[e]))}),
// Save keys
me.device.localStorage===!0&&localStorage.setItem("me.save",JSON.stringify(Object.keys(b)))},/**
             * Remove a key from localStorage
             * @name remove
             * @memberOf me.save
             * @function
             * @param {String} key key to be removed
             * @example
             * // Remove the "score" key from localStorage
             * me.save.remove("score");
             */
remove:function(c){a(c)||"undefined"!=typeof b[c]&&(delete b[c],me.device.localStorage===!0&&(localStorage.removeItem("me.save."+c),localStorage.setItem("me.save",JSON.stringify(Object.keys(b)))))}};return c}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(){me.TMXConstants={
// some custom constants
COLLISION_GROUP:"collision",
// some TMX constants
TMX_TAG_MAP:"map",TMX_TAG_NAME:"name",TMX_TAG_VALUE:"value",TMX_TAG_VERSION:"version",TMX_TAG_ORIENTATION:"orientation",TMX_TAG_WIDTH:"width",TMX_TAG_HEIGHT:"height",TMX_TAG_TYPE:"type",TMX_TAG_OPACITY:"opacity",TMX_TAG_TILEWIDTH:"tilewidth",TMX_TAG_TILEHEIGHT:"tileheight",TMX_TAG_TILEOFFSET:"tileoffset",TMX_TAG_FIRSTGID:"firstgid",TMX_TAG_GID:"gid",TMX_TAG_TILE:"tile",TMX_TAG_ID:"id",TMX_TAG_NEXTOBJID:"nextobjectid",TMX_TAG_DATA:"data",TMX_TAG_COMPRESSION:"compression",TMX_TAG_GZIP:"gzip",TMX_TAG_ZLIB:"zlib",TMX_TAG_ENCODING:"encoding",TMX_TAG_ATTR_BASE64:"base64",TMX_TAG_CSV:"csv",TMX_TAG_SPACING:"spacing",TMX_TAG_MARGIN:"margin",TMX_TAG_PROPERTIES:"properties",TMX_TAG_PROPERTY:"property",TMX_TAG_IMAGE:"image",TMX_TAG_SOURCE:"source",TMX_TAG_VISIBLE:"visible",TMX_TAG_TILESET:"tileset",TMX_TAG_LAYER:"layer",TMX_TAG_TILE_LAYER:"tilelayer",TMX_TAG_IMAGE_LAYER:"imagelayer",TMX_TAG_OBJECTGROUP:"objectgroup",TMX_TAG_OBJECT:"object",TMX_TAG_X:"x",TMX_TAG_Y:"y",TMX_TAG_POLYGON:"polygon",TMX_TAG_POLYLINE:"polyline",TMX_TAG_ELLIPSE:"ellipse",TMX_TAG_POINTS:"points",TMX_BACKGROUND_COLOR:"backgroundcolor",TMX_ROTATION:"rotation",TMX_HEXSIDELEN:"hexsidelength",
// bitmask constants to check for flipped & rotated tiles
TMX_FLIP_H:2147483648,TMX_FLIP_V:1073741824,TMX_FLIP_AD:536870912,TMX_CLEAR_BIT_MASK:536870911}}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(a){/**
     * a collection of TMX utility Function
     * @final
     * @memberOf me
     * @ignore
     */
me.TMXUtils=function(){/**
         * set and interpret a TMX property value
         * @ignore
         */
function b(a){if(!a||a.isBoolean())
// if value not defined or boolean
a=a?"true"===a:!0;else if(a.isNumeric())
// check if numeric
a=Number(a);else if(a.match(/^json:/i)){
// try to parse it
var b=a.split(/^json:/i)[1];try{a=JSON.parse(b)}catch(c){throw new me.Error("Unable to parse JSON: "+b)}}
// return the interpreted value
return a}/*
         * PUBLIC
         */
// hold public stuff in our singleton
var c={},d=function(a,c){
// do attributes
if(c.attributes&&c.attributes.length>0)for(var d=0;d<c.attributes.length;d++){var e=c.attributes.item(d);"undefined"!=typeof e.name?a[e.name]=b(e.value):a[e.nodeName]=b(e.nodeValue)}};
// return our object
/**
         * Parse a XML TMX object and returns the corresponding javascript object
         * @ignore
         */
/**
         * Apply TMX Properties to the given object
         * @ignore
         */
return c.parse=function(a,b){
// Create the return object
var c={},e="";
// do children
if(b=b||1,1===a.nodeType&&d(c,a),a.hasChildNodes()){for(var f=0;f<a.childNodes.length;f++){var g=a.childNodes.item(f),h=g.nodeName;if("undefined"==typeof c[h])if(3===g.nodeType){/* nodeType is "Text"  */
var i=g.nodeValue.trim();i&&i.length>0&&(e+=i)}else 1===g.nodeType&&(/* nodeType is "Element" */
c[h]=me.TMXUtils.parse(g,b),c[h]._draworder=b++);else Array.isArray(c[h])===!1&&(c[h]=[c[h]]),c[h].push(me.TMXUtils.parse(g,b)),c[h][c[h].length-1]._draworder=b++}
// set concatenated string value
// cheap hack that will only probably work with the TMX format
e.length>0&&(c.value=e,e="")}return c},c.applyTMXProperties=function(c,d){var e=d[a.TMX_TAG_PROPERTIES];if("undefined"!=typeof e)if("undefined"!=typeof e.property){
// XML converted format
var f=e.property;Array.isArray(f)===!0?f.forEach(function(a){
// value are already converted in this case
c[a.name]=a.value}):
// value are already converted in this case
c[f.name]=f.value}else
// native json format
for(var g in e)e.hasOwnProperty(g)&&(
// set the value
c[g]=b(e[g]))},c}()}(me.TMXConstants),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(a){/**
     * TMX Object Group <br>
     * contains the object group definition as defined in Tiled. <br>
     * note : object group definition is translated into the virtual `me.game.world` using `me.Container`.
     * @see me.Container
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     */
me.TMXObjectGroup=Object.extend({init:function(b,c,d,e,f){/**
             * group name
             * @public
             * @type String
             * @name name
             * @memberOf me.TMXObjectGroup
             */
this.name=b,/**
             * group width
             * @public
             * @type Number
             * @name width
             * @memberOf me.TMXObjectGroup
             */
this.width=c[a.TMX_TAG_WIDTH],/**
             * group height
             * @public
             * @type Number
             * @name height
             * @memberOf me.TMXObjectGroup
             */
this.height=c[a.TMX_TAG_HEIGHT],/**
             * group z order
             * @public
             * @type Number
             * @name z
             * @memberOf me.TMXObjectGroup
             */
this.z=f,/**
             * group objects list definition
             * @see me.TMXObject
             * @public
             * @type Array
             * @name name
             * @memberOf me.TMXObjectGroup
             */
this.objects=[];var g="undefined"!=typeof c[a.TMX_TAG_VISIBLE]?c[a.TMX_TAG_VISIBLE]:!0;this.opacity=g===!0?(+c[a.TMX_TAG_OPACITY]||1).clamp(0,1):0,
// check if we have any user-defined properties
me.TMXUtils.applyTMXProperties(this,c);
// parse all objects
// (under `objects` for XML converted map, under `object` for native json map)
var h=c.objects||c.object,i=this;Array.isArray(h)===!0?
// JSON native format
h.forEach(function(a){i.objects.push(new me.TMXObject(a,d,e,f))}):h&&i.objects.push(new me.TMXObject(h,d,e,f))},/**
         * reset function
         * @ignore
         * @function
         */
destroy:function(){
// clear all allocated objects
this.objects=null},/**
         * return the object count
         * @ignore
         * @function
         */
getObjectCount:function(){return this.objects.length},/**
         * returns the object at the specified index
         * @ignore
         * @function
         */
getObjectByIndex:function(a){return this.objects[a]}}),/**
     * a TMX Object defintion, as defined in Tiled. <br>
     * note : object definition are translated into the virtual `me.game.world` using `me.Entity`.
     * @see me.Entity
     * @class
     * @extends Object
     * @memberOf me
     * @constructor
     */
me.TMXObject=Object.extend({init:function(b,c,d,e){
// check if the object has an associated gid
if(/**
             * object point list (for Polygon and PolyLine)
             * @public
             * @type Vector2d[]
             * @name points
             * @memberOf me.TMXObject
             */
this.points=void 0,/**
             * object name
             * @public
             * @type String
             * @name name
             * @memberOf me.TMXObject
             */
this.name=b[a.TMX_TAG_NAME],/**
             * object x position
             * @public
             * @type Number
             * @name x
             * @memberOf me.TMXObject
             */
this.x=+b[a.TMX_TAG_X],/**
             * object y position
             * @public
             * @type Number
             * @name y
             * @memberOf me.TMXObject
             */
this.y=+b[a.TMX_TAG_Y],/**
             * object z order
             * @public
             * @type Number
             * @name z
             * @memberOf me.TMXObject
             */
this.z=+e,/**
             * object width
             * @public
             * @type Number
             * @name width
             * @memberOf me.TMXObject
             */
this.width=+b[a.TMX_TAG_WIDTH]||0,/**
             * object height
             * @public
             * @type Number
             * @name height
             * @memberOf me.TMXObject
             */
this.height=+b[a.TMX_TAG_HEIGHT]||0,/**
             * object gid value
             * when defined the object is a tiled object
             * @public
             * @type Number
             * @name gid
             * @memberOf me.TMXObject
             */
this.gid=+b[a.TMX_TAG_GID]||null,/**
             * object type
             * @public
             * @type String
             * @name type
             * @memberOf me.TMXObject
             */
this.type=b[a.TMX_TAG_TYPE],/**
             * The rotation of the object in radians clockwise (defaults to 0)
             * @public
             * @type Number
             * @name rotation
             * @memberOf me.TMXObject
             */
this.rotation=Number.prototype.degToRad(+(b[a.TMX_ROTATION]||0)),/**
             * object unique identifier per level (Tiled 0.11.x+)
             * @public
             * @type Number
             * @name id
             * @memberOf me.TMXObject
             */
this.id=+b[a.TMX_TAG_ID]||void 0,/**
             * object orientation (orthogonal or isometric)
             * @public
             * @type String
             * @name orientation
             * @memberOf me.TMXObject
             */
this.orientation=c,/**
             * the collision shapes defined for this object
             * @public
             * @type Array
             * @name shapes
             * @memberOf me.TMXObject
             */
this.shapes=void 0,/**
             * if true, the object is an Ellipse
             * @public
             * @type Boolean
             * @name isEllipse
             * @memberOf me.TMXObject
             */
this.isEllipse=!1,/**
             * if true, the object is a Polygon
             * @public
             * @type Boolean
             * @name isPolygon
             * @memberOf me.TMXObject
             */
this.isPolygon=!1,/**
             * if true, the object is a PolyLine
             * @public
             * @type Boolean
             * @name isPolyLine
             * @memberOf me.TMXObject
             */
this.isPolyLine=!1,"number"==typeof this.gid)this.setTile(d);else if("undefined"!=typeof b[a.TMX_TAG_ELLIPSE])this.isEllipse=!0;else{var f=b[a.TMX_TAG_POLYGON];if("undefined"!=typeof f?this.isPolygon=!0:(f=b[a.TMX_TAG_POLYLINE],"undefined"!=typeof f&&(this.isPolyLine=!0)),"undefined"!=typeof f)if(this.points=[],"undefined"!=typeof f.points){
// get a point array
f=f.points.split(" ");
// and normalize them into an array of vectors
for(var g,h=0;h<f.length;h++)g=f[h].split(","),this.points.push(new me.Vector2d(+g[0],+g[1]))}else{
// already an object (native json format)
var i=this;f.forEach(function(a){i.points.push(new me.Vector2d(+a.x,+a.y))})}}
// Adjust the Position to match Tiled
me.game.tmxRenderer.adjustPosition(this),
// set the object properties
me.TMXUtils.applyTMXProperties(this,b),
// define the object shapes if required
this.shapes||(this.shapes=this.parseTMXShapes())},/**
         * set the object image (for Tiled Object)
         * @ignore
         * @function
         */
setTile:function(b){
// get the corresponding tileset
var c=b.getTilesetByGid(this.gid&a.TMX_CLEAR_BIT_MASK);
// set width and height equal to tile size
this.width=this.framewidth=c.tilewidth,this.height=this.frameheight=c.tileheight,
// the object corresponding tile object
this.tile=new me.Tile(this.x,this.y,this.gid,c)},/**
         * parses the TMX shape definition and returns a corresponding array of me.Shape object
         * @name parseTMXShapes
         * @memberOf me.TMXObject
         * @private
         * @function
         * @return {me.Polygon[]|me.Line[]|me.Ellipse[]} an array of shape objects
         */
parseTMXShapes:function(){var a=0,b=[];
// add an ellipse shape
if(this.isEllipse===!0)
// ellipse coordinates are the center position, so set default to the corresonding radius
b.push(new me.Ellipse(this.width/2,this.height/2,this.width,this.height).rotate(this.rotation));else if(this.isPolygon===!0)b.push(new me.Polygon(0,0,this.points).rotate(this.rotation));else if(this.isPolyLine===!0){var c,d,e=this.points,f=e.length-1;for(a=0;f>a;a++)c=e[a],d=e[a+1].clone(),0!==this.rotation&&(c=c.rotate(this.rotation),d=d.rotate(this.rotation)),b.push(new me.Line(0,0,[c,d]))}else b.push(new me.Polygon(0,0,[new me.Vector2d,new me.Vector2d(this.width,0),new me.Vector2d(this.width,this.height),new me.Vector2d(0,this.height)]).rotate(this.rotation));
// Apply isometric projection
if("isometric"===this.orientation)for(a=0;a<b.length;a++)b[a].rotate(Math.PI/4).scale(Math.SQRT2,Math.SQRT1_2);return b},/**
         * getObjectPropertyByName
         * @ignore
         * @function
         */
getObjectPropertyByName:function(a){return this[a]}})}(me.TMXConstants),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(a){/**
     * a basic tile object
     * @class
     * @extends me.Rect
     * @memberOf me
     * @constructor
     * @param {Number} x x index of the Tile in the map
     * @param {Number} y y index of the Tile in the map
     * @param {Number} gid tile gid
     * @param {me.TMXTileset} tileset the corresponding tileset object

     */
me.Tile=me.Rect.extend({/** @ignore */
init:function(b,c,d,e){/**
             * tileset
             * @public
             * @type me.TMXTileset
             * @name me.Tile#tileset
             */
this.tileset=e,/**
             * the tile transformation matrix (if defined)
             * @ignore
             */
this.transform=null,me.Rect.prototype.init.apply(this,[b*e.tilewidth,c*e.tileheight,e.tilewidth,e.tileheight]),
// Tile col / row pos
this.col=b,this.row=c,/**
             * tileId
             * @public
             * @type int
             * @name me.Tile#tileId
             */
this.tileId=d,/**
             * True if the tile is flipped horizontally<br>
             * @public
             * @type Boolean
             * @name me.Tile#flipX
             */
this.flippedX=0!==(this.tileId&a.TMX_FLIP_H),/**
             * True if the tile is flipped vertically<br>
             * @public
             * @type Boolean
             * @name me.Tile#flippedY
             */
this.flippedY=0!==(this.tileId&a.TMX_FLIP_V),/**
             * True if the tile is flipped anti-diagonally<br>
             * @public
             * @type Boolean
             * @name me.Tile#flippedAD
             */
this.flippedAD=0!==(this.tileId&a.TMX_FLIP_AD),/**
             * Global flag that indicates if the tile is flipped<br>
             * @public
             * @type Boolean
             * @name me.Tile#flipped
             */
this.flipped=this.flippedX||this.flippedY||this.flippedAD,
// create a transformation matrix if required
this.flipped===!0&&this.createTransform(),
// clear out the flags and set the tileId
this.tileId&=a.TMX_CLEAR_BIT_MASK},/**
         * create a transformation matrix for this tile
         * @ignore
         */
createTransform:function(){null===this.transform&&(this.transform=new me.Matrix2d),
// reset the matrix (in case it was already defined)
this.transform.identity();var a=this.transform.val;this.flippedAD&&(
// Use shearing to swap the X/Y axis
this.transform.set(0,1,0,1,0,0,0,0,1),this.transform.translate(0,this.height-this.width)),this.flippedX&&(this.transform.translate(this.flippedAD?this.height:this.width,0),a[0]*=-1,a[3]*=-1),this.flippedY&&(this.transform.translate(0,this.flippedAD?this.width:this.height),a[1]*=-1,a[4]*=-1)},/**
         * return a renderable object for this Tile object
         * @name me.Tile#getRenderable
         * @public
         * @function
         * @param {Object} [settings] see {@link me.Sprite}
         * @return {me.Renderable} either a me.Sprite object or a me.AnimationSheet (for animated tiles)
         */
getRenderable:function(a){var b;if(this.tileset.animations.has(this.tileId)){var c=[];this.tileset.animations.get(this.tileId).frames.forEach(function(a){c.push(a.tileid)}),b=this.tileset.texture.createAnimationFromName(c)}else b=this.tileset.texture.createSpriteFromName(this.tileId-this.tileset.firstgid);
// AD flag is never set for Tile Object, use the given rotation instead
if("undefined"!=typeof a){var d=a.rotation||0;if(0!==d)
// translate accordingly
switch(b._sourceAngle+=d,d){case Math.PI:b.translate(0,2*this.height);break;case Math.PI/2:b.translate(this.width,this.height);break;case-(Math.PI/2):b.translate(-this.width,this.height)}}
// any H/V flipping to apply?
return this.flipped===!0&&(b.flipX(this.flippedX),b.flipY(this.flippedY)),b}})}(me.TMXConstants),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(a){/**
     * a TMX Tile Set Object
     * @class
     * @memberOf me
     * @constructor
     */
me.TMXTileset=Object.extend({
// constructor
init:function(b){var c=0;
// first gid
// tile properties (collidable, etc..)
this.TileProperties=[],this.firstgid=this.lastgid=+b[a.TMX_TAG_FIRSTGID];var d=b[a.TMX_TAG_SOURCE];if(d&&"tsx"===me.utils.getFileExtension(d)&&(d=me.utils.getBasename(d),b=me.loader.getTMX(d).tileset,!b))throw new me.Error(d+" TSX tileset not found");this.name=b[a.TMX_TAG_NAME],this.tilewidth=+b[a.TMX_TAG_TILEWIDTH],this.tileheight=+b[a.TMX_TAG_TILEHEIGHT],this.spacing=+b[a.TMX_TAG_SPACING]||0,this.margin=+b[a.TMX_TAG_MARGIN]||0,
// set tile offset properties (if any)
this.tileoffset=new me.Vector2d(0,0),/**
             * Tileset contains animated tiles
             * @public
             * @type Boolean
             * @name me.TMXTileset#isAnimated
             */
this.isAnimated=!1,/**
             * Tileset animations
             * @private
             * @type Map
             * @name me.TMXTileset#animations
             */
this.animations=new Map;var e=b.tiles;if("undefined"!=typeof e)
// native JSON format
for(c in e)e.hasOwnProperty(c)&&"animation"in e[c]&&(this.isAnimated=!0,this.animations.set(+c+this.firstgid,{dt:0,idx:0,frames:e[c].animation,cur:e[c].animation[0]}));var f=b[a.TMX_TAG_TILEOFFSET];f&&(this.tileoffset.x=+f[a.TMX_TAG_X],this.tileoffset.y=+f[a.TMX_TAG_Y]);
// set tile properties, if any
var g=b.tileproperties;if(g)
// native JSON format
for(c in g)g.hasOwnProperty(c)&&this.setTileProperty(c+this.firstgid,g[c]);else if(b[a.TMX_TAG_TILE])
// iterate it
for(g=b[a.TMX_TAG_TILE],Array.isArray(g)||(g=[g]),c=0;c<g.length;c++){var h=+g[c][a.TMX_TAG_ID]+this.firstgid,i={};me.TMXUtils.applyTMXProperties(i,g[c]),
//apply tiled defined properties
this.setTileProperty(h,i),
// Get animations
"animation"in g[c]&&(this.isAnimated=!0,this.animations.set(h,{dt:0,idx:0,frames:g[c].animation.frame,cur:g[c].animation.frame[0]}))}
// check for the texture corresponding image
// manage inconstency between XML and JSON format
var j="string"==typeof b[a.TMX_TAG_IMAGE]?b[a.TMX_TAG_IMAGE]:b[a.TMX_TAG_IMAGE].source;if(this.image=me.utils.getImage(j),!this.image)throw new me.TMXTileset.Error("melonJS: '"+j+"' file for tileset '"+this.name+"' not found!");
// create a texture atlas for the given tileset
this.texture=me.video.renderer.cache.get(this.image,{framewidth:this.tilewidth,frameheight:this.tileheight,margin:this.margin,spacing:this.spacing}),this.atlas=this.texture.getAtlas();
// calculate the number of tiles per horizontal line
var k=~~((this.image.width-this.margin)/(this.tilewidth+this.spacing)),l=~~((this.image.height-this.margin)/(this.tileheight+this.spacing));
// compute the last gid value in the tileset
this.lastgid=this.firstgid+(k*l-1||0)},/**
         * set the tile properties
         * @ignore
         * @function
         */
setTileProperty:function(a,b){
// set the given tile id
this.TileProperties[a]=b},/**
         * return true if the gid belongs to the tileset
         * @name me.TMXTileset#contains
         * @public
         * @function
         * @param {Number} gid
         * @return {Boolean}
         */
contains:function(a){return a>=this.firstgid&&a<=this.lastgid},/**
         * Get the view (local) tile ID from a GID, with animations applied
         * @name me.TMXTileset#getViewTileId
         * @public
         * @function
         * @param {Number} gid Global tile ID
         * @return {Number} View tile ID
         */
getViewTileId:function(a){
// apply animations
// get the local tileset id
return this.animations.has(a)?a=this.animations.get(a).cur.tileid:a-=this.firstgid,a},/**
         * return the properties of the specified tile
         * @name me.TMXTileset#getTileProperties
         * @public
         * @function
         * @param {Number} tileId
         * @return {Object}
         */
getTileProperties:function(a){return this.TileProperties[a]},
// update tile animations
update:function(a){var b=0,c=!1;return this.animations.forEach(function(d){d.dt+=a,b=d.cur.duration,d.dt>=b&&(d.dt-=b,d.idx=(d.idx+1)%d.frames.length,d.cur=d.frames[d.idx],c=!0)}),c},
// draw the x,y tile
drawTile:function(a,b,c,d){
// check if any transformation is required
d.flipped&&(a.save(),
// apply the tile current transform
a.translate(b,c),a.transform(d.transform),
// reset both values as managed through transform();
b=c=0);var e=this.atlas[this.getViewTileId(d.tileId)].offset;
// draw the tile
a.drawImage(this.image,e.x,e.y,this.tilewidth,this.tileheight,b,c,this.tilewidth,this.tileheight),d.flipped&&
// restore the context to the previous state
a.restore()}}),/**
     * an object containing all tileset
     * @class
     * @memberOf me
     * @constructor
     */
me.TMXTilesetGroup=Object.extend({
// constructor
init:function(){this.tilesets=[]},
//add a tileset to the tileset group
add:function(a){this.tilesets.push(a)},
//return the tileset at the specified index
getTilesetByIndex:function(a){return this.tilesets[a]},/**
         * return the tileset corresponding to the specified id <br>
         * will throw an exception if no matching tileset is found
         * @name me.TMXTilesetGroup#getTilesetByGid
         * @public
         * @function
         * @param {Number} gid
         * @return {me.TMXTileset} corresponding tileset
         */
getTilesetByGid:function(a){
// cycle through all tilesets
for(var b=-1,c=0,d=this.tilesets.length;d>c;c++){
// return the corresponding tileset if matching
if(this.tilesets[c].contains(a))return this.tilesets[c];
// typically indicates a layer with no asset loaded (collision?)
this.tilesets[c].firstgid===this.tilesets[c].lastgid&&a>=this.tilesets[c].firstgid&&(
// store the id if the [firstgid .. lastgid] is invalid
b=c)}
// return the tileset with the invalid range
if(-1!==b)return this.tilesets[b];throw new me.Error("no matching tileset found for gid "+a)}}),/**
     * Base class for TMXTileset exception handling.
     * @name Error
     * @class
     * @memberOf me.TMXTileset
     * @constructor
     * @param {String} msg Error message.
     */
me.TMXTileset.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.TMXTileset.Error"}})}(me.TMXConstants),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(){/**
     * an Orthogonal Map Renderder
     * Tiled QT 0.7.x format
     * @memberOf me
     * @ignore
     * @constructor
     */
me.TMXOrthogonalRenderer=Object.extend({
// constructor
init:function(a,b,c,d){this.cols=a,this.rows=b,this.tilewidth=c,this.tileheight=d},/**
         * return true if the renderer can render the specified layer
         * @ignore
         */
canRender:function(a){return"orthogonal"===a.orientation&&this.cols===a.cols&&this.rows===a.rows&&this.tilewidth===a.tilewidth&&this.tileheight===a.tileheight},/**
         * return the tile position corresponding to the specified pixel
         * @ignore
         */
pixelToTileCoords:function(a,b){return new me.Vector2d(this.pixelToTileX(a),this.pixelToTileY(b))},/**
         * return the tile position corresponding for the given X coordinate
         * @ignore
         */
pixelToTileX:function(a){return a/this.tilewidth},/**
         * return the tile position corresponding for the given Y coordinates
         * @ignore
         */
pixelToTileY:function(a){return a/this.tileheight},/**
         * return the pixel position corresponding of the specified tile
         * @ignore
         */
tileToPixelCoords:function(a,b){return new me.Vector2d(a*this.tilewidth,b*this.tileheight)},/**
         * fix the position of Objects to match
         * the way Tiled places them
         * @ignore
         */
adjustPosition:function(a){
// only adjust position if obj.gid is defined
"number"==typeof a.gid&&(
// Tiled objects origin point is "bottom-left" in Tiled,
// "top-left" in melonJS)
a.y-=a.height)},/**
         * draw the tile map
         * @ignore
         */
drawTile:function(a,b,c,d,e){
// draw the tile
e.drawTile(a,e.tileoffset.x+b*this.tilewidth,e.tileoffset.y+(c+1)*this.tileheight-e.tileheight,d)},/**
         * draw the tile map
         * @ignore
         */
drawTileLayer:function(a,b,c){
// get top-left and bottom-right tile position
var d=this.pixelToTileCoords(c.pos.x,c.pos.y).floorSelf(),e=this.pixelToTileCoords(c.pos.x+c.width+this.tilewidth,c.pos.y+c.height+this.tileheight).ceilSelf();
//ensure we are in the valid tile range
e.x=e.x>this.cols?this.cols:e.x,e.y=e.y>this.rows?this.rows:e.y;
// main drawing loop
for(var f=d.y;f<e.y;f++)for(var g=d.x;g<e.x;g++){var h=b.layerData[g][f];h&&this.drawTile(a,g,f,h,h.tileset)}}}),/**
     * an Isometric Map Renderder
     * Tiled QT 0.7.x format
     * @memberOf me
     * @ignore
     * @constructor
     */
me.TMXIsometricRenderer=Object.extend({
// constructor
init:function(a,b,c,d){this.cols=a,this.rows=b,this.tilewidth=c,this.tileheight=d,this.hTilewidth=c/2,this.hTileheight=d/2,this.originX=this.rows*this.hTilewidth},/**
         * return true if the renderer can render the specified layer
         * @ignore
         */
canRender:function(a){return"isometric"===a.orientation&&this.cols===a.cols&&this.rows===a.rows&&this.tilewidth===a.tilewidth&&this.tileheight===a.tileheight},/**
         * return the tile position corresponding to the specified pixel
         * @ignore
         */
pixelToTileCoords:function(a,b){return new me.Vector2d(this.pixelToTileX(a,b),this.pixelToTileY(b,a))},/**
         * return the tile position corresponding for the given X coordinate
         * @ignore
         */
pixelToTileX:function(a,b){return b/this.tileheight+(a-this.originX)/this.tilewidth},/**
         * return the tile position corresponding for the given Y coordinates
         * @ignore
         */
pixelToTileY:function(a,b){return a/this.tileheight-(b-this.originX)/this.tilewidth},/**
         * return the pixel position corresponding of the specified tile
         * @ignore
         */
tileToPixelCoords:function(a,b){return new me.Vector2d((a-b)*this.hTilewidth+this.originX,(a+b)*this.hTileheight)},/**
         * fix the position of Objects to match
         * the way Tiled places them
         * @ignore
         */
adjustPosition:function(a){var b=a.x/this.hTilewidth,c=a.y/this.tileheight,d=this.tileToPixelCoords(b,c);a.x=d.x,a.y=d.y},/**
         * draw the tile map
         * @ignore
         */
drawTile:function(a,b,c,d,e){
// draw the tile
e.drawTile(a,(this.cols-1)*e.tilewidth+(b-c)*e.tilewidth>>1,-e.tilewidth+(b+c)*e.tileheight>>2,d)},/**
         * draw the tile map
         * @ignore
         */
drawTileLayer:function(a,b,c){
// cache a couple of useful references
var d=b.tileset,e=d.tileoffset,f=this.pixelToTileCoords(c.pos.x-d.tilewidth,c.pos.y-d.tileheight).floorSelf(),g=this.pixelToTileCoords(c.pos.x+c.width+d.tilewidth,c.pos.y+c.height+d.tileheight).ceilSelf(),h=this.tileToPixelCoords(g.x,g.y),i=this.tileToPixelCoords(f.x,f.y);i.x-=this.hTilewidth,i.y+=this.tileheight;/* Determine in which half of the tile the top-left corner of the area we
             * need to draw is. If we're in the upper half, we need to start one row
             * up due to those tiles being visible as well. How we go up one row
             * depends on whether we're in the left or right half of the tile.
             */
var j=i.y-c.pos.y>this.hTileheight,k=c.pos.x-i.x<this.hTilewidth;j&&(k?(f.x--,i.x-=this.hTilewidth):(f.y--,i.x+=this.hTilewidth),i.y-=this.hTileheight);
// main drawing loop
for(var l=j^k,m=f.clone(),n=i.y;n-this.tileheight<h.y;n+=this.hTileheight){m.setV(f);for(var o=i.x;o<h.x;o+=this.tilewidth){
//check if it's valid tile, if so render
if(m.x>=0&&m.y>=0&&m.x<this.cols&&m.y<this.rows){var p=b.layerData[m.x][m.y];p&&(d=p.tileset,e=d.tileoffset,d.drawTile(a,e.x+o,e.y+n-d.tileheight,p))}
// Advance to the next column
m.x++,m.y--}
// Advance to the next row
l?(f.y++,i.x-=this.hTilewidth,l=!1):(f.x++,i.x+=this.hTilewidth,l=!0)}}}),/**
     * an Hexagonal Map Renderder
     * Tiled QT 0.7.x format
     * @memberOf me
     * @ignore
     * @constructor
     */
me.TMXHexagonalRenderer=Object.extend({
// constructor
init:function(){
// TBD
throw"Orthogonal type TMX Tile Map not supported!"},/**
         * return true if the renderer can render the specified layer
         * @ignore
         */
canRender:function(a){return"hexagonal"===a.orientation},/**
         * return the tile position corresponding to the specified pixel
         * @ignore
         */
pixelToTileCoords:function(){},/**
         * return the tile position corresponding for the given X coordinate
         * @ignore
         */
pixelToTileX:function(){},/**
         * return the tile position corresponding for the given Y coordinates
         * @ignore
         */
pixelToTileY:function(){},/**
         * return the pixel position corresponding of the specified tile
         * @ignore
         */
tileToPixelCoords:function(){},/**
         * fix the position of Objects to match
         * the way Tiled places them
         * @ignore
         */
adjustPosition:function(){},/**
         * draw the tile map
         * @ignore
         */
drawTile:function(){},/**
         * draw the tile map
         * @ignore
         */
drawTileLayer:function(){}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(a){/**
     * a generic Color Layer Object
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {String} name Layer name
     * @param {me.Color|String} color CSS color
     * @param {Number} z z-index position
     */
me.ColorLayer=me.Renderable.extend({
// constructor
init:function(a,b,c){
// parent constructor
me.Renderable.prototype.init.apply(this,[0,0,1/0,1/0]),
// apply given parameters
this.name=a,this.color=b,this.z=c,this.floating=!0},/**
         * draw the color layer
         * @ignore
         */
draw:function(a,b){
// set layer opacity
var c=a.globalAlpha();a.setGlobalAlpha(c*this.getOpacity());var d=me.game.viewport.pos;a.setColor(this.color),a.fillRect(b.left-d.x,b.top-d.y,b.width,b.height),
// restore context alpha value
a.setGlobalAlpha(c),a.setColor("#fff")}}),/**
     * a generic Image Layer Object
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {Number} x x coordinate
     * @param {Number} y y coordinate
     * @param {Object} settings ImageLayer properties
     * @param {Image|String} settings.image Image reference. See {@link me.loader.getImage}
     * @param {Number} [settings.width=image.width] Layer width in pixels
     * @param {Number} [settings.height=image.height] Layer height in pixels
     * @param {String} [settings.name="me.ImageLayer"] Layer name
     * @param {Number} [settings.z=0] z-index position
     * @param {Number|me.Vector2d} [settings.ratio=1.0] Scrolling ratio to be applied
     */
me.ImageLayer=me.Renderable.extend({/**
         * constructor
         * @ignore
         * @function
         */
init:function(a,b,c){
// XXX: Keep this check?
if(
// layer name
this.name=c.name||"me.ImageLayer",
// maximum layer size
this.maxWidth=c.width||1/0,this.maxHeight=c.height||1/0,
// get the corresponding image
this.image=me.utils.getImage(c.image),!this.image)throw new me.Error(("string"==typeof c.image?"'"+c.image+"'":"Image")+" file for Image Layer '"+this.name+"' not found!");this.imagewidth=this.image.width,this.imageheight=this.image.height,
// call the constructor
me.Renderable.prototype.init.apply(this,[a,b,this.maxWidth,this.maxHeight]),
// resize/compute the correct image layer size
this.resize(me.game.viewport.width,me.game.viewport.height),
// specify the start offset when drawing the image (for parallax/repeat features)
this.offset=new me.Vector2d(0,0),
// displaying order
this.z=c.z||0,/**
             * Define the image scrolling ratio<br>
             * Scrolling speed is defined by multiplying the viewport delta position (e.g. followed entity) by the specified ratio<br>
             * To specify a value through Tiled, use one of the following format : <br>
             * - a number, to change the value for both axis <br>
             * - a json expression like `json:{"x":0.5,"y":0.5}` if you wish to specify a different value for both x and y
             * @public
             * @type me.Vector2d
             * @default <1.0,1.0>
             * @name me.ImageLayer#ratio
             */
this.ratio=new me.Vector2d(1,1),"undefined"!=typeof c.ratio&&(
// little hack for backward compatiblity
"number"==typeof c.ratio?this.ratio.set(c.ratio,c.ratio):this.ratio.setV(c.ratio)),
// last position of the viewport
this.lastpos=me.game.viewport.pos.clone(),
// Image Layer is considered as a floating object
this.floating=!0,
// default value for repeat
this._repeat="repeat",this.repeatX=!0,this.repeatY=!0,/**
             * Define if and how an Image Layer should be repeated.<br>
             * By default, an Image Layer is repeated both vertically and horizontally.<br>
             * Acceptable values : <br>
             * * 'repeat' - The background image will be repeated both vertically and horizontally. (default) <br>
             * * 'repeat-x' - The background image will be repeated only horizontally.<br>
             * * 'repeat-y' - The background image will be repeated only vertically.<br>
             * * 'no-repeat' - The background-image will not be repeated.<br>
             * @public
             * @type String
             * @name me.ImageLayer#repeat
             */
Object.defineProperty(this,"repeat",{get:function(){return this._repeat},set:function(a){switch(this._repeat=a,this._repeat){case"no-repeat":this.repeatX=!1,this.repeatY=!1;break;case"repeat-x":this.repeatX=!0,this.repeatY=!1;break;case"repeat-y":this.repeatX=!1,this.repeatY=!0;break;default:// "repeat"
this.repeatX=!0,this.repeatY=!0}}}),
// default origin position
this.anchorPoint.set(0,0),
// register to the viewport change notification
this.vpChangeHdlr=me.event.subscribe(me.event.VIEWPORT_ONCHANGE,this.updateLayer.bind(this)),this.vpResizeHdlr=me.event.subscribe(me.event.VIEWPORT_ONRESIZE,this.resize.bind(this))},/**
         * resize the Image Layer to match the given size
         * @name resize
         * @memberOf me.ImageLayer
         * @function
         * @param {Number} w new width
         * @param {Number} h new height
        */
resize:function(a,b){me.Renderable.prototype.resize.apply(this,[Math.min(a,this.maxWidth),Math.min(b,this.maxHeight)])},/**
         * updateLayer function
         * @ignore
         * @function
         */
updateLayer:function(a){(0!==this.ratio.x||0!==this.ratio.y)&&(this.repeatX||this.repeatY?(
// parallax / scrolling image
this.offset.x+=(a.x-this.lastpos.x)*this.ratio.x%this.imagewidth,this.offset.x=(this.imagewidth+this.offset.x)%this.imagewidth,this.offset.y+=(a.y-this.lastpos.y)*this.ratio.y%this.imageheight,this.offset.y=(this.imageheight+this.offset.y)%this.imageheight):(this.offset.x+=(a.x-this.lastpos.x)*this.ratio.x,this.offset.y+=(a.y-this.lastpos.y)*this.ratio.y),this.lastpos.setV(a))},/**
         * draw the image layer
         * @ignore
         */
draw:function(a,b){
// translate default position using the anchorPoint value
var c=me.game.viewport,d=0!==this.anchorPoint.y||0!==this.anchorPoint.x||0!==this.pos.y||0!==this.pos.x,e=~~(this.pos.x+this.anchorPoint.x*(c.width-this.imagewidth)),f=~~(this.pos.y+this.anchorPoint.y*(c.height-this.imageheight)),g=a.globalAlpha();d&&a.translate(e,f),
// set the layer alpha value
a.setGlobalAlpha(g*this.getOpacity());var h,i;
// if not scrolling ratio define, static image
if(0===this.ratio.x&&0===this.ratio.y)h=Math.min(b.width,this.imagewidth),i=Math.min(b.height,this.imageheight),a.drawImage(this.image,b.left,b.top,h,i,b.left,b.top,h,i);else{var j=~~this.offset.x,k=~~this.offset.y,l=0,m=0;for(h=Math.min(this.imagewidth-j,this.width),i=Math.min(this.imageheight-k,this.height);;){do a.drawImage(this.image,j,k,// sx, sy
h,i,l,m,// dx, dy
h,i),k=0,m+=i,i=Math.min(this.imageheight,this.height-m);while(this.repeatY&&m<this.height);if(l+=h,!this.repeatX||l>=this.width)
// done ("end" of the viewport)
break;
// else update required var for next iteration
j=0,h=Math.min(this.imagewidth,this.width-l),k=~~this.offset.y,m=0,i=Math.min(this.imageheight-~~this.offset.y,this.height)}}
// reset the layer alpha value
a.setGlobalAlpha(g),d&&a.translate(-e,-f)},
// called when the layer is destroyed
destroy:function(){
// cancel the event subscription
this.vpChangeHdlr&&(me.event.unsubscribe(this.vpChangeHdlr),this.vpChangeHdlr=null),this.vpResizeHdlr&&(me.event.unsubscribe(this.vpResizeHdlr),this.vpResizeHdlr=null),
// clear all allocated objects
this.image=null,this.lastpos=null}}),/**
     * a TMX Tile Layer Object
     * Tiled QT 0.7.x format
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {Number} tilewidth width of each tile in pixels
     * @param {Number} tileheight height of each tile in pixels
     * @param {String} orientation "isometric" or "orthogonal"
     * @param {me.TMXTilesetGroup} tilesets tileset as defined in Tiled
     * @param {Number} z z-index position
     */
me.TMXLayer=me.Renderable.extend({/** @ignore */
init:function(a,b,c,d,e){if(
// super constructor
me.Renderable.prototype.init.apply(this,[0,0,0,0]),
// tile width & height
this.tilewidth=a,this.tileheight=b,
// layer orientation
this.orientation=c,/**
             * The Layer corresponding Tilesets
             * @public
             * @type me.TMXTilesetGroup
             * @name me.TMXLayer#tilesets
             */
this.tilesets=d,
// the default tileset
this.tileset=this.tilesets?this.tilesets.getTilesetByIndex(0):null,/**
             * All animated tilesets in this layer
             * @private
             * @type Array
             * @name me.TMXLayer#animatedTilesets
             */
this.animatedTilesets=[],this.tilesets)for(var f=this.tilesets.tilesets,g=0;g<f.length;g++)f[g].isAnimated&&(f[g].isAnimated=!1,this.animatedTilesets.push(f[g]));/**
             * Layer contains tileset animations
             * @public
             * @type Boolean
             * @name me.TMXLayer#isAnimated
             */
this.isAnimated=this.animatedTilesets.length>0,
// Force pre-render off when tileset animation is used
this.isAnimated&&(this.preRender=!1),
// for displaying order
this.z=e},/** @ignore */
initFromJSON:function(b){
// additional TMX flags
this.name=b[a.TMX_TAG_NAME],this.cols=+b[a.TMX_TAG_WIDTH],this.rows=+b[a.TMX_TAG_HEIGHT],
// hexagonal maps only
this.hexsidelength=+b[a.TMX_HEXSIDELEN]||void 0;
// layer opacity
var c="undefined"!=typeof b[a.TMX_TAG_VISIBLE]?b[a.TMX_TAG_VISIBLE]:!0;this.setOpacity(c?+b[a.TMX_TAG_OPACITY]:0),
// layer "real" size
"isometric"===this.orientation?(this.width=(this.cols+this.rows)*(this.tilewidth/2),this.height=(this.cols+this.rows)*(this.tileheight/2)):(this.width=this.cols*this.tilewidth,this.height=this.rows*this.tileheight),
// check if we have any user-defined properties
me.TMXUtils.applyTMXProperties(this,b),
// check for the correct rendering method
"undefined"==typeof this.preRender&&(this.preRender=me.sys.preRender),
// if pre-rendering method is use, create an offline canvas/renderer
this.preRender===!0&&(this.canvasRenderer=new me.CanvasRenderer(me.video.createCanvas(this.width,this.height),this.width,this.height,{})),
// initialize the layer data array
this.initArray(this.cols,this.rows),
// Resize the bounding rect
this.resizeBounds(this.width,this.height)},/**
         * destroy function
         * @ignore
         * @function
         */
destroy:function(){
// clear all allocated objects
this.preRender&&(this.canvasRenderer=null),this.renderer=null,
// clear all allocated objects
this.layerData=null,this.tileset=null,this.tilesets=null,this.animatedTilesets=null},/**
         * set the layer renderer
         * @ignore
         */
setRenderer:function(a){this.renderer=a},/**
         * Create all required arrays
         * @ignore
         */
initArray:function(a,b){
// initialize the array
this.layerData=[];for(var c=0;a>c;c++){this.layerData[c]=[];for(var d=0;b>d;d++)this.layerData[c][d]=null}},/**
         * Return the TileId of the Tile at the specified position
         * @name getTileId
         * @memberOf me.TMXLayer
         * @public
         * @function
         * @param {Number} x X coordinate
         * @param {Number} y Y coordinate
         * @return {Number} TileId
         */
getTileId:function(a,b){var c=this.getTile(a,b);return c?c.tileId:null},/**
         * Return the Tile object at the specified position
         * @name getTile
         * @memberOf me.TMXLayer
         * @public
         * @function
         * @param {Number} x X coordinate
         * @param {Number} y Y coordinate
         * @return {me.Tile} Tile Object
         */
getTile:function(a,b){return this.layerData[~~this.renderer.pixelToTileX(a,b)][~~this.renderer.pixelToTileY(b,a)]},/**
         * Create a new Tile at the specified position
         * @name setTile
         * @memberOf me.TMXLayer
         * @public
         * @function
         * @param {Number} x X coordinate
         * @param {Number} y Y coordinate
         * @param {Number} tileId tileId
         * @return {me.Tile} the corresponding newly created tile object
         */
setTile:function(b,c,d){this.tileset.contains(d)||(
// look for the corresponding tileset
this.tileset=this.tilesets.getTilesetByGid(d&a.TMX_CLEAR_BIT_MASK));var e=this.layerData[b][c]=new me.Tile(b,c,d,this.tileset);
// draw the corresponding tile
return this.preRender&&this.renderer.drawTile(this.canvasRenderer,b,c,e,e.tileset),e},/**
         * clear the tile at the specified position
         * @name clearTile
         * @memberOf me.TMXLayer
         * @public
         * @function
         * @param {Number} x X coordinate
         * @param {Number} y Y coordinate
         */
clearTile:function(a,b){
// clearing tile
this.layerData[a][b]=null,
// erase the corresponding area in the canvas
this.preRender&&this.canvasRenderer.clearRect(a*this.tilewidth,b*this.tileheight,this.tilewidth,this.tileheight)},/**
         * update animations in a tileset layer
         * @ignore
         */
update:function(a){if(this.isAnimated){for(var b=!1,c=0;c<this.animatedTilesets.length;c++)b=this.animatedTilesets[c].update(a)||b;return b}return!1},/**
         * draw a tileset layer
         * @ignore
         */
draw:function(a,b){
// set the layer alpha value
var c=a.globalAlpha();
// use the offscreen canvas
if(a.setGlobalAlpha(c*this.getOpacity()),this.preRender){var d=Math.min(b.width,this.width),e=Math.min(b.height,this.height);
// draw using the cached canvas
a.drawImage(this.canvasRenderer.getCanvas(),b.pos.x,b.pos.y,// sx,sy
d,e,// sw,sh
b.pos.x,b.pos.y,// dx,dy
d,e)}else
// draw the layer
this.renderer.drawTileLayer(a,this,b);
// restore context to initial state
a.setGlobalAlpha(c)}})}(me.TMXConstants),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(){/**
     * a TMX Tile Map Object
     * Tiled QT 0.7.x format
     * @class
     * @memberOf me
     * @constructor
     * @param {String} levelId name of TMX map
     */
me.TMXTileMap=me.Renderable.extend({
// constructor
init:function(a){
// map id
this.levelId=a,
// map default z order
this.z=0,/**
             * name of the tilemap
             * @public
             * @type String
             * @name me.TMXTileMap#name
             */
this.name=null,/**
             * width of the tilemap in tiles
             * @public
             * @type Int
             * @name me.TMXTileMap#cols
             */
this.cols=0,/**
             * height of the tilemap in tiles
             * @public
             * @type Int
             * @name me.TMXTileMap#rows
             */
this.rows=0,/**
             * Tile width
             * @public
             * @type Int
             * @name me.TMXTileMap#tilewidth
             */
this.tilewidth=0,/**
             * Tile height
             * @public
             * @type Int
             * @name me.TMXTileMap#tileheight
             */
this.tileheight=0,
// corresponding tileset for this map
this.tilesets=null,
// map layers
this.mapLayers=[],
// map Object
this.objectGroups=[],
// tilemap version
this.version="",
// map type (orthogonal or isometric)
this.orientation="",
// tileset(s)
this.tilesets=null,
// loading flag
this.initialized=!1,me.Renderable.prototype.init.apply(this,[0,0,0,0])},/**
         * Center the map on the viewport
         * @name me.TMXTileMap#moveToCenter
         * @public
         * @function
         */
moveToCenter:function(){
// center the map if smaller than the current viewport
var a=me.game.viewport.width,b=me.game.viewport.height;if(this.width<a||this.height<b){var c=~~((a-this.width)/2),d=~~((b-this.height)/2);
// update the map default position
this.pos.set(c>0?c:0,d>0?d:0)}},/**
         * return the corresponding object group definition
         * @name me.TMXTileMap#getObjectGroupByName
         * @public
         * @function
         * @return {me.TMXObjectGroup} group
         */
getObjectGroupByName:function(a){for(var b=null,c=this.objectGroups.length;c--;)if(this.objectGroups[c].name===a){b=this.objectGroups[c];break}return b},/**
         * return all the existing object group definition
         * @name me.TMXTileMap#getObjectGroups
         * @public
         * @function
         * @return {me.TMXObjectGroup[]} Array of Groups
         */
getObjectGroups:function(){return this.objectGroups},/**
         * return all the existing layers
         * @name me.TMXTileMap#getLayers
         * @public
         * @function
         * @return {me.TMXLayer[]} Array of Layers
         */
getLayers:function(){return this.mapLayers},/**
         * return the specified layer object
         * @name me.TMXTileMap#getLayerByName
         * @public
         * @function
         * @param {String} name Layer Name
         * @return {me.TMXLayer} Layer Object
         */
getLayerByName:function(a){for(var b=null,c=this.mapLayers.length;c--;)if(this.mapLayers[c].name===a){b=this.mapLayers[c];break}return b},/**
         * clear the tile at the specified position from all layers
         * @name me.TMXTileMap#clearTile
         * @public
         * @function
         * @param {Number} x x position
         * @param {Number} y y position
         */
clearTile:function(a,b){
// add all layers
for(var c=this.mapLayers.length;c--;)
// that are visible
this.mapLayers[c]instanceof me.TMXLayer&&this.mapLayers[c].clearTile(a,b)},/**
         * destroy function, clean all allocated objects
         * @ignore
         */
destroy:function(){var a;if(this.initialized===!0){
// reset/clear all layers
for(a=this.mapLayers.length;a--;)this.mapLayers[a]=null;
// reset object groups
for(a=this.objectGroups.length;a--;)
// objectGroups is not added to the game world
// so we call the destroy function manually
this.objectGroups[a].destroy(),this.objectGroups[a]=null;
// call parent reset function
this.tilesets=null,this.mapLayers.length=0,this.objectGroups.length=0,this.pos.set(0,0),this.initialized=!1}}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 * Tile QT 0.7.x format
 * http://www.mapeditor.org/
 *
 */
function(a){/**
     * a TMX Map Reader
     * Tiled QT 0.7.x format
     * @class
     * @memberOf me
     * @constructor
     * @ignore
     */
me.TMXMapReader=Object.extend({init:function(){},readMap:function(b,c){
// if already loaded, do nothing
if(b.initialized!==!0){
// to automatically increment z index
var d=0,e=this;
// map information
b.version=c[a.TMX_TAG_VERSION],b.orientation=c[a.TMX_TAG_ORIENTATION],b.cols=+c[a.TMX_TAG_WIDTH],b.rows=+c[a.TMX_TAG_HEIGHT],b.tilewidth=+c[a.TMX_TAG_TILEWIDTH],b.tileheight=+c[a.TMX_TAG_TILEHEIGHT],b.nextobjectid=+c[a.TMX_TAG_NEXTOBJID]||void 0,"isometric"===b.orientation?(b.width=(b.cols+b.rows)*(b.tilewidth/2),b.height=(b.cols+b.rows)*(b.tileheight/2)):(b.width=b.cols*b.tilewidth,b.height=b.rows*b.tileheight),b.backgroundcolor=c[a.TMX_BACKGROUND_COLOR],b.z=d++,
// set the map properties (if any)
me.TMXUtils.applyTMXProperties(b,c),
// check if a user-defined background color is defined
b.backgroundcolor&&b.mapLayers.push(new me.ColorLayer("background_color",b.backgroundcolor,d++)),
// check if a background image is defined
b.background_image&&
// add a new image layer
b.mapLayers.push(new me.ImageLayer(0,0,{width:b.width,height:b.height,name:"background_image",image:b.background_image,z:d++})),
// initialize a default TMX renderer
null!==me.game.tmxRenderer&&me.game.tmxRenderer.canRender(b)||(me.game.tmxRenderer=this.getNewDefaultRenderer(b)),
// Tileset information
b.tilesets||(
// make sure we have a TilesetGroup Object
b.tilesets=new me.TMXTilesetGroup);
// parse all tileset objects
var f=c.tilesets||c.tileset;
// parse layer information
// native JSON format
if(Array.isArray(f)===!0?f.forEach(function(a){
// add the new tileset
b.tilesets.add(e.readTileset(a))}):b.tilesets.add(e.readTileset(f)),"undefined"!=typeof c.layers)c.layers.forEach(function(c){switch(c.type){case a.TMX_TAG_IMAGE_LAYER:b.mapLayers.push(e.readImageLayer(b,c,d++));break;case a.TMX_TAG_TILE_LAYER:b.mapLayers.push(e.readLayer(b,c,d++));break;
// get the object groups information
case a.TMX_TAG_OBJECTGROUP:b.objectGroups.push(e.readObjectGroup(b,c,d++))}});else if("undefined"!=typeof c.layer){
// converted XML format
// in converted format, these are not under the generic layers structure
// and each element can be either an array of object of just one object
var g=c.layer;
// in converted format, these are not under the generic layers structure
if(Array.isArray(g)===!0?g.forEach(function(a){
// get the object information
b.mapLayers.push(e.readLayer(b,a,a._draworder))}):
// get the object information
b.mapLayers.push(e.readLayer(b,g,g._draworder)),"undefined"!=typeof c[a.TMX_TAG_OBJECTGROUP]){var h=c[a.TMX_TAG_OBJECTGROUP];Array.isArray(h)===!0?h.forEach(function(a){b.objectGroups.push(e.readObjectGroup(b,a,a._draworder))}):
// get the object information
b.objectGroups.push(e.readObjectGroup(b,h,h._draworder))}
// in converted format, these are not under the generic layers structure
if("undefined"!=typeof c[a.TMX_TAG_IMAGE_LAYER]){var i=c[a.TMX_TAG_IMAGE_LAYER];Array.isArray(i)===!0?i.forEach(function(a){b.mapLayers.push(e.readImageLayer(b,a,a._draworder))}):b.mapLayers.push(e.readImageLayer(b,i,i._draworder))}}
// flag as loaded
b.initialized=!0}},/**
         * set a compatible renderer object
         * for the specified map
         * TODO : put this somewhere else
         * @ignore
         */
getNewDefaultRenderer:function(a){switch(a.orientation){case"orthogonal":return new me.TMXOrthogonalRenderer(a.cols,a.rows,a.tilewidth,a.tileheight);case"isometric":return new me.TMXIsometricRenderer(a.cols,a.rows,a.tilewidth,a.tileheight);case"hexagonal":return new me.TMXHexagonalRenderer(a.cols,a.rows,a.tilewidth,a.tileheight,a.hexsidelength);
// if none found, throw an exception
default:throw new me.Error(a.orientation+" type TMX Tile Map not supported!")}},/**
         * Set tiled layer Data
         * @ignore
         */
setLayerData:function(b,c,d,e){
// data
var f=Array.isArray(c)===!0?c:c.value;
// decode data based on encoding type
switch(d){case"json":
// do nothing as data can be directly reused
f=c;break;
// CSV encoding
case a.TMX_TAG_CSV:
// Base 64 encoding
case a.TMX_TAG_ATTR_BASE64:
// and then decode them
d===a.TMX_TAG_CSV?
// CSV decode
f=me.utils.decodeCSV(f,b.cols):(
// check if data is compressed
"string"==typeof e&&(f=me.utils.decompress(f,e)),
// Base 64 decode
f=me.utils.decodeBase64AsArray(f,4));break;default:throw new me.Error("TMX Tile Map "+d+" encoding not supported!")}
// set everything
for(var g=0,h=0;h<b.rows;h++)for(var i=0;i<b.cols;i++){
// get the value of the gid
var j=null==d?this.TMXParser.getIntAttribute(f[g++],a.TMX_TAG_GID):f[g++];
// fill the array
0!==j&&
// add a new tile to the layer
b.setTile(i,h,j)}},readLayer:function(b,c,d){var e=new me.TMXLayer(b.tilewidth,b.tileheight,b.orientation,b.tilesets,d);
// init the layer properly
e.initFromJSON(c),
// set a renderer
me.game.tmxRenderer.canRender(e)?
// use the default one
e.setRenderer(me.game.tmxRenderer):e.setRenderer(me.mapReader.getNewDefaultRenderer(e));
// detect encoding and compression
var f=Array.isArray(c[a.TMX_TAG_DATA])?c[a.TMX_TAG_ENCODING]:c[a.TMX_TAG_DATA][a.TMX_TAG_ENCODING],g=Array.isArray(c[a.TMX_TAG_DATA])?c[a.TMX_TAG_COMPRESSION]:c[a.TMX_TAG_DATA][a.TMX_TAG_COMPRESSION];
// parse the layer data
return this.setLayerData(e,c[a.TMX_TAG_DATA],f||"json",g),e},readImageLayer:function(b,c,d){
// extract layer information
var e=+c[a.TMX_TAG_X]||0,f=+c[a.TMX_TAG_Y]||0,g=c[a.TMX_TAG_NAME],h=+c[a.TMX_TAG_WIDTH],i=+c[a.TMX_TAG_HEIGHT],j="string"!=typeof c[a.TMX_TAG_IMAGE]?c[a.TMX_TAG_IMAGE].source:c[a.TMX_TAG_IMAGE],k=new me.ImageLayer(e,f,{width:h*b.tilewidth,height:i*b.tileheight,name:g,image:j,z:d}),l="undefined"!=typeof c[a.TMX_TAG_VISIBLE]?c[a.TMX_TAG_VISIBLE]:!0;
// make sure ratio is a vector (backward compatibility)
if(k.setOpacity(l===!0?(+c[a.TMX_TAG_OPACITY]||1).clamp(0,1):0),
// check if we have any additional properties
me.TMXUtils.applyTMXProperties(k,c),"number"==typeof k.ratio){var m=k.ratio;k.ratio=new me.Vector2d(m,m)}return k},readTileset:function(a){return new me.TMXTileset(a)},readObjectGroup:function(b,c,d){return new me.TMXObjectGroup(c[a.TMX_TAG_NAME],c,b.orientation,b.tilesets,d)}})}(me.TMXConstants),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * a level manager object <br>
     * once ressources loaded, the level director contains all references of defined levels<br>
     * There is no constructor function for me.levelDirector, this is a static object
     * @namespace me.levelDirector
     * @memberOf me
     */
me.levelDirector=function(){
// hold public stuff in our singletong
var a={},b={},c=[],d=0,e=function(a,b){
// disable auto-sort for the given container
b.autoSort=!1,
// load our map
me.game.currentLevel=a,
// change the viewport bounds
me.game.viewport.setBounds(0,0,Math.max(a.width,me.game.viewport.width),Math.max(a.height,me.game.viewport.height));for(var c=a.getLayers(),d=c.length;d--;)b.addChild(c[d]);for(var e=b,f=!1,g=a.getObjectGroups(),h=0;h<g.length;h++){var i=g[h];
// check if this is the collision shape group
f=i.name.toLowerCase().contains(me.TMXConstants.COLLISION_GROUP),me.game.mergeGroup===!1&&(e=new me.Container,e.name=i.name,e.z=i.z,e.setOpacity(i.opacity),e.autoSort=!1);
// iterate through the group and add all object into their
// corresponding target Container
for(var j=0;j<i.objects.length;j++){
// TMX object settings
var k=i.objects[j],l=me.pool.pull(k.name||"me.Entity",k.x,k.y,k);
// check if a me.Tile object is embedded
"object"!=typeof k.tile||l.renderable||(l.renderable=k.tile.getRenderable(k)),f&&!k.name&&(
// configure the body accordingly
l.body.collisionType=me.collision.types.WORLD_SHAPE),
// ignore if the pull function does not return a corresponding object
l&&(
// set the obj z order correspondingly to its parent container/group
l.z=i.z,
//apply group opacity value to the child objects if group are merged
me.game.mergeGroup===!0&&l.isRenderable===!0&&(l.setOpacity(l.getOpacity()*i.opacity),
// and to child renderables if any
l.renderable instanceof me.Renderable&&l.renderable.setOpacity(l.renderable.getOpacity()*i.opacity)),
// add the obj into the target container
e.addChild(l))}me.game.mergeGroup===!1&&(b.addChild(e),e.autoSort=!0)}
// sort everything (recursively)
b.sort(!0),
// re-enable auto-sort
b.autoSort=!0,
// center map on the viewport
a.moveToCenter(),
// translate the display if required
b.transform.translateV(a.pos),
// update the game world size to match the level size
b.resize(a.width,a.height),
// fire the callback if defined
me.game.onLevelLoaded&&me.game.onLevelLoaded.call(me.game.onLevelLoaded,a.name),
//publish the corresponding message
me.event.publish(me.event.LEVEL_LOADED,[a.name])};
// return our object
/*
         * PUBLIC STUFF
         */
/**
         * reset the level director
         * @ignore
         */
/**
         * add a level
         * @ignore
         */
/**
         * add a TMX level
         * @ignore
         */
/**
         * load a level into the game manager<br>
         * (will also create all level defined entities, etc..)
         * @name loadLevel
         * @memberOf me.levelDirector
         * @public
         * @function
         * @param {String} level level id
         * @example
         * // the game defined ressources
         * // to be preloaded by the loader
         * // TMX maps
         * var resources = [
         *     {name: "a4_level1",   type: "tmx",   src: "data/level/a4_level1.tmx"},
         *     {name: "a4_level2",   type: "tmx",   src: "data/level/a4_level2.tmx"},
         *     {name: "a4_level3",   type: "tmx",   src: "data/level/a4_level3.tmx"},
         *     // ...
         * ];
         *
         * // ...
         *
         * // load a level
         * me.levelDirector.loadLevel("a4_level1");
         */
/**
         * return the current level id<br>
         * @name getCurrentLevelId
         * @memberOf me.levelDirector
         * @public
         * @function
         * @return {String}
         */
/**
         * reload the current level<br>
         * @name reloadLevel
         * @memberOf me.levelDirector
         * @public
         * @function
         */
/**
         * load the next level<br>
         * @name nextLevel
         * @memberOf me.levelDirector
         * @public
         * @function
         */
/**
         * load the previous level<br>
         * @name previousLevel
         * @memberOf me.levelDirector
         * @public
         * @function
         */
/**
         * return the amount of level preloaded<br>
         * @name levelCount
         * @memberOf me.levelDirector
         * @public
         * @function
         */
return a.reset=function(){},a.addLevel=function(){throw new me.Error("no level loader defined")},a.addTMXLevel=function(a,d){
// just load the level with the XML stuff
// just load the level with the XML stuff
//console.log("loading "+ levelId);
// set the name of the level
// level index
// call the callback if defined
return null!=b[a]?!1:(b[a]=new me.TMXTileMap(a),b[a].name=a,c.push(a),d&&d(),!0)},a.loadLevel=function(f){
// throw an exception if not existing
if("undefined"==typeof b[f])throw new me.Error("level "+f+" not found");if(!(b[f]instanceof me.TMXTileMap))throw new me.Error("no level loader defined");
// check the status of the state mngr
var g=me.state.isRunning();
// stop the game loop to avoid
// some silly side effects
// reset the gameObject Manager (just in case!)
// clean the current (previous) level
// parse the give TMX file into the give level
// reset the GUID generator
// and pass the level id as parameter
// update current level index
// add the specified level to the game world
// resume the game loop if it was
// previously running
return g&&me.state.stop(),me.game.reset(),b[a.getCurrentLevelId()]&&b[a.getCurrentLevelId()].destroy(),me.mapReader.readMap(b[f],me.loader.getTMX(f)),me.utils.resetGUID(f,b[f].nextobjectid),d=c.indexOf(f),e(b[f],me.game.world),g&&me.state.restart.defer(this),!0},a.getCurrentLevelId=function(){return c[d]},a.reloadLevel=function(){
// reset the level to initial state
//levels[currentLevel].reset();
return a.loadLevel(a.getCurrentLevelId())},a.nextLevel=function(){
//go to the next level
//go to the next level
return d+1<c.length?a.loadLevel(c[d+1]):!1},a.previousLevel=function(){
// go to previous level
// go to previous level
return d-1>=0?a.loadLevel(c[d-1]):!1},a.levelCount=function(){return c.length},a}()}(),/**
 * @preserve Tween JS
 * https://github.com/sole/Tween.js
 */
/* jshint -W011 */
/* jshint -W013 */
/* jshint -W089 */
/* jshint -W093 */
/* jshint -W098 */
/* jshint -W108 */
/* jshint -W116 */
function(){/**
     * Javascript Tweening Engine<p>
     * Super simple, fast and easy to use tweening engine which incorporates optimised Robert Penner's equation<p>
     * <a href="https://github.com/sole/Tween.js">https://github.com/sole/Tween.js</a><p>
     * author sole / http://soledadpenades.com<br>
     * author mr.doob / http://mrdoob.com<br>
     * author Robert Eisele / http://www.xarg.org<br>
     * author Philippe / http://philippe.elsass.me<br>
     * author Robert Penner / http://www.robertpenner.com/easing_terms_of_use.html<br>
     * author Paul Lewis / http://www.aerotwist.com/<br>
     * author lechecacharro<br>
     * author Josh Faul / http://jocafa.com/
     * @class
     * @memberOf me
     * @constructor
     * @param {Object} object object on which to apply the tween
     * @example
     * // add a tween to change the object pos.y variable to 200 in 3 seconds
     * tween = new me.Tween(myObject.pos).to({y: 200}, 3000).onComplete(myFunc);
     * tween.easing(me.Tween.Easing.Bounce.Out);
     * tween.start();
     */
me.Tween=function(a){var b=a,c={},d={},e={},f=1e3,g=0,h=!1,i=!1,j=0,k=null,l=me.Tween.Easing.Linear.None,m=me.Tween.Interpolation.Linear,n=[],o=null,p=!1,q=null,r=null;
// Set all starting values present on the target object
for(var s in a)"object"!=typeof a&&(c[s]=parseFloat(a[s],10));/**
         * reset the tween object to default value
         * @ignore
         */
this.onResetEvent=function(a){b=a,c={},d={},e={},l=me.Tween.Easing.Linear.None,m=me.Tween.Interpolation.Linear,h=!1,i=!1,f=1e3,j=0,o=null,p=!1,q=null,r=null},/**
         * object properties to be updated and duration
         * @name me.Tween#to
         * @public
         * @function
         * @param {Object} properties hash of properties
         * @param {Number} [duration=1000] tween duration
         */
this.to=function(a,b){return void 0!==b&&(f=b),d=a,this},/**
         * start the tween
         * @name me.Tween#start
         * @public
         * @function
         */
this.start=function(a){p=!1,me.game.world.addChild(this),k=("undefined"==typeof a?me.timer.getTime():a)+j;for(var f in d){
// check if an Array was provided as property value
if(d[f]instanceof Array){if(0===d[f].length)continue;
// create a local copy of the Array with the start value at the front
d[f]=[b[f]].concat(d[f])}c[f]=b[f],c[f]instanceof Array==!1&&(c[f]*=1),e[f]=c[f]||0}return this},/**
         * stop the tween
         * @name me.Tween#stop
         * @public
         * @function
         */
this.stop=function(){
// ensure the tween has not been removed previously
return me.game.world.hasChild(this)&&me.game.world.removeChildNow(this),this},/**
         * delay the tween
         * @name me.Tween#delay
         * @public
         * @function
         * @param {Number} amount delay amount expressed in milliseconds
         */
this.delay=function(a){return j=a,this},/**
         * Calculate delta to resume the tween
         * @ignore
         */
me.event.subscribe(me.event.STATE_RESUME,function(a){k&&(k+=a)}),/**
         * Repeat the tween
         * @name me.Tween#repeat
         * @public
         * @function
         * @param {Number} times amount of times the tween should be repeated
         */
this.repeat=function(a){return g=a,this},/**
         * allows the tween to bounce back to their original value when finished
         * @name me.Tween#yoyo
         * @public
         * @function
         * @param {Boolean} yoyo
         */
this.yoyo=function(a){return h=a,this},/**
         * set the easing function
         * @name me.Tween#easing
         * @public
         * @function
         * @param {me.Tween#Easing} easing easing function
         */
this.easing=function(a){if("function"!=typeof a)throw new me.Tween.Error("invalid easing function for me.Tween.easing()");return l=a,this},/**
         * set the interpolation function
         * @name me.Tween#interpolation
         * @public
         * @function
         * @param {me.Tween#Interpolation} easing easing function
         */
this.interpolation=function(a){return m=a,this},/**
         * chain the tween
         * @name me.Tween#chain
         * @public
         * @function
         * @param {me.Tween} chainedTween Tween to be chained
         */
this.chain=function(){return n=arguments,this},/**
         * onStart callback
         * @name me.Tween#onStart
         * @public
         * @function
         * @param {Function} onStartCallback callback
         */
this.onStart=function(a){return o=a,this},/**
         * onUpdate callback
         * @name me.Tween#onUpdate
         * @public
         * @function
         * @param {Function} onUpdateCallback callback
         */
this.onUpdate=function(a){return q=a,this},/**
         * onComplete callback
         * @name me.Tween#onComplete
         * @public
         * @function
         * @param {Function} onCompleteCallback callback
         */
this.onComplete=function(a){return r=a,this},/** @ignore*/
this.update=function(a){
// the original Tween implementation expect
// a timestamp and not a time delta
var s,t=me.timer.getTime();if(k>t)return!0;p===!1&&(null!==o&&o.call(b),p=!0);var u=(t-k)/f;u=u>1?1:u;var v=l(u);for(s in d){var w=c[s]||0,x=d[s];x instanceof Array?b[s]=m(x,v):(
// Parses relative end values with start as base (e.g.: +10, -3)
"string"==typeof x&&(x=w+parseFloat(x,10)),
// protect against non numeric properties.
"number"==typeof x&&(b[s]=w+(x-w)*v))}if(null!==q&&q.call(b,v),1===u){if(g>0){isFinite(g)&&g--;
// reassign starting values, restart by making startTime = now
for(s in e){if("string"==typeof d[s]&&(e[s]=e[s]+parseFloat(d[s],10)),h){var y=e[s];e[s]=d[s],d[s]=y}c[s]=e[s]}return h&&(i=!i),k=t+j,!0}
// remove the tween from the object pool
me.game.world.removeChildNow(this),null!==r&&r.call(b);for(var z=0,A=n.length;A>z;z++)n[z].start(t);return!1}return!0}},/**
     * Easing Function :<br>
     * <p>
     * me.Tween.Easing.Linear.None<br>
     * me.Tween.Easing.Quadratic.In<br>
     * me.Tween.Easing.Quadratic.Out<br>
     * me.Tween.Easing.Quadratic.InOut<br>
     * me.Tween.Easing.Cubic.In<br>
     * me.Tween.Easing.Cubic.Out<br>
     * me.Tween.Easing.Cubic.InOut<br>
     * me.Tween.Easing.Quartic.In<br>
     * me.Tween.Easing.Quartic.Out<br>
     * me.Tween.Easing.Quartic.InOut<br>
     * me.Tween.Easing.Quintic.In<br>
     * me.Tween.Easing.Quintic.Out<br>
     * me.Tween.Easing.Quintic.InOut<br>
     * me.Tween.Easing.Sinusoidal.In<br>
     * me.Tween.Easing.Sinusoidal.Out<br>
     * me.Tween.Easing.Sinusoidal.InOut<br>
     * me.Tween.Easing.Exponential.In<br>
     * me.Tween.Easing.Exponential.Out<br>
     * me.Tween.Easing.Exponential.InOut<br>
     * me.Tween.Easing.Circular.In<br>
     * me.Tween.Easing.Circular.Out<br>
     * me.Tween.Easing.Circular.InOut<br>
     * me.Tween.Easing.Elastic.In<br>
     * me.Tween.Easing.Elastic.Out<br>
     * me.Tween.Easing.Elastic.InOut<br>
     * me.Tween.Easing.Back.In<br>
     * me.Tween.Easing.Back.Out<br>
     * me.Tween.Easing.Back.InOut<br>
     * me.Tween.Easing.Bounce.In<br>
     * me.Tween.Easing.Bounce.Out<br>
     * me.Tween.Easing.Bounce.InOut
     * </p>
     * @public
     * @constant
     * @type enum
     * @name me.Tween#Easing
     */
me.Tween.Easing={Linear:{/** @ignore */
None:function(a){return a}},Quadratic:{/** @ignore */
In:function(a){return a*a},/** @ignore */
Out:function(a){return a*(2-a)},/** @ignore */
InOut:function(a){return(a*=2)<1?.5*a*a:-.5*(--a*(a-2)-1)}},Cubic:{/** @ignore */
In:function(a){return a*a*a},/** @ignore */
Out:function(a){return--a*a*a+1},/** @ignore */
InOut:function(a){return(a*=2)<1?.5*a*a*a:.5*((a-=2)*a*a+2)}},Quartic:{/** @ignore */
In:function(a){return a*a*a*a},/** @ignore */
Out:function(a){return 1- --a*a*a*a},/** @ignore */
InOut:function(a){return(a*=2)<1?.5*a*a*a*a:-.5*((a-=2)*a*a*a-2)}},Quintic:{/** @ignore */
In:function(a){return a*a*a*a*a},/** @ignore */
Out:function(a){return--a*a*a*a*a+1},/** @ignore */
InOut:function(a){return(a*=2)<1?.5*a*a*a*a*a:.5*((a-=2)*a*a*a*a+2)}},Sinusoidal:{/** @ignore */
In:function(a){return 1-Math.cos(a*Math.PI/2)},/** @ignore */
Out:function(a){return Math.sin(a*Math.PI/2)},/** @ignore */
InOut:function(a){return.5*(1-Math.cos(Math.PI*a))}},Exponential:{/** @ignore */
In:function(a){return 0===a?0:Math.pow(1024,a-1)},/** @ignore */
Out:function(a){return 1===a?1:1-Math.pow(2,-10*a)},/** @ignore */
InOut:function(a){return 0===a?0:1===a?1:(a*=2)<1?.5*Math.pow(1024,a-1):.5*(-Math.pow(2,-10*(a-1))+2)}},Circular:{/** @ignore */
In:function(a){return 1-Math.sqrt(1-a*a)},/** @ignore */
Out:function(a){return Math.sqrt(1- --a*a)},/** @ignore */
InOut:function(a){return(a*=2)<1?-.5*(Math.sqrt(1-a*a)-1):.5*(Math.sqrt(1-(a-=2)*a)+1)}},Elastic:{/** @ignore */
In:function(a){var b,c=.1,d=.4;return 0===a?0:1===a?1:(!c||1>c?(c=1,b=d/4):b=d*Math.asin(1/c)/(2*Math.PI),-(c*Math.pow(2,10*(a-=1))*Math.sin((a-b)*(2*Math.PI)/d)))},/** @ignore */
Out:function(a){var b,c=.1,d=.4;return 0===a?0:1===a?1:(!c||1>c?(c=1,b=d/4):b=d*Math.asin(1/c)/(2*Math.PI),c*Math.pow(2,-10*a)*Math.sin((a-b)*(2*Math.PI)/d)+1)},/** @ignore */
InOut:function(a){var b,c=.1,d=.4;return 0===a?0:1===a?1:(!c||1>c?(c=1,b=d/4):b=d*Math.asin(1/c)/(2*Math.PI),(a*=2)<1?-.5*(c*Math.pow(2,10*(a-=1))*Math.sin((a-b)*(2*Math.PI)/d)):c*Math.pow(2,-10*(a-=1))*Math.sin((a-b)*(2*Math.PI)/d)*.5+1)}},Back:{/** @ignore */
In:function(a){var b=1.70158;return a*a*((b+1)*a-b)},/** @ignore */
Out:function(a){var b=1.70158;return--a*a*((b+1)*a+b)+1},/** @ignore */
InOut:function(a){var b=2.5949095;return(a*=2)<1?.5*(a*a*((b+1)*a-b)):.5*((a-=2)*a*((b+1)*a+b)+2)}},Bounce:{/** @ignore */
In:function(a){return 1-me.Tween.Easing.Bounce.Out(1-a)},/** @ignore */
Out:function(a){return 1/2.75>a?7.5625*a*a:2/2.75>a?7.5625*(a-=1.5/2.75)*a+.75:2.5/2.75>a?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375},/** @ignore */
InOut:function(a){return.5>a?.5*me.Tween.Easing.Bounce.In(2*a):.5*me.Tween.Easing.Bounce.Out(2*a-1)+.5}}},/* Interpolation Function :<br>
     * <p>
     * me.Tween.Interpolation.Linear<br>
     * me.Tween.Interpolation.Bezier<br>
     * me.Tween.Interpolation.CatmullRom<br>
     * </p>
     * @public
     * @constant
     * @type enum
     * @name me.Tween#Interpolation
     */
me.Tween.Interpolation={/** @ignore */
Linear:function(a,b){var c=a.length-1,d=c*b,e=Math.floor(d),f=me.Tween.Interpolation.Utils.Linear;return 0>b?f(a[0],a[1],d):b>1?f(a[c],a[c-1],c-d):f(a[e],a[e+1>c?c:e+1],d-e)},/** @ignore */
Bezier:function(a,b){var c,d=0,e=a.length-1,f=Math.pow,g=me.Tween.Interpolation.Utils.Bernstein;for(c=0;e>=c;c++)d+=f(1-b,e-c)*f(b,c)*a[c]*g(e,c);return d},/** @ignore */
CatmullRom:function(a,b){var c=a.length-1,d=c*b,e=Math.floor(d),f=me.Tween.Interpolation.Utils.CatmullRom;return a[0]===a[c]?(0>b&&(e=Math.floor(d=c*(1+b))),f(a[(e-1+c)%c],a[e],a[(e+1)%c],a[(e+2)%c],d-e)):0>b?a[0]-(f(a[0],a[0],a[1],a[1],-d)-a[0]):b>1?a[c]-(f(a[c],a[c],a[c-1],a[c-1],d-c)-a[c]):f(a[e?e-1:0],a[e],a[e+1>c?c:e+1],a[e+2>c?c:e+2],d-e)},Utils:{/** @ignore */
Linear:function(a,b,c){return(b-a)*c+a},/** @ignore */
Bernstein:function(a,b){var c=me.Tween.Interpolation.Utils.Factorial;return c(a)/c(b)/c(a-b)},/** @ignore */
Factorial:function(){var a=[1];return function(b){var c,d=1;if(a[b])return a[b];for(c=b;c>1;c--)d*=c;return a[b]=d}}(),/** @ignore */
CatmullRom:function(a,b,c,d,e){var f=.5*(c-a),g=.5*(d-b),h=e*e,i=e*h;return(2*b-2*c+f+g)*i+(-3*b+3*c-2*f-g)*h+f*e+b}}},/**
     * Base class for Tween exception handling.
     * @name Error
     * @class
     * @memberOf me.Tween
     * @constructor
     * @param {String} msg Error message.
     */
me.Tween.Error=me.Error.extend({init:function(a){me.Error.prototype.init.apply(this,[a]),this.name="me.Tween.Error"}})}(),/**
 * @preserve MinPubSub
 * a micro publish/subscribe messaging framework
 * @see https://github.com/daniellmb/MinPubSub
 * @author Daniel Lamb <daniellmb.com>
 *
 * Released under the MIT License
 */
function(){/**
     * There is no constructor function for me.event
     * @namespace me.event
     * @memberOf me
     */
me.event=function(){
// hold public stuff inside the singleton
var a={},b={};
// return our object
/*
         * PUBLIC
         */
/**
         * Channel Constant when the game is paused <br>
         * Data passed : none <br>
         * @public
         * @constant
         * @type String
         * @name me.event#STATE_PAUSE
         */
/**
         * Channel Constant for when the game is resumed <br>
         * Data passed : {Number} time in ms the game was paused
         * @public
         * @constant
         * @type String
         * @name me.event#STATE_RESUME
         */
/**
         * Channel Constant when the game is stopped <br>
         * Data passed : none <br>
         * @public
         * @constant
         * @type String
         * @name me.event#STATE_STOP
         */
/**
         * Channel Constant for when the game is restarted <br>
         * Data passed : {Number} time in ms the game was stopped
         * @public
         * @constant
         * @type String
         * @name me.event#STATE_RESTART
         */
/**
         * Channel Constant for when the game manager is initialized <br>
         * Data passed : none <br>
         * @public
         * @constant
         * @type String
         * @name me.event#GAME_INIT
         */
/**
         * Channel Constant for when a level is loaded <br>
         * Data passed : {String} Level Name
         * @public
         * @constant
         * @type String
         * @name me.event#LEVEL_LOADED
         */
/**
         * Channel Constant for when everything has loaded <br>
         * Data passed : none <br>
         * @public
         * @constant
         * @type String
         * @name me.event#LOADER_COMPLETE
         */
/**
         * Channel Constant for displaying a load progress indicator <br>
         * Data passed : {Number} [0 .. 1], {Resource} resource object<br>
         * @public
         * @constant
         * @type String
         * @name me.event#LOADER_PROGRESS
         */
/**
         * Channel Constant for pressing a binded key <br>
         * Data passed : {String} user-defined action, {Number} keyCode,
         * {Boolean} edge state <br>
         * Edge-state is for detecting "locked" key bindings. When a locked key
         * is pressed and held, the first event will have the third argument
         * set true. Subsequent events will continue firing with the third
         * argument set false.
         * @public
         * @constant
         * @type String
         * @name me.event#KEYDOWN
         * @example
         * me.input.bindKey(me.input.KEY.X, "jump", true); // Edge-triggered
         * me.input.bindKey(me.input.KEY.Z, "shoot"); // Level-triggered
         * me.event.subscribe(me.event.KEYDOWN, function (action, keyCode, edge) {
         *   // Checking bound keys
         *   if (action === "jump") {
         *       if (edge) {
         *           this.doJump();
         *       }
         *
         *       // Make character fall slower when holding the jump key
         *       this.vel.y = this.gravity;
         *   }
         * });
         */
/**
         * Channel Constant for releasing a binded key <br>
         * Data passed : {String} user-defined action, {Number} keyCode <br>
         * @public
         * @constant
         * @type String
         * @name me.event#KEYUP
         * @example
         * me.event.subscribe(me.event.KEYUP, function (action, keyCode) {
         *   // Checking unbound keys
         *   if (keyCode == me.input.KEY.ESC) {
         *       if (me.state.isPaused()) {
         *           me.state.resume();
         *       }
         *       else {
         *           me.state.pause();
         *       }
         *   }
         * });
         */
/**
         * Channel Constant for mousemove or dragmove events on the game viewport <br>
         * Data passed : {Object} the mousemove or dragmove event <br>
         * @public
         * @constant
         * @type String
         * @name me.event#MOUSEMOVE
         */
/**
         * Channel Constant for dragstart events on a Draggable entity <br>
         * Data passed:
         * {Object} the drag event <br>
         * {Object} the Draggable entity <br>
         * @public
         * @constant
         * @type String
         * @name me.event#DRAGSTART
         */
/**
         * Channel Constant for dragend events on a Draggable entity <br>
         * Data passed:
         * {Object} the drag event <br>
         * {Object} the Draggable entity <br>
         * @public
         * @constant
         * @type String
         * @name me.event#DRAGEND
         */
/**
         * Channel Constant for when the (browser) window is resized <br>
         * Data passed : {Event} Event object <br>
         * @public
         * @constant
         * @type String
         * @name me.event#WINDOW_ONRESIZE
         */
/**
         * Channel Constant for when the viewport is resized <br>
         * (this usually follows a WINDOW_ONRESIZE event, when using the `flex` scaling mode is used and after the viewport was updated).<br>
         * Data passed : {Number} viewport width <br>
         * Data passed : {Number} viewport height <br>
         * @public
         * @constant
         * @type String
         * @name me.event#VIEWPORT_ONRESIZE
         */
/**
         * Channel Constant for when the device is rotated <br>
         * Data passed : {Event} Event object <br>
         * @public
         * @constant
         * @type String
         * @name me.event#WINDOW_ONORIENTATION_CHANGE
         */
/**
         * Channel Constant for when the (browser) window is scrolled <br>
         * Data passed : {Event} Event object <br>
         * @public
         * @constant
         * @type String
         * @name me.event#WINDOW_ONSCROLL
         */
/**
         * Channel Constant for when the viewport position is updated <br>
         * Data passed : {me.Vector2d} viewport position vector <br>
         * @public
         * @constant
         * @type String
         * @name me.event#VIEWPORT_ONCHANGE
         */
/**
         * Publish some data on a channel
         * @name me.event#publish
         * @public
         * @function
         * @param {String} channel The channel to publish on
         * @param {Array} arguments The data to publish
         *
         * @example Publish stuff on '/some/channel'.
         * Anything subscribed will be called with a function
         * signature like: function (a,b,c){ ... }
         *
         * me.event.publish("/some/channel", ["a","b","c"]);
         *
         */
/**
         * Register a callback on a named channel.
         * @name me.event#subscribe
         * @public
         * @function
         * @param {String} channel The channel to subscribe to
         * @param {Function} callback The event handler, any time something is
         * published on a subscribed channel, the callback will be called
         * with the published array as ordered arguments
         * @return {handle} A handle which can be used to unsubscribe this
         * particular subscription
         * @example
         * me.event.subscribe("/some/channel", function (a, b, c){ doSomething(); });
         */
/**
         * Disconnect a subscribed function for a channel.
         * @name me.event#unsubscribe
         * @public
         * @function
         * @param {Array|String} handle The return value from a subscribe call or the
         * name of a channel as a String
         * @param {Function} [callback] The callback to be unsubscribed.
         * @example
         * var handle = me.event.subscribe("/some/channel", function (){});
         * me.event.unsubscribe(handle);
         *
         * // Or alternatively ...
         *
         * var callback = function (){};
         * me.event.subscribe("/some/channel", callback);
         * me.event.unsubscribe("/some/channel", callback);
         */
return a.STATE_PAUSE="me.state.onPause",a.STATE_RESUME="me.state.onResume",a.STATE_STOP="me.state.onStop",a.STATE_RESTART="me.state.onRestart",a.GAME_INIT="me.game.onInit",a.LEVEL_LOADED="me.game.onLevelLoaded",a.LOADER_COMPLETE="me.loader.onload",a.LOADER_PROGRESS="me.loader.onProgress",a.KEYDOWN="me.input.keydown",a.KEYUP="me.input.keyup",a.MOUSEMOVE="me.game.pointermove",a.DRAGSTART="me.game.dragstart",a.DRAGEND="me.game.dragend",a.WINDOW_ONRESIZE="window.onresize",a.VIEWPORT_ONRESIZE="viewport.onresize",a.WINDOW_ONORIENTATION_CHANGE="window.orientationchange",a.WINDOW_ONSCROLL="window.onscroll",a.VIEWPORT_ONCHANGE="viewport.onchange",a.publish=function(a,c){
//can change loop or reverse array if the order matters
for(var d=b[a],e=d?d.length:0;e--;)d[e].apply(window,c||[])},a.subscribe=function(a,c){return b[a]||(b[a]=[]),b[a].push(c),[a,c]},a.unsubscribe=function(a,c){var d=b[c?a:a[0]],e=d?d.length:0;for(c=c||a[1];e--;)d[e]===c&&d.splice(e,1)},a}()}(),/*!
 *  howler.js v2.0.0-beta
 *  howlerjs.com
 *
 *  (c) 2013-2015, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */
/* jshint -W003 */
/* jshint -W013 */
/* jshint -W015 */
/* jshint -W030 */
/* jshint -W031 */
/* jshint -W083 */
/* jshint -W084 */
/* jshint -W098 */
/* jshint -W108 */
/* jshint -W116 */
function(){"use strict";/**
   * Setup the audio context when available, or switch to HTML5 Audio mode.
   */
function a(){try{"undefined"!=typeof AudioContext?b=new AudioContext:"undefined"!=typeof webkitAudioContext?b=new webkitAudioContext:c=!1}catch(a){c=!1}if(!c)if("undefined"!=typeof Audio)try{new Audio}catch(a){d=!0}else d=!0}
// Setup our audio context.
var b=null,c=!0,d=!1;
// Create a master gain node.
if(a(),c){var e="undefined"==typeof b.createGain?b.createGainNode():b.createGain();e.gain.value=1,e.connect(b.destination)}/** Global Methods **/
/***************************************************************************/
/**
   * Create the global controller. All contained methods and properties apply
   * to all sounds that are currently playing or will be in the future.
   */
var f=function(){this.init()};f.prototype={/**
     * Initialize the global Howler object.
     * @return {Howler}
     */
init:function(){var a=this||g;
// Internal properties.
// Set to false to disable the auto iOS enabler.
// No audio is available on this system if this is set to true.
// This will be true if the Web Audio API is available.
// Expose the AudioContext when using Web Audio.
// Check for supported codecs.
return a._codecs={},a._howls=[],a._muted=!1,a._volume=1,a.iOSAutoEnable=!0,a.noAudio=d,a.usingWebAudio=c,a.ctx=b,d||a._setupCodecs(),a},/**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
volume:function(a){var b=this||g;if(a=parseFloat(a),"undefined"!=typeof a&&a>=0&&1>=a){b._volume=a,
// When using Web Audio, we just need to adjust the master gain.
c&&(e.gain.value=a);
// Loop through and change volume for all HTML5 audio nodes.
for(var d=0;d<b._howls.length;d++)if(!b._howls[d]._webAudio)
// Loop through all sounds and change the volumes.
for(var f=b._howls[d]._getSoundIds(),h=0;h<f.length;h++){var i=b._howls[d]._soundById(f[h]);i&&i._node&&(i._node.volume=i._volume*a)}return b}return b._volume},/**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
mute:function(a){var b=this||g;b._muted=a,
// With Web Audio, we just need to mute the master gain.
c&&(e.gain.value=a?0:b._volume);
// Loop through and mute all HTML5 Audio nodes.
for(var d=0;d<b._howls.length;d++)if(!b._howls[d]._webAudio)
// Loop through all sounds and mark the audio node as muted.
for(var f=b._howls[d]._getSoundIds(),h=0;h<f.length;h++){var i=b._howls[d]._soundById(f[h]);i&&i._node&&(i._node.muted=a?!0:i._muted)}return b},/**
     * Check for codec support of specific extension.
     * @param  {String} ext Audio file extention.
     * @return {Boolean}
     */
codecs:function(a){return(this||g)._codecs[a]},/**
     * Check for browser support for various codecs and cache the results.
     * @return {Howler}
     */
_setupCodecs:function(){var a=this||g,b=new Audio,c=b.canPlayType("audio/mpeg;").replace(/^no$/,"");return a._codecs={mp3:!(!c&&!b.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!c,opus:!!b.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!b.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!b.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!b.canPlayType("audio/aac;").replace(/^no$/,""),m4a:!!(b.canPlayType("audio/x-m4a;")||b.canPlayType("audio/m4a;")||b.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(b.canPlayType("audio/x-mp4;")||b.canPlayType("audio/mp4;")||b.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!b.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!b.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,"")},a},/**
     * iOS will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
_enableiOSAudio:function(){var a=this||g;
// Only run this on iOS if audio isn't already eanbled.
if(!b||!a._iOSEnabled&&/iPhone|iPad|iPod/i.test(navigator.userAgent)){a._iOSEnabled=!1;
// Call this method on touch start to create and play a buffer,
// then check if the audio actually played to determine if
// audio has now been unlocked on iOS.
var c=function(){
// Create an empty buffer.
var d=b.createBuffer(1,1,22050),e=b.createBufferSource();e.buffer=d,e.connect(b.destination),
// Play the empty buffer.
"undefined"==typeof e.start?e.noteOn(0):e.start(0),
// Setup a timeout to check that we are unlocked on the next event loop.
setTimeout(function(){(e.playbackState===e.PLAYING_STATE||e.playbackState===e.FINISHED_STATE)&&(
// Update the unlocked state and prevent this check from happening again.
a._iOSEnabled=!0,a.iOSAutoEnable=!1,
// Remove the touch start listener.
document.removeEventListener("touchstart",c,!1))},0)};
// Setup a touch start listener to attempt an unlock in.
return document.addEventListener("touchstart",c,!1),a}}};
// Setup the global audio controller.
var g=new f,h=function(a){var b=this;
// Throw an error if no source is provided.
// Throw an error if no source is provided.
return a.src&&0!==a.src.length?void b.init(a):void console.error("An array of source files must be passed with any new Howl.")};h.prototype={/**
     * Initialize a new Howl group object.
     * @param  {Object} o Passed in properties for this group.
     * @return {Howl}
     */
init:function(a){var d=this;
// Setup user-defined default properties.
// Setup all other default properties.
// Setup event listeners.
// Web Audio or HTML5 Audio?
// Automatically try to enable audio on iOS.
// Keep track of this Howl group in the global controller.
// Load the source file unless otherwise specified.
return d._autoplay=a.autoplay||!1,d._ext=a.ext||null,d._html5=a.html5||!1,d._muted=a.mute||!1,d._loop=a.loop||!1,d._pool=a.pool||5,d._preload="boolean"==typeof a.preload?a.preload:!0,d._rate=a.rate||1,d._sprite=a.sprite||{},d._src="string"!=typeof a.src?a.src:[a.src],d._volume=void 0!==a.volume?a.volume:1,d._duration=0,d._loaded=!1,d._sounds=[],d._endTimers={},d._onend=a.onend?[{fn:a.onend}]:[],d._onfaded=a.onfaded?[{fn:a.onfaded}]:[],d._onload=a.onload?[{fn:a.onload}]:[],d._onloaderror=a.onloaderror?[{fn:a.onloaderror}]:[],d._onpause=a.onpause?[{fn:a.onpause}]:[],d._onplay=a.onplay?[{fn:a.onplay}]:[],d._webAudio=c&&!d._html5,"undefined"!=typeof b&&b&&g.iOSAutoEnable&&g._enableiOSAudio(),g._howls.push(d),d._preload&&d.load(),d},/**
     * Load the audio file.
     * @return {Howler}
     */
load:function(){var a=this,b=null;
// If no audio is available, quit immediately.
if(d)return void a._emit("loaderror");
// Make sure our source is in an array.
"string"==typeof a._src&&(a._src=[a._src]);
// Loop through the sources and pick the first one that is compatible.
for(var c=0;c<a._src.length;c++){var e,f;
// Check if this extension is available.
if(a._ext&&a._ext[c]?
// If an extension was specified, use that instead.
e=a._ext[c]:(f=a._src[c],e=/^data:audio\/([^;,]+);/i.exec(f),e||(e=/\.([^.]+)$/.exec(f.split("?",1)[0])),e&&(e=e[1].toLowerCase())),g.codecs(e)){b=a._src[c];break}}
// Create a new sound object and add it to the pool.
// Load and decode the audio data for playback.
return b?(a._src=b,new i(a),a._webAudio&&k(a),a):void a._emit("loaderror")},/**
     * Play a sound or resume previous playback.
     * @param  {String/Number} sprite Sprite name for sprite playback or sound id to continue previous.
     * @return {Number}        Sound ID.
     */
play:function(a){var c=this,d=arguments,e=null;
// Determine if a sprite, sound id or nothing was passed
if("number"==typeof a)e=a,a=null;else if("undefined"==typeof a){
// Use the default sound sprite (plays the full audio length).
a="__default";for(var f=0,h=0;h<c._sounds.length;h++)c._sounds[h]._paused&&!c._sounds[h]._ended&&(f++,e=c._sounds[h]._id);1===f?a=null:e=null}
// Get the selected node, or get one from the pool.
var i=e?c._soundById(e):c._inactiveSound();
// If the sound doesn't exist, do nothing.
if(!i)return null;
// If we have no sprite and the sound hasn't loaded, we must wait
// for the sound to load to get our audio's duration.
if(
// Select the sprite definition.
e&&!a&&(a=i._sprite||"__default"),!c._loaded&&!c._sprite[a])return c.once("load",function(){c.play(c._soundById(i._id)?i._id:void 0)}),i._id;
// Don't play the sound if an id was passed and it is already playing.
if(e&&!i._paused)return i._id;
// Determine how long to play for and where to start playing.
var j=i._seek>0?i._seek:c._sprite[a][0]/1e3,k=(c._sprite[a][0]+c._sprite[a][1])/1e3-j,l=function(){
// Should this sound loop?
var d=!(!i._loop&&!c._sprite[a][2]);
// Fire the ended event.
c._emit("end",i._id),
// Restart the playback for HTML5 Audio loop.
!c._webAudio&&d&&c.stop(i._id).play(i._id),
// Restart this timer if on a Web Audio loop.
c._webAudio&&d&&(c._emit("play",i._id),i._seek=i._start||0,i._playStart=b.currentTime,c._endTimers[i._id]=setTimeout(l,1e3*(i._stop-i._start)/Math.abs(c._rate))),
// Mark the node as paused.
c._webAudio&&!d&&(i._paused=!0,i._ended=!0,i._seek=i._start||0,c._clearTimer(i._id),
// Clean up the buffer source.
i._node.bufferSource=null),
// When using a sprite, end the track.
c._webAudio||d||c.stop(i._id)};c._endTimers[i._id]=setTimeout(l,1e3*k/Math.abs(c._rate)),
// Update the parameters of the sound
i._paused=!1,i._ended=!1,i._sprite=a,i._seek=j,i._start=c._sprite[a][0]/1e3,i._stop=(c._sprite[a][0]+c._sprite[a][1])/1e3,i._loop=!(!i._loop&&!c._sprite[a][2]);
// Begin the actual playback.
var m=i._node;if(c._webAudio){
// Fire this when the sound is ready to play to begin Web Audio playback.
var n=function(){c._refreshBuffer(i);
// Setup the playback params.
var a=i._muted||c._muted?0:i._volume*g.volume();m.gain.setValueAtTime(a,b.currentTime),i._playStart=b.currentTime,
// Play the sound using the supported method.
"undefined"==typeof m.bufferSource.start?i._loop?m.bufferSource.noteGrainOn(0,j,86400):m.bufferSource.noteGrainOn(0,j,k):i._loop?m.bufferSource.start(0,j,86400):m.bufferSource.start(0,j,k),
// Start a new timer if none is present.
c._endTimers[i._id]||(c._endTimers[i._id]=setTimeout(l,1e3*k/Math.abs(c._rate))),d[1]||setTimeout(function(){c._emit("play",i._id)},0)};c._loaded?n():(
// Wait for the audio to load and then begin playback.
c.once("load",n),
// Cancel the end timer.
c._clearTimer(i._id))}else{
// Fire this when the sound is ready to play to begin HTML5 Audio playback.
var o=function(){m.currentTime=j,m.muted=i._muted||c._muted||g._muted||m.muted,m.volume=i._volume*g.volume(),m.playbackRate=c._rate,setTimeout(function(){m.play(),d[1]||c._emit("play",i._id)},0)};
// Play immediately if ready, or wait for the 'canplaythrough'e vent.
if(4===m.readyState||!m.readyState&&navigator.isCocoonJS)o();else{var p=function(){
// Setup the new end timer.
c._endTimers[i._id]=setTimeout(l,1e3*k/Math.abs(c._rate)),
// Begin playback.
o(),
// Clear this listener.
m.removeEventListener("canplaythrough",p,!1)};m.addEventListener("canplaythrough",p,!1),
// Cancel the end timer.
c._clearTimer(i._id)}}return i._id},/**
     * Pause playback and save current position.
     * @param  {Number} id The sound ID (empty to pause all in group).
     * @return {Howl}
     */
pause:function(a){var b=this;
// Wait for the sound to begin playing before pausing it.
if(!b._loaded)return b.once("play",function(){b.pause(a)}),b;for(var c=b._getSoundIds(a),d=0;d<c.length;d++){
// Clear the end timer.
b._clearTimer(c[d]);
// Get the sound.
var e=b._soundById(c[d]);if(e&&!e._paused){if(
// Reset the seek position.
e._seek=b.seek(c[d]),e._paused=!0,b._webAudio){
// make sure the sound has been created
if(!e._node.bufferSource)return b;"undefined"==typeof e._node.bufferSource.stop?e._node.bufferSource.noteOff(0):e._node.bufferSource.stop(0),
// Clean up the buffer source.
e._node.bufferSource=null}else isNaN(e._node.duration)||e._node.pause();
// Fire the pause event, unless `true` is passed as the 2nd argument.
arguments[1]||b._emit("pause",e._id)}}return b},/**
     * Stop playback and reset to start.
     * @param  {Number} id The sound ID (empty to stop all in group).
     * @return {Howl}
     */
stop:function(a){var b=this;
// Wait for the sound to begin playing before stopping it.
if(!b._loaded)return"undefined"!=typeof b._sounds[0]._sprite&&b.once("play",function(){b.stop(a)}),b;for(var c=b._getSoundIds(a),d=0;d<c.length;d++){
// Clear the end timer.
b._clearTimer(c[d]);
// Get the sound.
var e=b._soundById(c[d]);if(e&&!e._paused)if(
// Reset the seek position.
e._seek=e._start||0,e._paused=!0,e._ended=!0,b._webAudio&&e._node){
// make sure the sound has been created
if(!e._node.bufferSource)return b;"undefined"==typeof e._node.bufferSource.stop?e._node.bufferSource.noteOff(0):e._node.bufferSource.stop(0),
// Clean up the buffer source.
e._node.bufferSource=null}else e._node&&!isNaN(e._node.duration)&&(e._node.pause(),e._node.currentTime=e._start||0)}return b},/**
     * Mute/unmute a single sound or all sounds in this Howl group.
     * @param  {Boolean} muted Set to true to mute and false to unmute.
     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).
     * @return {Howl}
     */
mute:function(a,c){var d=this;
// Wait for the sound to begin playing before muting it.
if(!d._loaded)return d.once("play",function(){d.mute(a,c)}),d;
// If applying mute/unmute to all sounds, update the group's value.
if("undefined"==typeof c){if("boolean"!=typeof a)return d._muted;d._muted=a}for(var e=d._getSoundIds(c),f=0;f<e.length;f++){
// Get the sound.
var h=d._soundById(e[f]);h&&(h._muted=a,d._webAudio&&h._node?h._node.gain.setValueAtTime(a?0:h._volume*g.volume(),b.currentTime):h._node&&(h._node.muted=g._muted?!0:a))}return d},/**
     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.
     *   volume() -> Returns the group's volume value.
     *   volume(id) -> Returns the sound id's current volume.
     *   volume(vol) -> Sets the volume of all sounds in this Howl group.
     *   volume(vol, id) -> Sets the volume of passed sound id.
     * @return {Howl/Number} Returns self or current volume.
     */
volume:function(){var a,c,d=this,e=arguments;
// Determine the values based on arguments.
if(0===e.length)
// Return the value of the groups' volume.
return d._volume;if(1===e.length){
// First check if this is an ID, and if not, assume it is a new volume.
var f=d._getSoundIds(),h=f.indexOf(e[0]);h>=0?c=parseInt(e[0],10):a=parseFloat(e[0])}else 2===e.length&&(a=parseFloat(e[0]),c=parseInt(e[1],10));
// Update the volume or return the current volume.
var i;if(!("undefined"!=typeof a&&a>=0&&1>=a))return i=c?d._soundById(c):d._sounds[0],i?i._volume:0;
// Wait for the sound to begin playing before changing the volume.
if(!d._loaded)return d.once("play",function(){d.volume.apply(d,e)}),d;
// Set the group volume.
"undefined"==typeof c&&(d._volume=a),
// Update one or all volumes.
c=d._getSoundIds(c);for(var j=0;j<c.length;j++)i=d._soundById(c[j]),i&&(i._volume=a,d._webAudio&&i._node?i._node.gain.setValueAtTime(a*g.volume(),b.currentTime):i._node&&(i._node.volume=a*g.volume()));return d},/**
     * Fade a currently playing sound between two volumes (if no id is passsed, all sounds will fade).
     * @param  {Number} from The value to fade from (0.0 to 1.0).
     * @param  {Number} to   The volume to fade to (0.0 to 1.0).
     * @param  {Number} len  Time in milliseconds to fade.
     * @param  {Number} id   The sound id (omit to fade all sounds).
     * @return {Howl}
     */
fade:function(a,c,d,e){var f=this;
// Wait for the sound to play before fading.
if(!f._loaded)return f.once("play",function(){f.fade(a,c,d,e)}),f;
// Set the volume to the start position.
f.volume(a,e);for(var g=f._getSoundIds(e),h=0;h<g.length;h++){
// Get the sound.
var i=f._soundById(g[h]);
// Create a linear fade or fall back to timeouts with HTML5 Audio.
if(i)if(f._webAudio){var j=b.currentTime,k=j+d/1e3;i._volume=a,i._node.gain.setValueAtTime(a,j),i._node.gain.linearRampToValueAtTime(c,k),
// Fire the event when complete.
setTimeout(function(a,d){setTimeout(function(){d._volume=c,f._emit("faded",a)},k-b.currentTime>0?Math.ceil(1e3*(k-b.currentTime)):0)}.bind(f,g[h],i),d)}else{var l=Math.abs(a-c),m=a>c?"out":"in",n=l/.01,o=d/n;!function(){var b=a,d=setInterval(function(a){b+="in"===m?.01:-.01,b=Math.max(0,b),b=Math.min(1,b),b=Math.round(100*b)/100,f.volume(b,a),b===c&&(clearInterval(d),f._emit("faded",a))}.bind(f,g[h]),o)}()}}return f},/**
     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.
     *   loop() -> Returns the group's loop value.
     *   loop(id) -> Returns the sound id's loop value.
     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.
     *   loop(loop, id) -> Sets the loop value of passed sound id.
     * @return {Howl/Boolean} Returns self or current loop value.
     */
loop:function(){var a,b,c,d=this,e=arguments;
// Determine the values for loop and id.
if(0===e.length)
// Return the grou's loop value.
return d._loop;if(1===e.length){if("boolean"!=typeof e[0])
// Return this sound's loop value.
return c=d._soundById(parseInt(e[0],10)),c?c._loop:!1;a=e[0],d._loop=a}else 2===e.length&&(a=e[0],b=parseInt(e[1],10));for(var f=d._getSoundIds(b),g=0;g<f.length;g++)c=d._soundById(f[g]),c&&(c._loop=a,d._webAudio&&c._node&&(c._node.bufferSource.loop=a));return d},/**
     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.
     *   seek() -> Returns the first sound node's current seek position.
     *   seek(id) -> Returns the sound id's current seek position.
     *   seek(seek) -> Sets the seek position of the first sound node.
     *   seek(seek, id) -> Sets the seek position of passed sound id.
     * @return {Howl/Number} Returns self or the current seek position.
     */
seek:function(){var a,c,d=this,e=arguments;
// Determine the values based on arguments.
if(0===e.length)
// We will simply return the current position of the first node.
c=d._sounds[0]._id;else if(1===e.length){
// First check if this is an ID, and if not, assume it is a new seek position.
var f=d._getSoundIds(),g=f.indexOf(e[0]);g>=0?c=parseInt(e[0],10):(c=d._sounds[0]._id,a=parseFloat(e[0]))}else 2===e.length&&(a=parseFloat(e[0]),c=parseInt(e[1],10));
// If there is no ID, bail out.
if("undefined"==typeof c)return d;
// Wait for the sound to load before seeking it.
if(!d._loaded)return d.once("load",function(){d.seek.apply(d,e)}),d;
// Get the sound.
var h=d._soundById(c);if(h){if(!(a>=0))return d._webAudio?h._seek+d.playing(c)?b.currentTime-h._playStart:0:h._node.currentTime;
// Pause the sound and update position for restarting playback.
var i=d.playing(c);i&&d.pause(c,!0),
// Move the position of the track and cancel timer.
h._seek=a,d._clearTimer(c),
// Restart the playback if the sound was playing.
i&&d.play(c,!0)}return d},/**
     * Check if a specific sound is currently playing or not.
     * @param  {Number} id The sound id to check. If none is passed, first sound is used.
     * @return {Boolean}    True if playing and false if not.
     */
playing:function(a){var b=this,c=b._soundById(a)||b._sounds[0];return c?!c._paused:!1},/**
     * Get the duration of this sound.
     * @return {Number} Audio duration.
     */
duration:function(){return this._duration},/**
     * Unload and destroy the current Howl object.
     * This will immediately stop all sound instances attached to this group.
     */
unload:function(){for(var a=this,b=a._sounds,c=0;c<b.length;c++){
// Stop the sound if it is currently playing.
b[c]._paused||(a.stop(b[c]._id),a._emit("end",b[c]._id)),
// Remove the source or disconnect.
a._webAudio||(
// Set the source to an empty string to stop any downloading.
b[c]._node.src="",
// Remove any event listeners.
b[c]._node.removeEventListener("error",b[c]._errorFn,!1),b[c]._node.removeEventListener("canplaythrough",b[c]._loadFn,!1)),
// Empty out all of the nodes.
delete b[c]._node,
// Make sure all timers are cleared out.
a._clearTimer(b[c]._id);
// Remove the references in the global Howler object.
var d=g._howls.indexOf(a);d>=0&&g._howls.splice(d,1)}
// Delete this sound from the cache.
// Clear out `self`.
return j&&delete j[a._src],a=null,null},/**
     * Listen to a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
on:function(a,b,c){var d=this,e=d["_on"+a];return"function"==typeof b&&e.push({id:c,fn:b}),d},/**
     * Remove a custom event.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to remove. Leave empty to remove all.
     * @param  {Number}   id    (optional) Only remove events for this sound.
     * @return {Howl}
     */
off:function(a,b,c){var d=this,e=d["_on"+a];if(b){
// Loop through event store and remove the passed function.
for(var f=0;f<e.length;f++)if(b===e[f].fn&&c===e[f].id){e.splice(f,1);break}}else
// Clear out all events of this type.
e=[];return d},/**
     * Listen to a custom event and remove it once fired.
     * @param  {String}   event Event name.
     * @param  {Function} fn    Listener to call.
     * @param  {Number}   id    (optional) Only listen to events for this sound.
     * @return {Howl}
     */
once:function(a,b,c){var d=this,e=function(){
// Call the passed function.
b.apply(d,arguments),
// Clear the listener.
d.off(a,e,c)};
// Setup the event listener.
return d.on(a,e,c),d},/**
     * Emit all events of a specific type and pass the sound id.
     * @param  {String} event Event name.
     * @param  {Number} id    Sound ID.
     * @param  {Number} msg   Message to go with event.
     * @return {Howl}
     */
_emit:function(a,b,c){
// Loop through event store and fire all functions.
for(var d=this,e=d["_on"+a],f=0;f<e.length;f++)e[f].id&&e[f].id!==b||setTimeout(function(a){a.call(this,b,c)}.bind(d,e[f].fn),0);return d},/**
     * Clear the end timer for a sound playback.
     * @param  {Number} id The sound ID.
     * @return {Howl}
     */
_clearTimer:function(a){var b=this;return b._endTimers[a]&&(clearTimeout(b._endTimers[a]),delete b._endTimers[a]),b},/**
     * Return the sound identified by this ID, or return null.
     * @param  {Number} id Sound ID
     * @return {Object}    Sound object or null.
     */
_soundById:function(a){
// Loop through all sounds and find the one with this ID.
for(var b=this,c=0;c<b._sounds.length;c++)if(a===b._sounds[c]._id)return b._sounds[c];return null},/**
     * Return an inactive sound from the pool or create a new one.
     * @return {Sound} Sound playback object.
     */
_inactiveSound:function(){var a=this;a._drain();
// Find the first inactive node to recycle.
for(var b=0;b<a._sounds.length;b++)if(a._sounds[b]._ended)return a._sounds[b].reset();
// If no inactive node was found, create a new one.
return new i(a)},/**
     * Drain excess inactive sounds from the pool.
     */
_drain:function(){var a=this,b=a._pool,c=0,d=0;
// If there are less sounds than the max pool size, we are done.
if(!(a._sounds.length<b)){
// Count the number of inactive sounds.
for(d=0;d<a._sounds.length;d++)a._sounds[d]._ended&&c++;
// Remove excess inactive sounds, going in reverse order.
for(d=a._sounds.length-1;d>=0;d--){if(b>=c)return;a._sounds[d]._ended&&(
// Disconnect the audio source when using Web Audio.
a._webAudio&&a._sounds[d]._node&&a._sounds[d]._node.disconnect(0),
// Remove sounds until we have the pool size.
a._sounds.splice(d,1),c--)}}},/**
     * Get all ID's from the sounds pool.
     * @param  {Number} id Only return one ID if one is passed.
     * @return {Array}    Array of IDs.
     */
_getSoundIds:function(a){var b=this;if("undefined"==typeof a){for(var c=[],d=0;d<b._sounds.length;d++)c.push(b._sounds[d]._id);return c}return[a]},/**
     * Load the sound back into the buffer source.
     * @param  {Sound} sound The sound object to work with.
     * @return {Howl}
     */
_refreshBuffer:function(a){var c=this;
// Setup the buffer source for playback.
// Connect to the correct node.
// Setup looping and playback rate.
return a._node.bufferSource=b.createBufferSource(),a._node.bufferSource.buffer=j[c._src],a._panner?a._node.bufferSource.connect(a._panner):a._node.bufferSource.connect(a._node),a._node.bufferSource.loop=a._loop,a._loop&&(a._node.bufferSource.loopStart=a._start||0,a._node.bufferSource.loopEnd=a._stop),a._node.bufferSource.playbackRate.value=c._rate,c}};/** Single Sound Methods **/
/***************************************************************************/
/**
   * Setup the sound object, which each node attached to a Howl group is contained in.
   * @param {Object} howl The Howl parent group.
   */
var i=function(a){this._parent=a,this.init()};/** Helper Methods **/
/***************************************************************************/
// Only define these methods when using Web Audio.
if(i.prototype={/**
     * Initialize a new Sound object.
     * @return {Sound}
     */
init:function(){var a=this,b=a._parent;
// Setup the default parameters.
// Generate a unique ID for this sound.
// Add itself to the parent's pool.
// Create the new node.
return a._muted=b._muted,a._loop=b._loop,a._volume=b._volume,a._muted=b._muted,a._seek=0,a._paused=!0,a._ended=!0,a._id=Math.round(Date.now()*Math.random()),b._sounds.push(a),a.create(),a},/**
     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.
     * @return {Sound}
     */
create:function(){var a=this,c=a._parent,d=g._muted||a._muted||a._parent._muted?0:a._volume*g.volume();
// Create the gain node for controlling volume (the source will connect to this).
// Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).
// Listen for 'canplaythrough' event to let us know the sound is ready.
// Setup the new audio node.
// Begin loading the source.
return c._webAudio?(a._node="undefined"==typeof b.createGain?b.createGainNode():b.createGain(),a._node.gain.setValueAtTime(d,b.currentTime),a._node.paused=!0,a._node.connect(e)):(a._node=new Audio,a._errorFn=a._errorListener.bind(a),a._node.addEventListener("error",a._errorFn,!1),a._loadFn=a._loadListener.bind(a),a._node.addEventListener("canplaythrough",a._loadFn,!1),a._node.src=c._src,a._node.preload="auto",a._node.volume=d,a._node.load()),a},/**
     * Reset the parameters of this sound to the original state (for recycle).
     * @return {Sound}
     */
reset:function(){var a=this,b=a._parent;
// Reset all of the parameters of this sound.
// Generate a new ID so that it isn't confused with the previous sound.
return a._muted=b._muted,a._loop=b._loop,a._volume=b._volume,a._muted=b._muted,a._seek=0,a._paused=!0,a._ended=!0,a._sprite=null,a._id=Math.round(Date.now()*Math.random()),a},/**
     * HTML5 Audio error listener callback.
     */
_errorListener:function(){var a=this;a._node.error&&4===a._node.error.code&&(g.noAudio=!0),
// Fire an error event and pass back the code.
a._parent._emit("loaderror",a._id,a._node.error?a._node.error.code:0),
// Clear the event listener.
a._node.removeEventListener("error",a._errorListener,!1)},/**
     * HTML5 Audio canplaythrough listener callback.
     */
_loadListener:function(){var a=this,b=a._parent;
// Round up the duration to account for the lower precision in HTML5 Audio.
b._duration=Math.ceil(10*a._node.duration)/10,
// Setup a sprite if none is defined.
0===Object.keys(b._sprite).length&&(b._sprite={__default:[0,1e3*b._duration]}),b._loaded||(b._loaded=!0,b._emit("load")),b._autoplay&&b.play(),
// Clear the event listener.
a._node.removeEventListener("canplaythrough",a._loadFn,!1)}},c)var j={},k=function(a){var b=a._src;
// Check if the buffer has already been cached and use it instead.
if(j[b])
// Set the duration from the cache.
// Load the sound into this Howl.
return a._duration=j[b].duration,void n(a);if(/^data:[^;]+;base64,/.test(b)){
// Setup polyfill for window.atob to support IE9.
// Modified from: https://github.com/davidchambers/Base64.js
window.atob=window.atob||function(a){for(var b,c,d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",e=String(a).replace(/=+$/,""),f=0,g=0,h="";c=e.charAt(g++);~c&&(b=f%4?64*b+c:c,f++%4)?h+=String.fromCharCode(255&b>>(-2*f&6)):0)c=d.indexOf(c);return h};for(var c=atob(b.split(",")[1]),d=new Uint8Array(c.length),e=0;e<c.length;++e)d[e]=c.charCodeAt(e);m(d.buffer,a)}else{
// Load the buffer from the URL.
var f=new XMLHttpRequest;f.open("GET",b,!0),f.responseType="arraybuffer",f.onload=function(){m(f.response,a)},f.onerror=function(){
// If there is an error, switch to HTML5 Audio.
a._webAudio&&(a._html5=!0,a._webAudio=!1,a._sounds=[],delete j[b],a.load())},l(f)}},l=function(a){try{a.send()}catch(b){a.onerror()}},m=function(a,c){
// Decode the buffer into an audio source.
b.decodeAudioData(a,function(a){a&&(j[c._src]=a,n(c,a))},function(){c._emit("loaderror")})},n=function(a,b){
// Set the duration.
b&&!a._duration&&(a._duration=b.duration),
// Setup a sprite if none is defined.
0===Object.keys(a._sprite).length&&(a._sprite={__default:[0,1e3*a._duration]}),
// Fire the loaded event.
a._loaded||(a._loaded=!0,a._emit("load")),
// Begin playback if specified.
a._autoplay&&a.play()};
// Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
"function"==typeof define&&define.amd&&define("howler",function(){return{Howler:g,Howl:h}}),
// Add support for CommonJS libraries such as browserify.
"undefined"!=typeof exports&&(exports.Howler=g,exports.Howl=h),
// Define globally in case AMD is not available or unused.
"undefined"!=typeof window&&(window.HowlerGlobal=f,window.Howler=g,window.Howl=h,window.Sound=i)}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
function(){/**
     * There is no constructor function for me.plugin
     * @namespace me.plugin
     * @memberOf me
     */
me.plugin=function(){
// hold public stuff inside the singleton
var a={};
// return our singleton
/*--------------
            PUBLIC
          --------------*/
/**
        * a base Object for plugin <br>
        * plugin must be installed using the register function
        * @see me.plugin
        * @class
        * @extends Object
        * @name plugin.Base
        * @memberOf me
        * @constructor
        */
/** @scope me.plugin.Base.prototype */
/**
         * patch a melonJS function
         * @name patch
         * @memberOf me.plugin
         * @public
         * @function
         * @param {Object} proto target object
         * @param {String} name target function
         * @param {Function} fn replacement function
         * @example
         * // redefine the me.game.update function with a new one
         * me.plugin.patch(me.game, "update", function () {
         *   // display something in the console
         *   console.log("duh");
         *   // call the original me.game.update function
         *   this._patched();
         * });
         */
/**
         * Register a plugin.
         * @name register
         * @memberOf me.plugin
         * @see me.plugin.Base
         * @public
         * @function
         * @param {me.plugin.Base} plugin Plugin to instiantiate and register
         * @param {String} name
         * @param {} [arguments...] all extra parameters will be passed to the plugin constructor
         * @example
         * // register a new plugin
         * me.plugin.register(TestPlugin, "testPlugin");
         * // the plugin then also become available
         * // under then me.plugin namespace
         * me.plugin.testPlugin.myfunction ();
         */
return a.Base=Object.extend({/** @ignore */
init:function(){/**
                 * define the minimum required version of melonJS<br>
                 * this can be overridden by the plugin
                 * @public
                 * @type String
                 * @default "2.1.3"
                 * @name me.plugin.Base#version
                 */
this.version="2.1.3"}}),a.patch=function(a,b,c){
// reuse the logic behind Object.extend
if(
// use the object prototype if possible
"undefined"!=typeof a.prototype&&(a=a.prototype),"function"==typeof a[b]){
// save the original function
var d=a[b];
// override the function with the new one
Object.defineProperty(a,b,{configurable:!0,value:function(a,b){return function(){this._patched=d;var a=b.apply(this,arguments);return this._patched=null,a}}(b,c)})}else console.error(b+" is not an existing function")},a.register=function(a,b){
// ensure me.plugin[name] is not already "used"
me.plugin[b]&&console.error("plugin "+b+" already registered");
// get extra arguments
var c=[];
// inheritance check
if(arguments.length>2&&(
// store extra arguments if any
c=Array.prototype.slice.call(arguments,1)),
// try to instantiate the plugin
c[0]=a,me.plugin[b]=new(a.bind.apply(a,c)),!(me.plugin[b]&&me.plugin[b]instanceof me.plugin.Base))throw new me.Error("Plugin should extend the me.plugin.Base Class !");
// compatibility testing
if(me.sys.checkVersion(me.plugin[b].version)>0)throw new me.Error("Plugin version mismatch, expected: "+me.plugin[b].version+", got: "+me.version)},a}()}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * Used to make a game entity draggable
 * @class
 * @extends me.Entity
 * @memberOf me
 * @constructor
 * @param {Number} x the x coordinates of the entity object
 * @param {Number} y the y coordinates of the entity object
 * @param {Object} settings Entity properties (see {@link me.Entity})
 */
me.DraggableEntity=function(a,b,c,d){"use strict";/** @scope me.DraggableEntity.prototype */
return a.extend({/**
         * Constructor
         * @name init
         * @memberOf me.DraggableEntity
         * @function
         * @param {Number} x the x postion of the entity
         * @param {Number} y the y postion of the entity
         * @param {Object} settings the additional entity settings
         */
init:function(c,e,f){a.prototype.init.apply(this,[c,e,f]),this.dragging=!1,this.dragId=null,this.grabOffset=new d(0,0),this.onPointerEvent=b.registerPointerEvent,this.removePointerEvent=b.releasePointerEvent,this.initEvents()},/**
         * Initializes the events the modules needs to listen to
         * It translates the pointer events to me.events
         * in order to make them pass through the system and to make
         * this module testable. Then we subscribe this module to the
         * transformed events.
         * @name initEvents
         * @memberOf me.DraggableEntity
         * @function
         */
initEvents:function(){var a=this;this.mouseDown=function(a){this.translatePointerEvent(a,c.DRAGSTART)},this.mouseUp=function(a){this.translatePointerEvent(a,c.DRAGEND)},this.onPointerEvent("pointerdown",this,this.mouseDown.bind(this)),this.onPointerEvent("pointerup",this,this.mouseUp.bind(this)),c.subscribe(c.MOUSEMOVE,this.dragMove.bind(this)),c.subscribe(c.DRAGSTART,function(b,c){c===a&&a.dragStart(b)}),c.subscribe(c.DRAGEND,function(b,c){c===a&&a.dragEnd(b)})},/**
         * Translates a pointer event to a me.event
         * @name translatePointerEvent
         * @memberOf me.DraggableEntity
         * @function
         * @param {Object} e the pointer event you want to translate
         * @param {String} translation the me.event you want to translate
         * the event to
         */
translatePointerEvent:function(a,b){c.publish(b,[a,this])},/**
         * Gets called when the user starts dragging the entity
         * @name dragStart
         * @memberOf me.DraggableEntity
         * @function
         * @param {Object} x the pointer event
         */
dragStart:function(a){return this.dragging===!1?(this.dragging=!0,this.dragId=a.pointerId,this.grabOffset.set(a.gameX,a.gameY),this.grabOffset.sub(this.pos),!1):void 0},/**
         * Gets called when the user drags this entity around
         * @name dragMove
         * @memberOf me.DraggableEntity
         * @function
         * @param {Object} x the pointer event
         */
dragMove:function(a){this.dragging===!0&&this.dragId===a.pointerId&&(this.pos.set(a.gameX,a.gameY),this.pos.sub(this.grabOffset))},/**
         * Gets called when the user stops dragging the entity
         * @name dragEnd
         * @memberOf me.DraggableEntity
         * @function
         * @param {Object} x the pointer event
         */
dragEnd:function(){return this.dragging===!0?(this.pointerId=void 0,this.dragging=!1,!1):void 0},/**
         * Destructor
         * @name destroy
         * @memberOf me.DraggableEntity
         * @function
         */
destroy:function(){c.unsubscribe(c.MOUSEMOVE,this.dragMove),c.unsubscribe(c.DRAGSTART,this.dragStart),c.unsubscribe(c.DRAGEND,this.dragEnd),this.removePointerEvent("pointerdown",this),this.removePointerEvent("pointerup",this)}})}(me.Entity,me.input,me.event,me.Vector2d),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 */
/**
 * Used to make a game entity a droptarget
 * @class
 * @extends me.Entity
 * @memberOf me
 * @constructor
 * @param {Number} x the x coordinates of the entity object
 * @param {Number} y the y coordinates of the entity object
 * @param {Object} settings Entity properties (see {@link me.Entity})
 */
me.DroptargetEntity=function(a,b){"use strict";/** @scope me.DroptargetEntity.prototype */
return a.extend({/**
         * Constructor
         * @name init
         * @memberOf me.DroptargetEntity
         * @function
         * @param {Number} x the x postion of the entity
         * @param {Number} y the y postion of the entity
         * @param {Object} settings the additional entity settings
         */
init:function(c,d,e){/**
             * constant for the overlaps method
             * @public
             * @constant
             * @type String
             * @name CHECKMETHOD_OVERLAP
             * @memberOf me.DroptargetEntity
             */
this.CHECKMETHOD_OVERLAP="overlaps",/**
             * constant for the contains method
             * @public
             * @constant
             * @type String
             * @name CHECKMETHOD_CONTAINS
             * @memberOf me.DroptargetEntity
             */
this.CHECKMETHOD_CONTAINS="contains",/**
             * the checkmethod we want to use
             * @public
             * @constant
             * @type String
             * @name checkMethod
             * @memberOf me.DroptargetEntity
             */
this.checkMethod=null,a.prototype.init.apply(this,[c,d,e]),b.subscribe(b.DRAGEND,this.checkOnMe.bind(this)),this.checkMethod=this[this.CHECKMETHOD_OVERLAP]},/**
         * Sets the collision method which is going to be used to check a valid drop
         * @name setCheckMethod
         * @memberOf me.DroptargetEntity
         * @function
         * @param {Constant} checkMethod the checkmethod (defaults to CHECKMETHOD_OVERLAP)
         */
setCheckMethod:function(a){
//  We can improve this check,
//  because now you can use every method in theory
"undefined"!=typeof this[a]&&(this.checkMethod=this[a])},/**
         * Checks if a dropped entity is dropped on the current entity
         * @name checkOnMe
         * @memberOf me.DroptargetEntity
         * @function
         * @param {Object} draggableEntity the draggable entity that is dropped
         */
checkOnMe:function(a,b){b&&this.checkMethod(b.getBounds())&&
// call the drop method on the current entity
this.drop(b)},/**
         * Gets called when a draggable entity is dropped on the current entity
         * @name drop
         * @memberOf me.DroptargetEntity
         * @function
         * @param {Object} draggableEntity the draggable entity that is dropped
         */
drop:function(){},/**
         * Destructor
         * @name destroy
         * @memberOf me.DroptargetEntity
         * @function
         */
destroy:function(){b.unsubscribe(b.DRAGEND,this.checkOnMe)}})}(me.Entity,me.event),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){
// generate a default image for the particles
var a=function(){var a=me.video.createCanvas(1,1),b=a.getContext("2d");return b.fillStyle="#fff",b.fillRect(0,0,1,1),a}();/**
     * me.ParticleEmitterSettings contains the default settings for me.ParticleEmitter.<br>
     *
     * @protected
     * @class
     * @memberOf me
     * @see me.ParticleEmitter
     */
me.ParticleEmitterSettings={/**
         * Width of the particle spawn area.<br>
         * @public
         * @type Number
         * @name width
         * @memberOf me.ParticleEmitterSettings
         * @default 0
         */
width:0,/**
         * Height of the particle spawn area.<br>
         * @public
         * @type Number
         * @name height
         * @memberOf me.ParticleEmitterSettings
         * @default 0
         */
height:0,/**
         * Image used for particles.<br>
         * @public
         * @type CanvasImageSource
         * @name image
         * @memberOf me.ParticleEmitterSettings
         * @default 1x1 white pixel
         * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasimagesource
         */
image:a,/**
         * Total number of particles in the emitter.<br>
         * @public
         * @type Number
         * @name totalParticles
         * @default 50
         * @memberOf me.ParticleEmitterSettings
         */
totalParticles:50,/**
         * Start angle for particle launch in Radians.<br>
         * @public
         * @type Number
         * @name angle
         * @default Math.PI / 2
         * @memberOf me.ParticleEmitterSettings
         */
angle:Math.PI/2,/**
         * Variation in the start angle for particle launch in Radians.<br>
         * @public
         * @type Number
         * @name angleVariation
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         */
angleVariation:0,/**
         * Minimum time each particle lives once it is emitted in ms.<br>
         * @public
         * @type Number
         * @name minLife
         * @default 1000
         * @memberOf me.ParticleEmitterSettings
         */
minLife:1e3,/**
         * Maximum time each particle lives once it is emitted in ms.<br>
         * @public
         * @type Number
         * @name maxLife
         * @default 3000
         * @memberOf me.ParticleEmitterSettings
         */
maxLife:3e3,/**
         * Start speed of particles.<br>
         * @public
         * @type Number
         * @name speed
         * @default 2
         * @memberOf me.ParticleEmitterSettings
         */
speed:2,/**
         * Variation in the start speed of particles.<br>
         * @public
         * @type Number
         * @name speedVariation
         * @default 1
         * @memberOf me.ParticleEmitterSettings
         */
speedVariation:1,/**
         * Minimum start rotation for particles sprites in Radians.<br>
         * @public
         * @type Number
         * @name minRotation
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         */
minRotation:0,/**
         * Maximum start rotation for particles sprites in Radians.<br>
         * @public
         * @type Number
         * @name maxRotation
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         */
maxRotation:0,/**
         * Minimum start scale ratio for particles (1 = no scaling).<br>
         * @public
         * @type Number
         * @name minStartScale
         * @default 1
         * @memberOf me.ParticleEmitterSettings
         */
minStartScale:1,/**
         * Maximum start scale ratio for particles (1 = no scaling).<br>
         * @public
         * @type Number
         * @name maxStartScale
         * @default 1
         * @memberOf me.ParticleEmitterSettings
         */
maxStartScale:1,/**
         * Minimum end scale ratio for particles.<br>
         * @public
         * @type Number
         * @name minEndScale
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         */
minEndScale:0,/**
         * Maximum end scale ratio for particles.<br>
         * @public
         * @type Number
         * @name maxEndScale
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         */
maxEndScale:0,/**
         * Vertical force (Gravity) for each particle.<br>
         * @public
         * @type Number
         * @name gravity
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         * @see me.sys.gravity
         */
gravity:0,/**
         * Horizontal force (like a Wind) for each particle.<br>
         * @public
         * @type Number
         * @name wind
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         */
wind:0,/**
         * Update the rotation of particle in accordance the particle trajectory.<br>
         * The particle sprite should aim at zero angle (draw from left to right).<br>
         * Override the particle minRotation and maxRotation.<br>
         * @public
         * @type Boolean
         * @name followTrajectory
         * @default false
         * @memberOf me.ParticleEmitterSettings
         */
followTrajectory:!1,/**
         * Enable the Texture Additive by canvas composite operation (lighter).<br>
         * WARNING: Composite Operation may decreases performance!.<br>
         * @public
         * @type Boolean
         * @name textureAdditive
         * @default false
         * @memberOf me.ParticleEmitterSettings
         */
textureAdditive:!1,/**
         * Update particles only in the viewport, remove it when out of viewport.<br>
         * @public
         * @type Boolean
         * @name onlyInViewport
         * @default true
         * @memberOf me.ParticleEmitterSettings
         */
onlyInViewport:!0,/**
         * Render particles in screen space. <br>
         * @public
         * @type Boolean
         * @name floating
         * @default false
         * @memberOf me.ParticleEmitterSettings
         */
floating:!1,/**
         * Maximum number of particles launched each time in this emitter (used only if emitter is Stream).<br>
         * @public
         * @type Number
         * @name maxParticles
         * @default 10
         * @memberOf me.ParticleEmitterSettings
         */
maxParticles:10,/**
         * How often a particle is emitted in ms (used only if emitter is Stream).<br>
         * Necessary that value is greater than zero.<br>
         * @public
         * @type Number
         * @name frequency
         * @default 100
         * @memberOf me.ParticleEmitterSettings
         */
frequency:100,/**
         * Duration that the emitter releases particles in ms (used only if emitter is Stream).<br>
         * After this period, the emitter stop the launch of particles.<br>
         * @public
         * @type Number
         * @name duration
         * @default Infinity
         * @memberOf me.ParticleEmitterSettings
         */
duration:1/0,/**
         * Skip n frames after updating the particle system once. <br>
         * This can be used to reduce the performance impact of emitters with many particles.<br>
         * @public
         * @type Number
         * @name framesToSkip
         * @default 0
         * @memberOf me.ParticleEmitterSettings
         */
framesToSkip:0},/**
     * Particle Emitter Object.
     * @class
     * @extends Rect
     * @memberOf me
     * @constructor
     * @param {Number} x x-position of the particle emitter
     * @param {Number} y y-position of the particle emitter
     * @param {object} settings An object containing the settings for the particle emitter. See {@link me.ParticleEmitterSettings}
     * @example
     *
     * // Create a basic emitter at position 100, 100
     * var emitter = new me.ParticleEmitter(100, 100);
     *
     * // Adjust the emitter properties
     * emitter.totalParticles = 200;
     * emitter.minLife = 1000;
     * emitter.maxLife = 3000;
     * emitter.z = 10;
     *
     * // Add the emitter to the game world
     * me.game.world.addChild(emitter);
     * me.game.world.addChild(emitter.container);
     *
     * // Launch all particles one time and stop, like a explosion
     * emitter.burstParticles();
     *
     * // Launch constantly the particles, like a fountain
     * emitter.streamParticles();
     *
     * // At the end, remove emitter from the game world
     * // call this in onDestroyEvent function
     * me.game.world.removeChild(emitter);
     * me.game.world.removeChild(emitter.container);
     *
     */
me.ParticleEmitter=me.Rect.extend(/** @scope me.ParticleEmitter.prototype */
{/**
         * @ignore
         */
init:function(a,b,c){
// Emitter is Stream, launch particles constantly
/** @ignore */
this._stream=!1,
// Frequency timer (in ms) for emitter launch new particles
// used only in stream emitter
/** @ignore */
this._frequencyTimer=0,
// Time of live (in ms) for emitter launch new particles
// used only in stream emitter
/** @ignore */
this._durationTimer=0,
// Emitter is emitting particles
/** @ignore */
this._enabled=!1,
// Emitter will always update
this.isRenderable=!1,
// call the super constructor
me.Rect.prototype.init.apply(this,[a,b,1/0,1/0]),
// don't sort the particles by z-index
this.autoSort=!1,this.container=new me.ParticleContainer(this),/**
             * Z-order for particles, value is forwarded to the particle container <br>
             * @type Number
             * @name z
             * @memberOf me.ParticleEmitter
             */
Object.defineProperty(this,"z",{get:function(){return this.container.z},set:function(a){this.container.z=a},enumerable:!0,configurable:!0}),/**
             * Floating property for particles, value is forwarded to the particle container <br>
             * @type Boolean
             * @name floating
             * @memberOf me.ParticleEmitter
             */
Object.defineProperty(this,"floating",{get:function(){return this.container.floating},set:function(a){this.container.floating=a},enumerable:!0,configurable:!0}),
// Reset the emitter to defaults
this.reset(c)},destroy:function(){this.reset()},/**
         * returns a random point inside the bounds for this emitter
         * @name getRandomPoint
         * @memberOf me.ParticleEmitter
         * @function
         * @return {me.Vector2d} new vector
         */
getRandomPoint:function(){var a=this.pos.clone();return a.x+=0..randomFloat(this.width),a.y+=0..randomFloat(this.height),a},/**
         * Reset the emitter with default values.<br>
         * @function
         * @param {Object} settings [optional] object with emitter settings. See {@link me.ParticleEmitterSettings}
         * @name reset
         * @memberOf me.ParticleEmitter
         */
reset:function(a){
// check if settings exists and create a dummy object if necessary
a=a||{};var b=me.ParticleEmitterSettings,c="number"==typeof a.width?a.width:b.width,d="number"==typeof a.height?a.height:b.height;this.resize(c,d),Object.assign(this,b,a),
// reset particle container values
this.container.destroy()},
// Add count particles in the game world
/** @ignore */
addParticles:function(a){for(var b=0;~~a>b;b++){
// Add particle to the container
var c=me.pool.pull("me.Particle",this);this.container.addChild(c)}},/**
         * Emitter is of type stream and is launching particles <br>
         * @function
         * @returns {Boolean} Emitter is Stream and is launching particles
         * @name isRunning
         * @memberOf me.ParticleEmitter
         */
isRunning:function(){return this._enabled&&this._stream},/**
         * Launch particles from emitter constantly <br>
         * Particles example: Fountains
         * @param {Number} duration [optional] time that the emitter releases particles in ms
         * @function
         * @name streamParticles
         * @memberOf me.ParticleEmitter
         */
streamParticles:function(a){this._enabled=!0,this._stream=!0,this.frequency=Math.max(this.frequency,1),this._durationTimer="number"==typeof a?a:this.duration},/**
         * Stop the emitter from generating new particles (used only if emitter is Stream) <br>
         * @function
         * @name stopStream
         * @memberOf me.ParticleEmitter
         */
stopStream:function(){this._enabled=!1},/**
         * Launch all particles from emitter and stop <br>
         * Particles example: Explosions <br>
         * @param {Number} total [optional] number of particles to launch
         * @function
         * @name burstParticles
         * @memberOf me.ParticleEmitter
         */
burstParticles:function(a){this._enabled=!0,this._stream=!1,this.addParticles("number"==typeof a?a:this.totalParticles),this._enabled=!1},/**
         * @ignore
         */
update:function(a){
// Launch new particles, if emitter is Stream
if(this._enabled&&this._stream){
// Check if the emitter has duration set
if(this._durationTimer!==1/0&&(this._durationTimer-=a,this._durationTimer<=0))return this.stopStream(),!1;
// Increase the emitter launcher timer
this._frequencyTimer+=a;
// Check for new particles launch
var b=this.container.children.length;b<this.totalParticles&&this._frequencyTimer>=this.frequency&&(b+this.maxParticles<=this.totalParticles?this.addParticles(this.maxParticles):this.addParticles(this.totalParticles-b),this._frequencyTimer=0)}return!0}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * Particle Container Object.
     * @class
     * @extends me.Container
     * @memberOf me
     * @constructor
     * @param {me.ParticleEmitter} emitter the emitter which owns this container
     */
me.ParticleContainer=me.Container.extend(/** @scope ParticleContainer */
{/**
         * @ignore
         */
init:function(a){
// cache a reference to the viewport to use as our bounding box
this._viewport=me.game.viewport,
// call the super constructor
me.Container.prototype.init.apply(this),
// don't sort the particles by z-index
this.autoSort=!1,
// count the updates
this._updateCount=0,
// internally store how much time was skipped when frames are skipped
this._dt=0,
// cache the emitter for later use
this._emitter=a},/**
         * @ignore
         */
getBounds:function(){return this._viewport},/**
         * @ignore
         */
update:function(a){if(
// skip frames if necessary
++this._updateCount>this._emitter.framesToSkip&&(this._updateCount=0),this._updateCount>0)return this._dt+=a,!1;a+=this._dt,this._dt=0;for(var b=me.game.viewport,c=this.children.length-1;c>=0;--c){var d=this.children[c];d.isRenderable=!0,
// particle.inViewport = viewport.isVisible(particle);
d.inViewport=this.floating||d.pos.x<b.pos.x+b.width&&b.pos.x<d.pos.x+d.width&&d.pos.y<b.pos.y+b.height&&b.pos.y<d.pos.y+d.height,d.update(a)||this.removeChildNow(d)}return!0},/**
         * @ignore
         */
draw:function(a,b){if(this.children.length>0){var c,d=a.getContext();
// Check for additive draw
this._emitter.textureAdditive&&(c=d.globalCompositeOperation,d.globalCompositeOperation="lighter"),me.Container.prototype.draw.apply(this,[a,b]),
// Restore globalCompositeOperation
this._emitter.textureAdditive&&(d.globalCompositeOperation=c)}}})}(),/*
 * MelonJS Game Engine
 * Copyright (C) 2011 - 2015, Olivier Biot, Jason Oster, Aaron McLeod
 * http://www.melonjs.org
 *
 */
function(){/**
     * Single Particle Object.
     * @class
     * @extends me.Renderable
     * @memberOf me
     * @constructor
     * @param {me.ParticleEmitter} particle emitter
     */
me.Particle=me.Renderable.extend(/** @scope me.Particle.prototype */
{/**
         * @ignore
         */
init:function(a){
// Call the super constructor
var b=a.getRandomPoint();me.Renderable.prototype.init.apply(this,[b.x,b.y,a.image.width,a.image.height]),
// Particle will always update
this.alwaysUpdate=!0,
// Particle will not act as a rednerable
// FIXME: This is probably not needed. It's a hack that tries to
// workaround performance issues within container.
this.isRenderable=!1,
// Cache the image reference
this.image=a.image;
// Set the start particle Angle and Speed as defined in emitter
var c=a.angle+(a.angleVariation>0?(0..randomFloat(2)-1)*a.angleVariation:0),d=a.speed+(a.speedVariation>0?(0..randomFloat(2)-1)*a.speedVariation:0);
// Set the start particle Velocity
this.vel=new me.Vector2d(d*Math.cos(c),-d*Math.sin(c)),
// Set the start particle Time of Life as defined in emitter
this.life=a.minLife.randomFloat(a.maxLife),this.startLife=this.life,
// Set the start and end particle Scale as defined in emitter
// clamp the values as minimum and maximum scales range
this.startScale=a.minStartScale.randomFloat(a.maxStartScale).clamp(a.minStartScale,a.maxStartScale),this.endScale=a.minEndScale.randomFloat(a.maxEndScale).clamp(a.minEndScale,a.maxEndScale),
// Set the particle Gravity and Wind (horizontal gravity) as defined in emitter
this.gravity=a.gravity,this.wind=a.wind,
// Set if the particle update the rotation in accordance the trajectory
this.followTrajectory=a.followTrajectory,
// Set if the particle update only in Viewport
this.onlyInViewport=a.onlyInViewport,
// Set the particle Z Order
this.z=a.z,
// cache inverse of the expected delta time
this._deltaInv=me.sys.fps/1e3,this.transform=new me.Matrix2d,
// Set the start particle rotation as defined in emitter
// if the particle not follow trajectory
a.followTrajectory||(this.angle=a.minRotation.randomFloat(a.maxRotation))},/**
         * Update the Particle <br>
         * This is automatically called by the game manager {@link me.game}
         * @name update
         * @memberOf me.Particle
         * @function
         * @ignore
         * @param {Number} dt time since the last update in milliseconds
         */
update:function(a){
// move things forward independent of the current frame rate
var b=a*this._deltaInv;
// Decrease particle life
this.life=this.life>a?this.life-a:0;
// Calculate the particle Age Ratio
var c=this.life/this.startLife,d=this.startScale;this.startScale>this.endScale?(d*=c,d=d<this.endScale?this.endScale:d):this.startScale<this.endScale&&(d/=c,d=d>this.endScale?this.endScale:d),
// Set the particle opacity as Age Ratio
this.alpha=c,
// Adjust the particle velocity
this.vel.x+=this.wind*b,this.vel.y+=this.gravity*b;
// If necessary update the rotation of particle in accordance the particle trajectory
var e=this.followTrajectory?Math.atan2(this.vel.y,this.vel.x):this.angle;
// Return true if the particle is not dead yet
// Update particle transform
return this.pos.x+=this.vel.x*b,this.pos.y+=this.vel.y*b,this.transform.set(d,0,0,0,d,0,~~this.pos.x,~~this.pos.y,1).rotate(e),(this.inViewport||!this.onlyInViewport)&&this.life>0},draw:function(a){a.save(),
// particle alpha value
a.setGlobalAlpha(a.globalAlpha()*this.alpha),
// translate to the defined anchor point and scale it
a.transform(this.transform);var b=this.width,c=this.height;a.drawImage(this.image,0,0,b,c,-b/2,-c/2,b,c),a.restore()}})}(window);var global={network:{socket:void 0,host:"localhost",port:3e3}},game={data:{lobby:{},lobbyPlayers:{},lobbyPlayersDirty:!0,players:{},localPlayer:null,
// score
score:0,time:100,localSpy:!1,rituel:{gaugeStartValue:50,gaugeCurrentValue:50,gaugeMaxValue:100,goodRitualInc:1,badRitualInc:-2},defeat:!1,ended:!1,victory:!1},functions:{playerById:function(a){return game.data.players[a]}},
// Run on page load.
onload:function(){
// Initialize the video.
// Initialize the video.
// add "#debug" to the URL to enable the debug Panel
// Initialize the audio.
// Set a callback to run when loading is complete.
// Load the resources.
// Initialize melonJS and display a loading screen.
return me.video.init(640,480,{wrapper:"screen",scale:"auto"})?(me.game.HASH.debug===!0&&window.onReady(function(){me.plugin.register.defer(this,me.debug.Panel,"debug",me.input.KEY.V)}),me.audio.init("mp3,ogg"),me.audio.disable(),me.loader.onload=this.loaded.bind(this),me.loader.preload(game.resources),void me.state.change(me.state.LOADING)):void alert("Your browser does not support HTML5 canvas.")},
// Run on game resources loaded.
loaded:function(){
//   me.state.set(me.state.MENU, new game.TitleScreen());
me.state.set(me.state.READY,new game.MainScreen),
// set the "Play/Ingame" Screen Object
me.state.set(me.state.MENU,new game.TitleScreen),me.state.set(me.state.PLAY,new game.PlayScreen),
// set a global fading transition for the screen
me.state.transition("fade","#FFFFFF",250),
// register our player entity in the object pool
me.pool.register("mainPlayer",game.PlayerEntity),me.pool.register("networkPlayer",game.NetworkPlayer),
// me.pool.register("ingredientEntity", game.IngredientEntity);
//me.pool.register("opponentEntity", game.OpponentEntity); // TODO use a playerEntity
// enable the keyboard
me.input.bindKey(me.input.KEY.LEFT,"left"),me.input.bindKey(me.input.KEY.RIGHT,"right"),me.input.bindKey(me.input.KEY.UP,"up"),me.input.bindKey(me.input.KEY.DOWN,"down"),me.input.bindKey(me.input.KEY.X,"dance"),me.input.bindKey(me.input.KEY.SPACE,"carry",!0),
// start the game
me.state.change(me.state.MENU)}};game.resources=[{name:"area01_bg0",type:"image",src:"data/img/area01_bg0.png"},{name:"32x32_font",type:"image",src:"data/img/font/32x32_font.png"},{name:"title_screen",type:"image",src:"data/img/gui/title_screen.png"},{name:"area01_level_tiles",type:"image",src:"data/img/map/area01_level_tiles.png"},{name:"dance1_down",type:"image",src:"data/img/sprite/dance1_down.png"},{name:"dance1_side",type:"image",src:"data/img/sprite/dance1_side.png"},{name:"dance1_up",type:"image",src:"data/img/sprite/dance1_up.png"},{name:"placeholderchara1",type:"image",src:"data/img/sprite/placeholderchara1.png"},{name:"placeholderchara2",type:"image",src:"data/img/sprite/placeholderchara2.png"},{name:"placeholderchara3",type:"image",src:"data/img/sprite/placeholderchara3.png"},{name:"placeholderchara4",type:"image",src:"data/img/sprite/placeholderchara4.png"},{name:"placeholderchara5",type:"image",src:"data/img/sprite/placeholderchara5.png"},{name:"placeholderchara6",type:"image",src:"data/img/sprite/placeholderchara6.png"},{name:"spritesheet",type:"image",src:"data/img/sprite/spritesheet.png"},{name:"stand_down",type:"image",src:"data/img/sprite/stand_down.png"},{name:"stand_side",type:"image",src:"data/img/sprite/stand_side.png"},{name:"stand_up",type:"image",src:"data/img/sprite/stand_up.png"},{name:"walk_down",type:"image",src:"data/img/sprite/walk_down.png"},{name:"walk_side",type:"image",src:"data/img/sprite/walk_side.png"},{name:"walk_up",type:"image",src:"data/img/sprite/walk_up.png"},{name:"area01",type:"tmx",src:"data/map/area01.tmx"}],game.HUD=game.HUD||{},game.HUD.Container=me.Container.extend({init:function(){
// call the constructor
me.Container.prototype.init.apply(this),
// persistent across level change
this.isPersistent=!0,
// make sure we use screen coordinates
this.floating=!0,
// make sure our object is always draw first
this.z=1/0,
// give a name
this.name="HUD",
// add our child score object at the right-bottom position
this.addChild(new game.HUD.ScoreItem(630,440)),this.addChild(new game.HUD.TimeItem(230,440)),this.addChild(new game.HUD.Spy(430,440)),this.addChild(new game.HUD.Result(200,200))}}),game.HUD.Result=me.Renderable.extend({/**
     * constructor
     */
init:function(a,b){
// call the parent constructor
// (size does not matter here)
me.Renderable.prototype.init.apply(this,[a,b,300,10]),
// create a font
this.font=new me.Font("Arial",18,"#ffffff"),
// local copy of the global score
this.score=-1},/**
     * update function
     */
update:function(a){
// we don't draw anything fancy here, so just
// return true if the score has been updated
return!0},/**
     * draw the score
     */
draw:function(a){game.data.ended&&(game.data.defeat&&game.data.localSpy||game.data.victory&&!game.data.localSpy?this.font.draw(a,"Victory !",this.pos.x,this.pos.y):this.font.draw(a,"You lose !",this.pos.x,this.pos.y))}}),game.HUD.Spy=me.Renderable.extend({/**
     * constructor
     */
init:function(a,b){
// call the parent constructor
// (size does not matter here)
me.Renderable.prototype.init.apply(this,[a,b,10,10]),
// create a font
this.font=new me.BitmapFont("32x32_font",32),this.font.set("right"),
// local copy of the global score
this.score=-1},/**
     * update function
     */
update:function(a){
// we don't draw anything fancy here, so just
// return true if the score has been updated
return!0},/**
     * draw the score
     */
draw:function(a){game.data.localSpy&&this.font.draw(a,"SPY",this.pos.x,this.pos.y)}}),game.HUD.ScoreItem=me.Renderable.extend({/**
     * constructor
     */
init:function(a,b){
// call the parent constructor
// (size does not matter here)
me.Renderable.prototype.init.apply(this,[a,b,10,10]),
// create a font
this.font=new me.BitmapFont("32x32_font",32),this.font.set("right"),
// local copy of the global score
this.score=-1},/**
     * update function
     */
update:function(a){
// we don't draw anything fancy here, so just
// return true if the score has been updated
return!0},/**
     * draw the score
     */
draw:function(a){game.data.ended?this.font.draw(a,"",this.pos.x,this.pos.y):this.font.draw(a,game.data.score,this.pos.x,this.pos.y)}}),game.HUD.TimeItem=me.Renderable.extend({/**
     * constructor
     */
init:function(a,b){
// call the parent constructor
// (size does not matter here)
me.Renderable.prototype.init.apply(this,[a,b,10,10]),
// create a font
this.font=new me.BitmapFont("32x32_font",32),this.font.set("right"),
// local copy of the global score
this.score=-1},/**
     * update function
     */
update:function(a){
// we don't draw anything fancy here, so just
// return true if the score has been updated
return!0},/** 
     * draw the score
     */
draw:function(a){game.data.ended?this.font.draw(a," ",this.pos.x,this.pos.y):this.font.draw(a,game.data.time,this.pos.x,this.pos.y),this.font.draw(a,game.data.time,this.pos.x,this.pos.y)}}),game.IngredientEntity=me.Entity.extend({
// extending the init function is not mandatory
// unless you need to add some extra initialization
init:function(a,b,c){
// call the parent constructor
me.Entity.prototype.init.apply(this,[a,b,c])},
// this function is called by the engine, when
// an object is touched by something (here collected)
onCollision:function(a,b){
// do something when collected
// make sure it cannot be collected "again"
// remove it
return this.body.setCollisionMask(me.collision.types.NO_OBJECT),me.game.world.removeChild(this),!1}}),/**
 * Player Entity
 */
game.NetworkPlayer=me.Entity.extend({/**
     * constructor
     */
init:function(a,b,c){
// call the constructor
me.Entity.prototype.init.apply(this,[a,b,{width:40,height:190}]),
// ensure the player is updated even when outside of the viewport
this.alwaysUpdate=!0,this.dancing=!1,this.stand=!0,this.body.collisionType=me.collision.types.NO_OBJECT},/**
     * update the entity
     */
update:function(a){var b=function(a,b){global.network.socket&&global.network.socket.emit(a,b)},c=!0;me.input.isKeyPressed("left")&&(b("move","left"),c=!1),me.input.isKeyPressed("right")&&(b("move","right"),c=!1),me.input.isKeyPressed("up")&&(b("move","up"),c=!1),me.input.isKeyPressed("down")&&(b("move","down"),c=!1),me.input.isKeyPressed("dance")?(this.dancing||(this.dancing=!0,b("dance",!0)),c=!1):this.dancing&&(this.dancing=!1,b("dance",!1)),me.input.isKeyPressed("mark")&&game.data.localPlayer.refreshCollision(),this.stand!=c&&(this.stand=c,b("stand",c))},/**
     * colision handler
     * (called when colliding with other objects)
     */
onCollision:function(a,b){
// Make all other objects solid
return!0}}),game.OpponentEntity=me.Entity.extend({init:function(a,b,c){},
// manage the enemy movement
update:function(a){return!1},onCollision:function(a,b){
// Make all other objects solid
return!1}});var Marks=me.Renderable.extend({/**
     * constructor
     */
init:function(){this.markCount=0,
// call the parent constructor
// (size does not matter here)
me.Renderable.prototype.init.apply(this,[0,0,10,10]),
// create a font
this.font=new me.Font("Arial",18,"#ffffff")},/**
     * update function
     */
update:function(a){return!0},/**
     * draw the score
     */
draw:function(a){this.font.draw(a,this.markCount,26,8)}});game.PlayerEntity=me.Entity.extend({init:function(a,b,c,d){this.direction="right",this.animation="stand",this.playerId=c,this.marks=[];var e={},f="placeholderchara"+d;e.image=me.loader.getImage(f),e.width=64,e.height=64,
// call the constructor
me.Entity.prototype.init.apply(this,[a,b,e]),this.renderable=new me.Container(0,0,64,64);var g=new me.AnimationSheet(0,0,e);this.renderable.addChild(g),this.mark=new Marks,this.renderable.addChild(this.mark),this.sheet=g,
// ensure the player is updated even when outside of the viewport
this.alwaysUpdate=!0,
// define a basic walking animation (using all frames)
g.addAnimation("stand_side",[0]),g.addAnimation("stand_up",[0]),g.addAnimation("stand_down",[0]),g.addAnimation("dead_side",[2]),g.addAnimation("dead_up",[2]),g.addAnimation("dead_down",[2]),g.addAnimation("walk_side",[0]),g.addAnimation("walk_up",[0]),g.addAnimation("walk_down",[0]),g.addAnimation("dance1_side",[1]),g.addAnimation("dance1_up",[1]),g.addAnimation("dance1_down",[1]),g.addAnimation("carry",[0]),
// set the standing animation as default
g.setCurrentAnimation("stand_side")},refreshCollision:function(){me.collision.check(this)},onCollision:function(a){return a.b.body.collisionType===me.collision.types.ENEMY_OBJECT&&(console.log("Collision"),-1===a.b.marks.indexOf(a.a.playerId)&&global.network.socket.emit("marked",a.b.playerId)),!1},refresh:function(a){this.pos.x=a.x,this.pos.y=a.y,this.mark.markCount=a.marks.length;var b=a.direction;this.sheet.flipX("left"==b),("left"==b||"right"==b)&&(b="side");var c=a.animation+"_"+b;this.trySetAnim(c)},trySetAnim:function(a){this.sheet.isCurrentAnimation(a)||this.sheet.setCurrentAnimation(a)}}),game.rituelHUD=game.rituelHUD||{},game.rituelHUD.Container=me.Container.extend({init:function(){
// call the constructor
me.Container.prototype.init.apply(this),
// persistent across level change
this.isPersistent=!1,
// make sure we use screen coordinates
this.floating=!0,
// make sure our object is always draw first
this.z=1/0,
// give a name
this.name="rituelHUD",
// add our child score object at the right-bottom position
this.addChild(new game.rituelHUD.gauge(global.WIDTH/2,global.HEIGHT-30))}}),game.rituelHUD.gauge=me.Renderable.extend({/**
     * constructor
     */
init:function(a,b){
// call the parent constructor
// (size does not matter here)
me.Renderable.prototype.init.apply(this,[a,b,10,10]),
// create a font
this.font=new me.BitmapFont("32x32_font",32),this.font.set("right"),
// local copy of the global score
this.value=-1},/**
     * update function
     */
update:function(a){
// we don't draw anything fancy here, so just
// return true if the score has been updated
// we don't draw anything fancy here, so just
// return true if the score has been updated
return this.value!==game.data.rituel.gaugeCurrentValue?(this.value=Math.max(0,Math.min(game.data.rituel.gaugeCurrentValue,game.data.rituel.gaugeMaxValue)),!0):!1},/**
     * draw the score
     */
draw:function(a){this.font.draw(a,game.data.score,this.pos.x,this.pos.y)}}),/**
 * a HUD container and child items
 */
game.TitleUI=game.TitleUI||{},game.TitleUI.Container=me.Container.extend({init:function(){
// call the constructor
me.Container.prototype.init.apply(this,[0,0,me.game.viewport.width,me.game.viewport.height]),
// persistent across level change
this.isPersistent=!1,
// make sure we use screen coordinates
this.floating=!0,
// make sure our object is always draw first
this.z=1/0,
// give a name
this.name="TitleUI",this.font=new me.BitmapFont("32x32_font",32),this.numChildren=0},addPlayer:function(a,b,c){a.numChildren++,me.game.HASH.debug===!0&&console.log("TitleUI.addPlayer numChildren = "+this.numChildren);var d=new game.TitleUI.TextRun(a.width/2-128,32+48*c,a.font,b.name,b.id);me.game.HASH.debug===!0&&console.log("addChild "+d),a.addChild(d)},update:function(){if(this.updateMainText(),me.Container.prototype.update.apply(this),!game.data.lobbyPlayersDirty)return!1;for(game.data.lobbyPlayersDirty=!1,me.game.HASH.debug===!0&&console.log("TitleUI.update numChildren = "+this.numChildren);this.numChildren>0;)this.numChildren--,this.removeChildNow(this.getChildAt(0));var a=this,b=0;return Object.keys(game.data.lobbyPlayers).forEach(function(c){a.addPlayer(a,game.data.lobbyPlayers[c],b++)}),!0},updateMainText:function(){game.data.lobby.gameRunning?this.gameRunningText||(this.gameRunningText=new game.TitleUI.TextRun(64,400,this.font,"GAME IN PROGRESS","gameRunning"),this.addChild(this.gameRunningText)):this.gameRunningText&&(this.removeChild(this.gameRunningText),this.gameRunningText=null),game.data.lobby.preGame?this.preGameText||(this.preGameText=new game.TitleUI.TextRun(16,376,this.font,"WAIT FOR PLAYERS OR","preGame1"),this.preGameText2=new game.TitleUI.TextRun(0,424,this.font,"PRESS ENTER TO START","preGame2"),this.addChild(this.preGameText),this.addChild(this.preGameText2)):(this.preGameText&&(this.removeChild(this.preGameText),this.preGameText=null),this.preGameText2&&(this.removeChild(this.preGameText2),this.preGameText2=null))}}),/**
 * a basic HUD item to display score
 */
game.TitleUI.TextRun=me.Renderable.extend({/**
     * constructor
     */
init:function(a,b,c,d,e){
// call the parent constructor
// (size does not matter here)
me.Renderable.prototype.init.apply(this,[a,b,256,256]),this.text=d,this.font=c,this.x=a,this.y=b,this.name=e,this.anchorPoint=new me.Vector2d(.5,.5)},/**
     * update function
     */
update:function(){return!1},/**
     * draw the name box
     */
draw:function(a){this.font.draw(a,this.text,this.x,this.y)}}),game.MainScreen=me.ScreenObject.extend({init:function(){this.font=new me.Font("Verdana",12,"#fff","center")},onDestroyEvent:function(){me.game.world.removeChild(this.HUD),me.game.world.removeChild(this.player),game.data.localSpy=!1;var a=global.network.socket;a&&(a.removeAllListeners("returnToLobby"),a.removeAllListeners("refreshPlayer"),a.removeAllListeners("scoreUpdate"),a.removeAllListeners("scoreUpdate"),a.removeAllListeners("removePlayer"),a.removeAllListeners("victory"),a.removeAllListeners("defeat"))},onResetEvent:function(){
// Connect to server and set global reference to the socket that's connected
me.game.HASH.debug===!0&&console.log("gameStarted"),me.levelDirector.loadLevel("area01"),setTimeout(function(){me.game.HASH.debug===!0&&console.log("player init."),Object.keys(game.data.lobbyPlayers).forEach(function(a){var b=game.data.lobbyPlayers[a];me.game.HASH.debug===!0&&console.log("player added "+b.id);var c=me.pool.pull("mainPlayer",b.x,b.y,b.id,b.spriteIndex);me.game.world.addChild(c),game.data.players[b.id]=c,game.data.clientId===b.id.substring(2)&&(me.game.HASH.debug===!0&&console.log("localPlayer added for "+game.data.clientId),game.data.localPlayer=c)}),game.data.lobbyPlayers={}},500),global.network.socket.on("returnToLobby",function(){me.state.change(me.state.MENU)}),global.network.socket.on("refreshPlayer",function(a){var b=game.functions.playerById(a.id);me.game.HASH.debug===!0&&console.log("refreshPlayer "+b.playerId+"@"+a.x+","+a.y),b&&b.refresh(a)}),global.network.socket.on("scoreUpdate",function(a){game.data.score=a.gauge,game.data.time=a.time}),global.network.socket.on("removePlayer",function(a){var b=game.functions.playerById(a);me.game.world.removeChild(b),game.data.players[a]=null}),global.network.socket.on("victory",function(a){game.data.victory=!0,game.data.ended=!0}),global.network.socket.on("defeat",function(a){game.data.defeat=!0,game.data.ended=!0}),me.levelDirector.loadLevel("area01"),me.input.bindKey(me.input.KEY.LEFT,"left"),me.input.bindKey(me.input.KEY.RIGHT,"right"),me.input.bindKey(me.input.KEY.UP,"up"),me.input.bindKey(me.input.KEY.DOWN,"down"),me.input.bindKey(me.input.KEY.X,"dance"),me.input.bindKey(me.input.KEY.W,"mark"),this.player=me.pool.pull("networkPlayer"),me.game.world.addChild(this.player),this.HUD=new game.HUD.Container,me.game.world.addChild(this.HUD)}}),game.PlayScreen=me.ScreenObject.extend({/**
     *  action to perform on state change
     */
onResetEvent:function(){me.levelDirector.loadLevel("area01"),game.data.score=0,game.data.rituel.gaugeCurrentValue=game.data.rituel.gaugeStartValue,
// add our HUD to the game world
this.HUD=new game.HUD.Container,me.game.world.addChild(this.HUD)},/**
     *  action to perform when leaving this screen (state change)
     */
onDestroyEvent:function(){
// remove the HUD from the game world
me.game.world.removeChild(this.HUD)}}),game.TitleScreen=me.ScreenObject.extend({onResetEvent:function(){game.data.lobby.preGame=!1,game.data.lobby.gameRunning=!1,global.network.socket||(global.network.socket=io("http://axle-ultrabook:3000"));var a=global.network.socket;a.on("disconnect",function(){a.removeAllListeners("disconnect"),global.network.socket=null,me.state.change(me.state.MENU)}),game.data.defeat=!1,game.data.victory=!1,game.data.ended=!1,
// title screen
me.game.world.addChild(new me.Sprite(0,0,{image:me.loader.getImage("title_screen")}),1),
// add our HUD to the game world
this.TitleUI=new game.TitleUI.Container,me.game.world.addChild(this.TitleUI),
//// add a new renderable component with the scrolling text
//me.game.world.addChild(new (me.Renderable.extend ({
//    // constructor
//    init : function() {
//        me.Renderable.prototype.init.apply(this, [0, 0, me.game.viewport.width, me.game.viewport.height]);
//        // font for the scrolling text
//        this.font = new me.BitmapFont("32x32_font", 32);
//
//        // a tween to animate the arrow
//       // this.scrollertween = new me.Tween(this).to({scrollerpos: -2200 }, 10000).onComplete(this.scrollover.bind(this)).start();
//
//       // this.scroller = "A SMALL STEP BY STEP TUTORIAL FOR GAME CREATION WITH MELONJS       ";
//       // this.scrollerpos = 600;
//    },
//
//    // some callback for the tween objects
//  /*  scrollover : function() {
//        // reset to default value
//        this.scrollerpos = 640;
//        this.scrollertween.to({scrollerpos: -2200 }, 10000).onComplete(this.scrollover.bind(this)).start();
//    },*/
//
//    update : function (dt) {
//        return true;
//    },
//
//    draw : function (renderer) {
//        this.font.draw(renderer, "PRESS ENTER TO PLAY", 20, 240);
//       // this.font.draw(renderer, this.scroller, this.scrollerpos, 440);
//    },
//    onDestroyEvent : function() {
//      //  this.scrollertween.stop();
//    }
//})), 2);
// change to play state on press Enter or click/tap
me.input.bindKey(me.input.KEY.ENTER,"enter",!0),
//me.input.bindPointer(me.input.mouse.LEFT, me.input.KEY.ENTER);
this.handler=me.event.subscribe(me.event.KEYDOWN,function(b,c,d){"enter"===b&&
// play something on tap / enter
// this will unlock audio on mobile devices
//me.state.change(me.state.READY);
a.emit("lobbyReady")});
// Register network event handlers (once all receivers are init'ed)
var b=this;a.on("initLobby",function(a){b.initPlayers(b,a)}),a.on("initLobbyWaiting",function(){b.initWaiting(b)}),a.on("lobbyAddPlayer",function(a){b.addPlayer(b,a)}),a.on("removePlayer",function(a){b.removePlayer(b,a)}),a.on("gameStart",function(){me.game.HASH.debug===!0&&console.log("gameStart received."),game.data.clientId=this.id,me.state.change(me.state.READY)}),a.on("spy",function(){console.log("isSpy"),game.data.localSpy=!0})},/**
     *  action to perform when leaving this screen (state change)
     */
onDestroyEvent:function(){me.input.unbindKey(me.input.KEY.ENTER),
//me.input.unbindPointer(me.input.mouse.LEFT);
me.event.unsubscribe(this.handler),me.game.world.removeChild(this.TitleUI);var a=global.network.socket;a&&(a.removeAllListeners("initLobby"),a.removeAllListeners("initLobbyWaiting"),a.removeAllListeners("lobbyAddPlayer"),a.removeAllListeners("removePlayer"))},initWaiting:function(a){game.data.lobby.gameRunning=!0},initPlayers:function(a,b){for(var c=0;c<b.length;c++)a.addPlayer(a,b[c]);game.data.lobby.preGame=!0},addPlayer:function(a,b){me.game.HASH.debug===!0&&console.log("socket addPlayer "+b.id),game.data.lobbyPlayers[b.id]=b,game.data.lobbyPlayersDirty=!0},removePlayer:function(a,b){me.game.HASH.debug===!0&&console.log("socket removePlayer "+b),delete game.data.lobbyPlayers[b],game.data.lobbyPlayersDirty=!0}});